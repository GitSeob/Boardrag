/*! For license information please see 230.js.LICENSE.txt */
(self.webpackChunk_42board_front=self.webpackChunk_42board_front||[]).push([[230],{6745:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4417),r=a.glob.performance&&a.glob.performance.now?function(){return a.glob.performance.now()}:function(){return(new Date).getTime()},i=function(){function e(t,n){this.id=e.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:r(),frameRate:0},this.func=t,this.setLayers(n)}return e.prototype.setLayers=function(e){var t;return t=e?e.length>0?e:[e]:[],this.layers=t,this},e.prototype.getLayers=function(){return this.layers},e.prototype.addLayer=function(e){var t,n=this.layers,a=n.length;for(t=0;t<a;t++)if(n[t]._id===e._id)return!1;return this.layers.push(e),!0},e.prototype.isRunning=function(){var t,n=e.animations,a=n.length;for(t=0;t<a;t++)if(n[t].id===this.id)return!0;return!1},e.prototype.start=function(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=r(),e._addAnimation(this),this},e.prototype.stop=function(){return e._removeAnimation(this),this},e.prototype._updateFrameObject=function(e){this.frame.timeDiff=e-this.frame.lastTime,this.frame.lastTime=e,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff},e._addAnimation=function(e){this.animations.push(e),this._handleAnimation()},e._removeAnimation=function(e){var t,n=e.id,a=this.animations,r=a.length;for(t=0;t<r;t++)if(a[t].id===n){this.animations.splice(t,1);break}},e._runFrames=function(){var e,t,n,a,i,s,o,d,l={},u=this.animations;for(a=0;a<u.length;a++)if(t=(e=u[a]).layers,n=e.func,e._updateFrameObject(r()),s=t.length,!n||!1!==n.call(e,e.frame))for(i=0;i<s;i++)void 0!==(o=t[i])._id&&(l[o._id]=o);for(d in l)l.hasOwnProperty(d)&&l[d].draw()},e._animationLoop=function(){var t=e;t.animations.length?(t._runFrames(),requestAnimationFrame(t._animationLoop)):t.animRunning=!1},e._handleAnimation=function(){this.animRunning||(this.animRunning=!0,requestAnimationFrame(this._animationLoop))},e.animations=[],e.animIdCounter=0,e.animRunning=!1,e}();t.Animation=i},4842:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i,s=n(8588),o=n(3442),d=n(4417),l=n(1455),u=n(3774),c=function(){function e(e){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var t=(e||{}).pixelRatio||d.Konva.pixelRatio||function(){if(i)return i;var e=s.Util.createCanvasElement().getContext("2d");return i=(d.Konva._global.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)}();this.pixelRatio=t,this._canvas=s.Util.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}return e.prototype.getContext=function(){return this.context},e.prototype.getPixelRatio=function(){return this.pixelRatio},e.prototype.setPixelRatio=function(e){var t=this.pixelRatio;this.pixelRatio=e,this.setSize(this.getWidth()/t,this.getHeight()/t)},e.prototype.setWidth=function(e){this.width=this._canvas.width=e*this.pixelRatio,this._canvas.style.width=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)},e.prototype.setHeight=function(e){this.height=this._canvas.height=e*this.pixelRatio,this._canvas.style.height=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)},e.prototype.getWidth=function(){return this.width},e.prototype.getHeight=function(){return this.height},e.prototype.setSize=function(e,t){this.setWidth(e||0),this.setHeight(t||0)},e.prototype.toDataURL=function(e,t){try{return this._canvas.toDataURL(e,t)}catch(e){try{return this._canvas.toDataURL()}catch(e){return s.Util.error("Unable to get data URL. "+e.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}},e}();t.Canvas=c,l.Factory.addGetterSetter(c,"pixelRatio",void 0,u.getNumberValidator());var h=function(e){function t(t){void 0===t&&(t={width:0,height:0});var n=e.call(this,t)||this;return n.context=new o.SceneContext(n),n.setSize(t.width,t.height),n}return r(t,e),t}(c);t.SceneCanvas=h;var _=function(e){function t(t){void 0===t&&(t={width:0,height:0});var n=e.call(this,t)||this;return n.hitCanvas=!0,n.context=new o.HitContext(n),n.setSize(t.width,t.height),n}return r(t,e),t}(c);t.HitCanvas=_},8783:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7939),d=n(3774),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.children=new i.Collection,t}return r(t,e),t.prototype.getChildren=function(e){if(!e)return this.children;var t=new i.Collection;return this.children.each((function(n){e(n)&&t.push(n)})),t},t.prototype.hasChildren=function(){return this.getChildren().length>0},t.prototype.removeChildren=function(){for(var e,t=0;t<this.children.length;t++)(e=this.children[t]).parent=null,e.index=0,e.remove();return this.children=new i.Collection,this},t.prototype.destroyChildren=function(){for(var e,t=0;t<this.children.length;t++)(e=this.children[t]).parent=null,e.index=0,e.destroy();return this.children=new i.Collection,this},t.prototype.add=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}var a=e[0];if(a.getParent())return a.moveTo(this),this;var r=this.children;return this._validateAdd(a),a._clearCaches(),a.index=r.length,a.parent=this,r.push(a),this._fire("add",{child:a}),this},t.prototype.destroy=function(){return this.hasChildren()&&this.destroyChildren(),e.prototype.destroy.call(this),this},t.prototype.find=function(e){return this._generalFind(e,!1)},t.prototype.get=function(e){return i.Util.warn("collection.get() method is deprecated. Please use collection.find() instead."),this.find(e)},t.prototype.findOne=function(e){var t=this._generalFind(e,!0);return t.length>0?t[0]:void 0},t.prototype._generalFind=function(e,t){var n=[];return this._descendants((function(a){var r=a._isMatch(e);return r&&n.push(a),!(!r||!t)})),i.Collection.toCollection(n)},t.prototype._descendants=function(e){for(var t=0;t<this.children.length;t++){var n=this.children[t];if(e(n))return!0;if(n.hasChildren()&&n._descendants(e))return!0}return!1},t.prototype.toObject=function(){var e=o.Node.prototype.toObject.call(this);e.children=[];for(var t=this.getChildren(),n=t.length,a=0;a<n;a++){var r=t[a];e.children.push(r.toObject())}return e},t.prototype.isAncestorOf=function(e){for(var t=e.getParent();t;){if(t._id===this._id)return!0;t=t.getParent()}return!1},t.prototype.clone=function(e){var t=o.Node.prototype.clone.call(this,e);return this.getChildren().each((function(e){t.add(e.clone())})),t},t.prototype.getAllIntersections=function(e){var t=[];return this.find("Shape").each((function(n){n.isVisible()&&n.intersects(e)&&t.push(n)})),t},t.prototype._setChildrenIndices=function(){this.children.each((function(e,t){e.index=t}))},t.prototype.drawScene=function(e,t){var n=this.getLayer(),a=e||n&&n.getCanvas(),r=a&&a.getContext(),i=this._getCanvasCache(),s=i&&i.scene,o=a&&a.isCache;if(!this.isVisible()&&!o)return this;if(s){r.save();var d=this.getAbsoluteTransform(t).getMatrix();r.transform(d[0],d[1],d[2],d[3],d[4],d[5]),this._drawCachedSceneCanvas(r),r.restore()}else this._drawChildren("drawScene",a,t);return this},t.prototype.drawHit=function(e,t){if(!this.shouldDrawHit(t))return this;var n=this.getLayer(),a=e||n&&n.hitCanvas,r=a&&a.getContext(),i=this._getCanvasCache();if(i&&i.hit){r.save();var s=this.getAbsoluteTransform(t).getMatrix();r.transform(s[0],s[1],s[2],s[3],s[4],s[5]),this._drawCachedHitCanvas(r),r.restore()}else this._drawChildren("drawHit",a,t);return this},t.prototype._drawChildren=function(e,t,n){var a=t&&t.getContext(),r=this.clipWidth(),i=this.clipHeight(),s=this.clipFunc(),o=r&&i||s,d=n===this;if(o){a.save();var l=this.getAbsoluteTransform(n),u=l.getMatrix();if(a.transform(u[0],u[1],u[2],u[3],u[4],u[5]),a.beginPath(),s)s.call(this,a,this);else{var c=this.clipX(),h=this.clipY();a.rect(c,h,r,i)}a.clip(),u=l.copy().invert().getMatrix(),a.transform(u[0],u[1],u[2],u[3],u[4],u[5])}var _=!d&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===e;_&&(a.save(),a._applyGlobalCompositeOperation(this)),this.children.each((function(a){a[e](t,n)})),_&&a.restore(),o&&a.restore()},t.prototype.getClientRect=function(e){var t,n,a,r,i,s=(e=e||{}).skipTransform,o=e.relativeTo,d=this;this.children.each((function(i){if(i.visible()){var s=i.getClientRect({relativeTo:d,skipShadow:e.skipShadow,skipStroke:e.skipStroke});0===s.width&&0===s.height||(void 0===t?(t=s.x,n=s.y,a=s.x+s.width,r=s.y+s.height):(t=Math.min(t,s.x),n=Math.min(n,s.y),a=Math.max(a,s.x+s.width),r=Math.max(r,s.y+s.height)))}}));for(var l=this.find("Shape"),u=!1,c=0;c<l.length;c++)if(l[c]._isVisible(this)){u=!0;break}return i=u&&void 0!==t?{x:t,y:n,width:a-t,height:r-n}:{x:0,y:0,width:0,height:0},s?i:this._transformedRect(i,o)},t}(o.Node);t.Container=l,s.Factory.addComponentsGetterSetter(l,"clip",["x","y","width","height"]),s.Factory.addGetterSetter(l,"clipX",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"clipY",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"clipWidth",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"clipHeight",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"clipFunc"),i.Collection.mapMethods(l)},3442:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(4417),o=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],d=function(){function e(e){this.canvas=e,this._context=e._canvas.getContext("2d"),s.Konva.enableTrace&&(this.traceArr=[],this._enableTrace())}return e.prototype.fillShape=function(e){e.fillEnabled()&&this._fill(e)},e.prototype._fill=function(e){},e.prototype.strokeShape=function(e){e.hasStroke()&&this._stroke(e)},e.prototype._stroke=function(e){},e.prototype.fillStrokeShape=function(e){this.fillShape(e),this.strokeShape(e)},e.prototype.getTrace=function(e){var t,n,a,r,s=this.traceArr,o=s.length,d="";for(t=0;t<o;t++)(a=(n=s[t]).method)?(r=n.args,d+=a,e?d+="()":i.Util._isArray(r[0])?d+="(["+r.join(",")+"])":d+="("+r.join(",")+")"):(d+=n.property,e||(d+="="+n.val)),d+=";";return d},e.prototype.clearTrace=function(){this.traceArr=[]},e.prototype._trace=function(e){var t=this.traceArr;t.push(e),t.length>=100&&t.shift()},e.prototype.reset=function(){var e=this.getCanvas().getPixelRatio();this.setTransform(1*e,0,0,1*e,0,0)},e.prototype.getCanvas=function(){return this.canvas},e.prototype.clear=function(e){var t=this.getCanvas();e?this.clearRect(e.x||0,e.y||0,e.width||0,e.height||0):this.clearRect(0,0,t.getWidth()/t.pixelRatio,t.getHeight()/t.pixelRatio)},e.prototype._applyLineCap=function(e){var t=e.getLineCap();t&&this.setAttr("lineCap",t)},e.prototype._applyOpacity=function(e){var t=e.getAbsoluteOpacity();1!==t&&this.setAttr("globalAlpha",t)},e.prototype._applyLineJoin=function(e){var t=e.attrs.lineJoin;t&&this.setAttr("lineJoin",t)},e.prototype.setAttr=function(e,t){this._context[e]=t},e.prototype.arc=function(e,t,n,a,r,i){this._context.arc(e,t,n,a,r,i)},e.prototype.arcTo=function(e,t,n,a,r){this._context.arcTo(e,t,n,a,r)},e.prototype.beginPath=function(){this._context.beginPath()},e.prototype.bezierCurveTo=function(e,t,n,a,r,i){this._context.bezierCurveTo(e,t,n,a,r,i)},e.prototype.clearRect=function(e,t,n,a){this._context.clearRect(e,t,n,a)},e.prototype.clip=function(){this._context.clip()},e.prototype.closePath=function(){this._context.closePath()},e.prototype.createImageData=function(e,t){var n=arguments;return 2===n.length?this._context.createImageData(e,t):1===n.length?this._context.createImageData(e):void 0},e.prototype.createLinearGradient=function(e,t,n,a){return this._context.createLinearGradient(e,t,n,a)},e.prototype.createPattern=function(e,t){return this._context.createPattern(e,t)},e.prototype.createRadialGradient=function(e,t,n,a,r,i){return this._context.createRadialGradient(e,t,n,a,r,i)},e.prototype.drawImage=function(e,t,n,a,r,i,s,o,d){var l=arguments,u=this._context;3===l.length?u.drawImage(e,t,n):5===l.length?u.drawImage(e,t,n,a,r):9===l.length&&u.drawImage(e,t,n,a,r,i,s,o,d)},e.prototype.ellipse=function(e,t,n,a,r,i,s,o){this._context.ellipse(e,t,n,a,r,i,s,o)},e.prototype.isPointInPath=function(e,t){return this._context.isPointInPath(e,t)},e.prototype.fill=function(){this._context.fill()},e.prototype.fillRect=function(e,t,n,a){this._context.fillRect(e,t,n,a)},e.prototype.strokeRect=function(e,t,n,a){this._context.strokeRect(e,t,n,a)},e.prototype.fillText=function(e,t,n){this._context.fillText(e,t,n)},e.prototype.measureText=function(e){return this._context.measureText(e)},e.prototype.getImageData=function(e,t,n,a){return this._context.getImageData(e,t,n,a)},e.prototype.lineTo=function(e,t){this._context.lineTo(e,t)},e.prototype.moveTo=function(e,t){this._context.moveTo(e,t)},e.prototype.rect=function(e,t,n,a){this._context.rect(e,t,n,a)},e.prototype.putImageData=function(e,t,n){this._context.putImageData(e,t,n)},e.prototype.quadraticCurveTo=function(e,t,n,a){this._context.quadraticCurveTo(e,t,n,a)},e.prototype.restore=function(){this._context.restore()},e.prototype.rotate=function(e){this._context.rotate(e)},e.prototype.save=function(){this._context.save()},e.prototype.scale=function(e,t){this._context.scale(e,t)},e.prototype.setLineDash=function(e){this._context.setLineDash?this._context.setLineDash(e):"mozDash"in this._context?this._context.mozDash=e:"webkitLineDash"in this._context&&(this._context.webkitLineDash=e)},e.prototype.getLineDash=function(){return this._context.getLineDash()},e.prototype.setTransform=function(e,t,n,a,r,i){this._context.setTransform(e,t,n,a,r,i)},e.prototype.stroke=function(){this._context.stroke()},e.prototype.strokeText=function(e,t,n,a){this._context.strokeText(e,t,n,a)},e.prototype.transform=function(e,t,n,a,r,i){this._context.transform(e,t,n,a,r,i)},e.prototype.translate=function(e,t){this._context.translate(e,t)},e.prototype._enableTrace=function(){var e,t,n=this,a=o.length,r=i.Util._simplifyArray,s=this.setAttr,d=function(e){var a,i=n[e];n[e]=function(){return t=r(Array.prototype.slice.call(arguments,0)),a=i.apply(n,arguments),n._trace({method:e,args:t}),a}};for(e=0;e<a;e++)d(o[e]);n.setAttr=function(){s.apply(n,arguments);var e=arguments[0],t=arguments[1];"shadowOffsetX"!==e&&"shadowOffsetY"!==e&&"shadowBlur"!==e||(t/=this.canvas.getPixelRatio()),n._trace({property:e,val:t})}},e.prototype._applyGlobalCompositeOperation=function(e){var t=e.getGlobalCompositeOperation();"source-over"!==t&&this.setAttr("globalCompositeOperation",t)},e}();t.Context=d,["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(e){Object.defineProperty(d.prototype,e,{get:function(){return this._context[e]},set:function(t){this._context[e]=t}})}));var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._fillColor=function(e){var t=e.fill();this.setAttr("fillStyle",t),e._fillFunc(this)},t.prototype._fillPattern=function(e){var t=e.getFillPatternX(),n=e.getFillPatternY(),a=s.Konva.getAngle(e.getFillPatternRotation()),r=e.getFillPatternOffsetX(),i=e.getFillPatternOffsetY();e.getFillPatternScaleX(),e.getFillPatternScaleY(),(t||n)&&this.translate(t||0,n||0),a&&this.rotate(a),(r||i)&&this.translate(-1*r,-1*i),this.setAttr("fillStyle",e._getFillPattern()),e._fillFunc(this)},t.prototype._fillLinearGradient=function(e){var t=e._getLinearGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))},t.prototype._fillRadialGradient=function(e){var t=e._getRadialGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))},t.prototype._fill=function(e){var t=e.fill(),n=e.getFillPriority();if(t&&"color"===n)this._fillColor(e);else{var a=e.getFillPatternImage();if(a&&"pattern"===n)this._fillPattern(e);else{var r=e.getFillLinearGradientColorStops();if(r&&"linear-gradient"===n)this._fillLinearGradient(e);else{var i=e.getFillRadialGradientColorStops();i&&"radial-gradient"===n?this._fillRadialGradient(e):t?this._fillColor(e):a?this._fillPattern(e):r?this._fillLinearGradient(e):i&&this._fillRadialGradient(e)}}}},t.prototype._strokeLinearGradient=function(e){var t=e.getStrokeLinearGradientStartPoint(),n=e.getStrokeLinearGradientEndPoint(),a=e.getStrokeLinearGradientColorStops(),r=this.createLinearGradient(t.x,t.y,n.x,n.y);if(a){for(var i=0;i<a.length;i+=2)r.addColorStop(a[i],a[i+1]);this.setAttr("strokeStyle",r)}},t.prototype._stroke=function(e){var t=e.dash(),n=e.getStrokeScaleEnabled();if(e.hasStroke()){if(!n){this.save();var a=this.getCanvas().getPixelRatio();this.setTransform(a,0,0,a,0,0)}this._applyLineCap(e),t&&e.dashEnabled()&&(this.setLineDash(t),this.setAttr("lineDashOffset",e.dashOffset())),this.setAttr("lineWidth",e.strokeWidth()),e.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),e.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(e):this.setAttr("strokeStyle",e.stroke()),e._strokeFunc(this),n||this.restore()}},t.prototype._applyShadow=function(e){var t=i.Util,n=t.get(e.getShadowRGBA(),"black"),a=t.get(e.getShadowBlur(),5),r=t.get(e.getShadowOffset(),{x:0,y:0}),s=e.getAbsoluteScale(),o=this.canvas.getPixelRatio(),d=s.x*o,l=s.y*o;this.setAttr("shadowColor",n),this.setAttr("shadowBlur",a*Math.min(Math.abs(d),Math.abs(l))),this.setAttr("shadowOffsetX",r.x*d),this.setAttr("shadowOffsetY",r.y*l)},t}(d);t.SceneContext=l;var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._fill=function(e){this.save(),this.setAttr("fillStyle",e.colorKey),e._fillFuncHit(this),this.restore()},t.prototype.strokeShape=function(e){e.hasHitStroke()&&this._stroke(e)},t.prototype._stroke=function(e){if(e.hasHitStroke()){var t=e.getStrokeScaleEnabled();if(!t){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(e);var a=e.hitStrokeWidth(),r="auto"===a?e.strokeWidth():a;this.setAttr("lineWidth",r),this.setAttr("strokeStyle",e.colorKey),e._strokeFuncHit(this),t||this.restore()}},t}(d);t.HitContext=u},7185:(e,t,n)=>{var a=n(3986).Konva;a._injectGlobal(a),t.default=a,a.default=a,e.exports=t.default},210:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4417),r=n(8588);t.DD={get isDragging(){var e=!1;return t.DD._dragElements.forEach((function(t){"dragging"===t.dragStatus&&(e=!0)})),e},justDragged:!1,get node(){var e;return t.DD._dragElements.forEach((function(t){e=t.node})),e},_dragElements:new Map,_drag:function(e){var n=[];t.DD._dragElements.forEach((function(t,a){var i=t.node,s=i.getStage();s.setPointersPositions(e),void 0===t.pointerId&&(t.pointerId=r.Util._getFirstPointerId(e));var o=s._changedPointerPositions.find((function(e){return e.id===t.pointerId}));if(o){if("dragging"!==t.dragStatus){var d=i.dragDistance();if(Math.max(Math.abs(o.x-t.startPointerPos.x),Math.abs(o.y-t.startPointerPos.y))<d)return;if(i.startDrag({evt:e}),!i.isDragging())return}i._setDragPosition(e,t),n.push(i)}})),n.forEach((function(t){t.fire("dragmove",{type:"dragmove",target:t,evt:e},!0)}))},_endDragBefore:function(e){t.DD._dragElements.forEach((function(n,r){var i=n.node.getStage();if(e&&i.setPointersPositions(e),i._changedPointerPositions.find((function(e){return e.id===n.pointerId}))){"dragging"!==n.dragStatus&&"stopped"!==n.dragStatus||(t.DD.justDragged=!0,a.Konva.listenClickTap=!1,n.dragStatus="stopped");var s=n.node.getLayer()||n.node instanceof a.Konva.Stage&&n.node;s&&s.batchDraw()}}))},_endDragAfter:function(e){t.DD._dragElements.forEach((function(n,a){"stopped"===n.dragStatus&&n.node.fire("dragend",{type:"dragend",target:n.node,evt:e},!0),"dragging"!==n.dragStatus&&t.DD._dragElements.delete(a)}))}},a.Konva.isBrowser&&(window.addEventListener("mouseup",t.DD._endDragBefore,!0),window.addEventListener("touchend",t.DD._endDragBefore,!0),window.addEventListener("mousemove",t.DD._drag),window.addEventListener("touchmove",t.DD._drag),window.addEventListener("mouseup",t.DD._endDragAfter,!1),window.addEventListener("touchend",t.DD._endDragAfter,!1))},1455:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(8588),r=n(3774),i="get",s="set";t.Factory={addGetterSetter:function(e,n,a,r,i){t.Factory.addGetter(e,n,a),t.Factory.addSetter(e,n,r,i),t.Factory.addOverloadedGetterSetter(e,n)},addGetter:function(e,t,n){var r=i+a.Util._capitalize(t);e.prototype[r]=e.prototype[r]||function(){var e=this.attrs[t];return void 0===e?n:e}},addSetter:function(e,n,r,i){var o=s+a.Util._capitalize(n);e.prototype[o]||t.Factory.overWriteSetter(e,n,r,i)},overWriteSetter:function(e,t,n,r){var i=s+a.Util._capitalize(t);e.prototype[i]=function(e){return n&&null!=e&&(e=n.call(this,e,t)),this._setAttr(t,e),r&&r.call(this),this}},addComponentsGetterSetter:function(e,n,o,d,l){var u,c,h=o.length,_=a.Util._capitalize,m=i+_(n),f=s+_(n);e.prototype[m]=function(){var e={};for(u=0;u<h;u++)e[c=o[u]]=this.getAttr(n+_(c));return e};var p=r.getComponentValidator(o);e.prototype[f]=function(e){var t,a=this.attrs[n];for(t in d&&(e=d.call(this,e)),p&&p.call(this,e,n),e)e.hasOwnProperty(t)&&this._setAttr(n+_(t),e[t]);return this._fireChangeEvent(n,a,e),l&&l.call(this),this},t.Factory.addOverloadedGetterSetter(e,n)},addOverloadedGetterSetter:function(e,t){var n=a.Util._capitalize(t),r=s+n,o=i+n;e.prototype[t]=function(){return arguments.length?(this[r](arguments[0]),this):this[o]()}},addDeprecatedGetterSetter:function(e,n,r,s){a.Util.error("Adding deprecated "+n);var o=i+a.Util._capitalize(n),d=n+" property is deprecated and will be removed soon. Look at Konva change log for more information.";e.prototype[o]=function(){a.Util.error(d);var e=this.attrs[n];return void 0===e?r:e},t.Factory.addSetter(e,n,s,(function(){a.Util.error(d)})),t.Factory.addOverloadedGetterSetter(e,n)},backCompat:function(e,t){a.Util.each(t,(function(t,n){var r=e.prototype[n],o=i+a.Util._capitalize(t),d=s+a.Util._capitalize(t);function l(){r.apply(this,arguments),a.Util.error('"'+t+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}e.prototype[t]=l,e.prototype[o]=l,e.prototype[d]=l}))},afterSetFilter:function(){this._filterUpToDate=!1}}},3980:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(4415),o=n(4417),d=function(e){function t(t){var n=e.call(this,t)||this;return n.listening(!1),i.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.'),n}return r(t,e),t}(s.Layer);t.FastLayer=d,d.prototype.nodeType="FastLayer",o._registerNode(d),i.Collection.mapMethods(d)},4417:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Math.PI/180,r=function(e){var t=e.indexOf("msie ");if(t>0)return parseInt(e.substring(t+5,e.indexOf(".",t)),10);if(e.indexOf("trident/")>0){var n=e.indexOf("rv:");return parseInt(e.substring(n+3,e.indexOf(".",n)),10)}var a=e.indexOf("edge/");return a>0&&parseInt(e.substring(a+5,e.indexOf(".",a)),10)};t._parseUA=function(e){var t=e.toLowerCase(),n=/(chrome)[ /]([\w.]+)/.exec(t)||/(webkit)[ /]([\w.]+)/.exec(t)||/(opera)(?:.*version|)[ /]([\w.]+)/.exec(t)||/(msie) ([\w.]+)/.exec(t)||t.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t)||[],a=!!e.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),i=!!e.match(/IEMobile/i);return{browser:n[1]||"",version:n[2]||"0",isIE:r(t),mobile:a,ieMobile:i}},t.glob=void 0!==n.g?n.g:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},t.Konva={_global:t.glob,version:"7.1.7",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(e){}.toString()),dblClickWindow:400,getAngle:function(e){return t.Konva.angleDeg?e*a:e},enableTrace:!1,_pointerEventsEnabled:!1,hitOnDragEnabled:!1,captureTouchEventsEnabled:!1,listenClickTap:!1,inDblClickWindow:!1,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:function(){return t.Konva.DD.isDragging},isDragReady:function(){return!!t.Konva.DD.node},UA:t._parseUA(t.glob.navigator&&t.glob.navigator.userAgent||""),document:t.glob.document,_injectGlobal:function(e){t.glob.Konva=e},_parseUA:t._parseUA},t._NODES_REGISTRY={},t._registerNode=function(e){t._NODES_REGISTRY[e.prototype.getClassName()]=e,t.Konva[e.prototype.getClassName()]=e}},8985:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(8783),o=n(4417),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._validateAdd=function(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&i.Util.throw("You may only add groups and shapes to groups.")},t}(s.Container);t.Group=d,d.prototype.nodeType="Group",o._registerNode(d),i.Collection.mapMethods(d)},4415:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(8783),o=n(7939),d=n(1455),l=n(4842),u=n(3774),c=n(7955),h=n(4417),_=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],m=_.length,f=function(e){function t(t){var n=e.call(this,t)||this;return n.canvas=new l.SceneCanvas,n.hitCanvas=new l.HitCanvas({pixelRatio:1}),n._waitingForDraw=!1,n.on("visibleChange.konva",n._checkVisibility),n._checkVisibility(),n.on("imageSmoothingEnabledChange.konva",n._setSmoothEnabled),n._setSmoothEnabled(),n}return r(t,e),t.prototype.createPNGStream=function(){return this.canvas._canvas.createPNGStream()},t.prototype.getCanvas=function(){return this.canvas},t.prototype.getHitCanvas=function(){return this.hitCanvas},t.prototype.getContext=function(){return this.getCanvas().getContext()},t.prototype.clear=function(e){return this.getContext().clear(e),this.getHitCanvas().getContext().clear(e),this},t.prototype.setZIndex=function(t){e.prototype.setZIndex.call(this,t);var n=this.getStage();return n&&(n.content.removeChild(this.getCanvas()._canvas),t<n.children.length-1?n.content.insertBefore(this.getCanvas()._canvas,n.children[t+1].getCanvas()._canvas):n.content.appendChild(this.getCanvas()._canvas)),this},t.prototype.moveToTop=function(){o.Node.prototype.moveToTop.call(this);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),e.content.appendChild(this.getCanvas()._canvas)),!0},t.prototype.moveUp=function(){if(!o.Node.prototype.moveUp.call(this))return!1;var e=this.getStage();return!!e&&(e.content.removeChild(this.getCanvas()._canvas),this.index<e.children.length-1?e.content.insertBefore(this.getCanvas()._canvas,e.children[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas),!0)},t.prototype.moveDown=function(){if(o.Node.prototype.moveDown.call(this)){var e=this.getStage();if(e){var t=e.children;e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,t[this.index+1].getCanvas()._canvas)}return!0}return!1},t.prototype.moveToBottom=function(){if(o.Node.prototype.moveToBottom.call(this)){var e=this.getStage();if(e){var t=e.children;e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,t[1].getCanvas()._canvas)}return!0}return!1},t.prototype.getLayer=function(){return this},t.prototype.remove=function(){var e=this.getCanvas()._canvas;return o.Node.prototype.remove.call(this),e&&e.parentNode&&i.Util._isInDocument(e)&&e.parentNode.removeChild(e),this},t.prototype.getStage=function(){return this.parent},t.prototype.setSize=function(e){var t=e.width,n=e.height;return this.canvas.setSize(t,n),this.hitCanvas.setSize(t,n),this._setSmoothEnabled(),this},t.prototype._validateAdd=function(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&i.Util.throw("You may only add groups and shapes to a layer.")},t.prototype._toKonvaCanvas=function(e){return(e=e||{}).width=e.width||this.getWidth(),e.height=e.height||this.getHeight(),e.x=void 0!==e.x?e.x:this.x(),e.y=void 0!==e.y?e.y:this.y(),o.Node.prototype._toKonvaCanvas.call(this,e)},t.prototype._checkVisibility=function(){var e=this.visible();this.canvas._canvas.style.display=e?"block":"none"},t.prototype._setSmoothEnabled=function(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()},t.prototype.getWidth=function(){if(this.parent)return this.parent.width()},t.prototype.setWidth=function(){i.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},t.prototype.getHeight=function(){if(this.parent)return this.parent.height()},t.prototype.setHeight=function(){i.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},t.prototype.batchDraw=function(){var e=this;return this._waitingForDraw||(this._waitingForDraw=!0,i.Util.requestAnimFrame((function(){e.draw(),e._waitingForDraw=!1}))),this},t.prototype.getIntersection=function(e,t){if(!this.isListening()||!this.isVisible())return null;for(var n=1,a=!1;;){for(var r=0;r<m;r++){var i=_[r],s=this._getIntersection({x:e.x+i.x*n,y:e.y+i.y*n}),o=s.shape;if(o&&t)return o.findAncestor(t,!0);if(o)return o;if(a=!!s.antialiased,!s.antialiased)break}if(!a)return null;n+=1}},t.prototype._getIntersection=function(e){var t=this.hitCanvas.pixelRatio,n=this.hitCanvas.context.getImageData(Math.round(e.x*t),Math.round(e.y*t),1,1).data,a=n[3];if(255===a){var r=i.Util._rgbToHex(n[0],n[1],n[2]),s=c.shapes["#"+r];return s?{shape:s}:{antialiased:!0}}return a>0?{antialiased:!0}:{}},t.prototype.drawScene=function(e,t){var n=this.getLayer(),a=e||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&a.getContext().clear(),s.Container.prototype.drawScene.call(this,a,t),this._fire("draw",{node:this}),this},t.prototype.drawHit=function(e,t){var n=this.getLayer(),a=e||n&&n.hitCanvas;return n&&n.clearBeforeDraw()&&n.getHitCanvas().getContext().clear(),s.Container.prototype.drawHit.call(this,a,t),this},t.prototype.enableHitGraph=function(){return this.hitGraphEnabled(!0),this},t.prototype.disableHitGraph=function(){return this.hitGraphEnabled(!1),this},t.prototype.setHitGraphEnabled=function(e){i.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(e)},t.prototype.getHitGraphEnabled=function(e){return i.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()},t.prototype.toggleHitCanvas=function(){if(this.parent){var e=this.parent;this.hitCanvas._canvas.parentNode?e.content.removeChild(this.hitCanvas._canvas):e.content.appendChild(this.hitCanvas._canvas)}},t}(s.Container);t.Layer=f,f.prototype.nodeType="Layer",h._registerNode(f),d.Factory.addGetterSetter(f,"imageSmoothingEnabled",!0),d.Factory.addGetterSetter(f,"clearBeforeDraw",!0),d.Factory.addGetterSetter(f,"hitGraphEnabled",!0,u.getBooleanValidator()),i.Collection.mapMethods(f)},7939:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(8588),r=n(1455),i=n(4842),s=n(4417),o=n(210),d=n(3774);t.ids={},t.names={},t._removeId=function(e,n){e&&t.ids[e]===n&&delete t.ids[e]},t._addName=function(e,n){n&&(t.names[n]||(t.names[n]=[]),t.names[n].push(e))},t._removeName=function(e,n){if(e){var a=t.names[e];if(a){for(var r=0;r<a.length;r++)a[r]._id===n&&a.splice(r,1);0===a.length&&delete t.names[e]}}};var l="absoluteOpacity",u="allEventListeners",c="absoluteTransform",h="absoluteScale",_="canvas",m="listening",f="mouseenter",p="mouseleave",y="Shape",g=" ",M="stage",v="transform",L="visible",Y=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(g),b=(["scaleXChange.konva","scaleYChange.konva"].join(g),new a.Collection),k=1,w=function(){function e(e){this._id=k++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this.children=b,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(e),this._shouldFireChangeEvents=!0}return e.prototype.hasChildren=function(){return!1},e.prototype.getChildren=function(){return b},e.prototype._clearCache=function(e){e!==v&&e!==c||!this._cache.get(e)?e?this._cache.delete(e):this._cache.clear():this._cache.get(e).dirty=!0},e.prototype._getCache=function(e,t){var n=this._cache.get(e);return(void 0===n||(e===v||e===c)&&!0===n.dirty)&&(n=t.call(this),this._cache.set(e,n)),n},e.prototype._calculate=function(e,t,n){var a=this;if(!this._attachedDepsListeners.get(e)){var r=t.map((function(e){return e+"Change.konva"})).join(g);this.on(r,(function(){a._clearCache(e)})),this._attachedDepsListeners.set(e,!0)}return this._getCache(e,n)},e.prototype._getCanvasCache=function(){return this._cache.get(_)},e.prototype._clearSelfAndDescendantCache=function(e,t){this._clearCache(e),t&&e===c&&this.fire("_clearTransformCache"),this.isCached()||this.children&&this.children.each((function(t){t._clearSelfAndDescendantCache(e,!0)}))},e.prototype.clearCache=function(){return this._cache.delete(_),this._clearSelfAndDescendantCache(),this},e.prototype.cache=function(e){var t=e||{},n={};void 0!==t.x&&void 0!==t.y&&void 0!==t.width&&void 0!==t.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var r=Math.ceil(t.width||n.width),s=Math.ceil(t.height||n.height),o=t.pixelRatio,d=void 0===t.x?n.x:t.x,u=void 0===t.y?n.y:t.y,c=t.offset||0,m=t.drawBorder||!1;if(r&&s){r+=2*c,s+=2*c,d-=c,u-=c;var f=new i.SceneCanvas({pixelRatio:o,width:r,height:s}),p=new i.SceneCanvas({pixelRatio:o,width:0,height:0}),y=new i.HitCanvas({pixelRatio:1,width:r,height:s}),g=f.getContext(),M=y.getContext();return y.isCache=!0,f.isCache=!0,this._cache.delete("canvas"),this._filterUpToDate=!1,!1===t.imageSmoothingEnabled&&(f.getContext()._context.imageSmoothingEnabled=!1,p.getContext()._context.imageSmoothingEnabled=!1),g.save(),M.save(),g.translate(-d,-u),M.translate(-d,-u),this._isUnderCache=!0,this._clearSelfAndDescendantCache(l),this._clearSelfAndDescendantCache(h),this.drawScene(f,this),this.drawHit(y,this),this._isUnderCache=!1,g.restore(),M.restore(),m&&(g.save(),g.beginPath(),g.rect(0,0,r,s),g.closePath(),g.setAttr("strokeStyle","red"),g.setAttr("lineWidth",5),g.stroke(),g.restore()),this._cache.set(_,{scene:f,filter:p,hit:y,x:d,y:u}),this}a.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},e.prototype.isCached=function(){return this._cache.has("canvas")},e.prototype.getClientRect=function(e){throw new Error('abstract "getClientRect" method call')},e.prototype._transformedRect=function(e,t){var n,a,r,i,s=[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}],o=this.getAbsoluteTransform(t);return s.forEach((function(e){var t=o.point(e);void 0===n&&(n=r=t.x,a=i=t.y),n=Math.min(n,t.x),a=Math.min(a,t.y),r=Math.max(r,t.x),i=Math.max(i,t.y)})),{x:n,y:a,width:r-n,height:i-a}},e.prototype._drawCachedSceneCanvas=function(e){e.save(),e._applyOpacity(this),e._applyGlobalCompositeOperation(this);var t=this._getCanvasCache();e.translate(t.x,t.y);var n=this._getCachedSceneCanvas(),a=n.pixelRatio;e.drawImage(n._canvas,0,0,n.width/a,n.height/a),e.restore()},e.prototype._drawCachedHitCanvas=function(e){var t=this._getCanvasCache(),n=t.hit;e.save(),e.translate(t.x,t.y),e.drawImage(n._canvas,0,0),e.restore()},e.prototype._getCachedSceneCanvas=function(){var e,t,n,r,i=this.filters(),s=this._getCanvasCache(),o=s.scene,d=s.filter,l=d.getContext();if(i){if(!this._filterUpToDate){var u=o.pixelRatio;d.setSize(o.width/o.pixelRatio,o.height/o.pixelRatio);try{for(e=i.length,l.clear(),l.drawImage(o._canvas,0,0,o.getWidth()/u,o.getHeight()/u),t=l.getImageData(0,0,d.getWidth(),d.getHeight()),n=0;n<e;n++)"function"==typeof(r=i[n])?(r.call(this,t),l.putImageData(t,0,0)):a.Util.error("Filter should be type of function, but got "+typeof r+" instead. Please check correct filters")}catch(e){a.Util.error("Unable to apply filter. "+e.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return d}return o},e.prototype.on=function(e,t){if(this._cache&&this._cache.delete(u),3===arguments.length)return this._delegate.apply(this,arguments);var n,a,r,i,s=e.split(g),o=s.length;for(n=0;n<o;n++)r=(a=s[n].split("."))[0],i=a[1]||"",this.eventListeners[r]||(this.eventListeners[r]=[]),this.eventListeners[r].push({name:i,handler:t});return this},e.prototype.off=function(e,t){var n,a,r,i,s,o=(e||"").split(g),d=o.length;if(this._cache&&this._cache.delete(u),!e)for(a in this.eventListeners)this._off(a);for(n=0;n<d;n++)if(i=(r=o[n].split("."))[0],s=r[1],i)this.eventListeners[i]&&this._off(i,s,t);else for(a in this.eventListeners)this._off(a,s,t);return this},e.prototype.dispatchEvent=function(e){var t={target:this,type:e.type,evt:e};return this.fire(e.type,t),this},e.prototype.addEventListener=function(e,t){return this.on(e,(function(e){t.call(this,e.evt)})),this},e.prototype.removeEventListener=function(e){return this.off(e),this},e.prototype._delegate=function(e,t,n){var r=this;this.on(e,(function(e){for(var i=e.target.findAncestors(t,!0,r),s=0;s<i.length;s++)(e=a.Util.cloneObject(e)).currentTarget=i[s],n.call(i[s],e)}))},e.prototype.remove=function(){return this.isDragging()&&this.stopDrag(),o.DD._dragElements.delete(this._id),this._remove(),this},e.prototype._clearCaches=function(){this._clearSelfAndDescendantCache(c),this._clearSelfAndDescendantCache(l),this._clearSelfAndDescendantCache(h),this._clearSelfAndDescendantCache(M),this._clearSelfAndDescendantCache(L),this._clearSelfAndDescendantCache(m)},e.prototype._remove=function(){this._clearCaches();var e=this.getParent();e&&e.children&&(e.children.splice(this.index,1),e._setChildrenIndices(),this.parent=null)},e.prototype.destroy=function(){t._removeId(this.id(),this);for(var e=(this.name()||"").split(/\s/g),n=0;n<e.length;n++){var a=e[n];t._removeName(a,this._id)}return this.remove(),this},e.prototype.getAttr=function(e){var t="get"+a.Util._capitalize(e);return a.Util._isFunction(this[t])?this[t]():this.attrs[e]},e.prototype.getAncestors=function(){for(var e=this.getParent(),t=new a.Collection;e;)t.push(e),e=e.getParent();return t},e.prototype.getAttrs=function(){return this.attrs||{}},e.prototype.setAttrs=function(e){var t=this;return this._batchTransformChanges((function(){var n,r;if(!e)return t;for(n in e)"children"!==n&&(r="set"+a.Util._capitalize(n),a.Util._isFunction(t[r])?t[r](e[n]):t._setAttr(n,e[n]))})),this},e.prototype.isListening=function(){return this._getCache(m,this._isListening)},e.prototype._isListening=function(e){if(!this.listening())return!1;var t=this.getParent();return!t||t===e||this===e||t._isListening(e)},e.prototype.isVisible=function(){return this._getCache(L,this._isVisible)},e.prototype._isVisible=function(e){if(!this.visible())return!1;var t=this.getParent();return!t||t===e||this===e||t._isVisible(e)},e.prototype.shouldDrawHit=function(e){if(e)return this._isVisible(e)&&this._isListening(e);var t=this.getLayer(),n=!1;o.DD._dragElements.forEach((function(e){"dragging"===e.dragStatus&&("Stage"===e.node.nodeType||e.node.getLayer()===t)&&(n=!0)}));var a=!s.Konva.hitOnDragEnabled&&n;return this.isListening()&&this.isVisible()&&!a},e.prototype.show=function(){return this.visible(!0),this},e.prototype.hide=function(){return this.visible(!1),this},e.prototype.getZIndex=function(){return this.index||0},e.prototype.getAbsoluteZIndex=function(){var e,t,n,a,r=this.getDepth(),i=this,s=0;return"Stage"!==i.nodeType&&function o(d){for(e=[],t=d.length,n=0;n<t;n++)a=d[n],s++,a.nodeType!==y&&(e=e.concat(a.getChildren().toArray())),a._id===i._id&&(n=t);e.length>0&&e[0].getDepth()<=r&&o(e)}(i.getStage().getChildren()),s},e.prototype.getDepth=function(){for(var e=0,t=this.parent;t;)e++,t=t.parent;return e},e.prototype._batchTransformChanges=function(e){this._batchingTransformChange=!0,e(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache(v),this._clearSelfAndDescendantCache(c,!0)),this._needClearTransformCache=!1},e.prototype.setPosition=function(e){var t=this;return this._batchTransformChanges((function(){t.x(e.x),t.y(e.y)})),this},e.prototype.getPosition=function(){return{x:this.x(),y:this.y()}},e.prototype.getAbsolutePosition=function(e){for(var t=!1,n=this.parent;n;){if(n.isCached()){t=!0;break}n=n.parent}t&&!e&&(e=!0);var r=this.getAbsoluteTransform(e).getMatrix(),i=new a.Transform,s=this.offset();return i.m=r.slice(),i.translate(s.x,s.y),i.getTranslation()},e.prototype.setAbsolutePosition=function(e){var t=this._clearTransform();this.attrs.x=t.x,this.attrs.y=t.y,delete t.x,delete t.y,this._clearCache(v);var n=this._getAbsoluteTransform().copy();return n.invert(),n.translate(e.x,e.y),e={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this._setTransform(t),this.setPosition({x:e.x,y:e.y}),this._clearCache(v),this._clearSelfAndDescendantCache(c),this},e.prototype._setTransform=function(e){var t;for(t in e)this.attrs[t]=e[t]},e.prototype._clearTransform=function(){var e={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,e},e.prototype.move=function(e){var t=e.x,n=e.y,a=this.x(),r=this.y();return void 0!==t&&(a+=t),void 0!==n&&(r+=n),this.setPosition({x:a,y:r}),this},e.prototype._eachAncestorReverse=function(e,t){var n,a,r=[],i=this.getParent();if(!t||t._id!==this._id){for(r.unshift(this);i&&(!t||i._id!==t._id);)r.unshift(i),i=i.parent;for(n=r.length,a=0;a<n;a++)e(r[a])}},e.prototype.rotate=function(e){return this.rotation(this.rotation()+e),this},e.prototype.moveToTop=function(){if(!this.parent)return a.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var e=this.index;return this.parent.children.splice(e,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},e.prototype.moveUp=function(){if(!this.parent)return a.Util.warn("Node has no parent. moveUp function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.splice(e+1,0,this),this.parent._setChildrenIndices(),!0)},e.prototype.moveDown=function(){if(!this.parent)return a.Util.warn("Node has no parent. moveDown function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.splice(e-1,0,this),this.parent._setChildrenIndices(),!0)},e.prototype.moveToBottom=function(){if(!this.parent)return a.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},e.prototype.setZIndex=function(e){if(!this.parent)return a.Util.warn("Node has no parent. zIndex parameter is ignored."),this;(e<0||e>=this.parent.children.length)&&a.Util.warn("Unexpected value "+e+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var t=this.index;return this.parent.children.splice(t,1),this.parent.children.splice(e,0,this),this.parent._setChildrenIndices(),this},e.prototype.getAbsoluteOpacity=function(){return this._getCache(l,this._getAbsoluteOpacity)},e.prototype._getAbsoluteOpacity=function(){var e=this.opacity(),t=this.getParent();return t&&!t._isUnderCache&&(e*=t.getAbsoluteOpacity()),e},e.prototype.moveTo=function(e){return this.getParent()!==e&&(this._remove(),e.add(this)),this},e.prototype.toObject=function(){var e,t,n,r,i={},s=this.getAttrs();for(e in i.attrs={},s)t=s[e],a.Util.isObject(t)&&!a.Util._isPlainObject(t)&&!a.Util._isArray(t)||(n="function"==typeof this[e]&&this[e],delete s[e],r=n?n.call(this):null,s[e]=t,r!==t&&(i.attrs[e]=t));return i.className=this.getClassName(),a.Util._prepareToStringify(i)},e.prototype.toJSON=function(){return JSON.stringify(this.toObject())},e.prototype.getParent=function(){return this.parent},e.prototype.findAncestors=function(e,t,n){var a=[];t&&this._isMatch(e)&&a.push(this);for(var r=this.parent;r;){if(r===n)return a;r._isMatch(e)&&a.push(r),r=r.parent}return a},e.prototype.isAncestorOf=function(e){return!1},e.prototype.findAncestor=function(e,t,n){return this.findAncestors(e,t,n)[0]},e.prototype._isMatch=function(e){if(!e)return!1;if("function"==typeof e)return e(this);var t,n,r=e.replace(/ /g,"").split(","),i=r.length;for(t=0;t<i;t++)if(n=r[t],a.Util.isValidSelector(n)||(a.Util.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),a.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),a.Util.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(this.className===n||this.nodeType===n)return!0;return!1},e.prototype.getLayer=function(){var e=this.getParent();return e?e.getLayer():null},e.prototype.getStage=function(){return this._getCache(M,this._getStage)},e.prototype._getStage=function(){var e=this.getParent();return e?e.getStage():void 0},e.prototype.fire=function(e,t,n){return void 0===t&&(t={}),t.target=t.target||this,n?this._fireAndBubble(e,t):this._fire(e,t),this},e.prototype.getAbsoluteTransform=function(e){return e?this._getAbsoluteTransform(e):this._getCache(c,this._getAbsoluteTransform)},e.prototype._getAbsoluteTransform=function(e){var t;if(e)return t=new a.Transform,this._eachAncestorReverse((function(e){var n=e.transformsEnabled();"all"===n?t.multiply(e.getTransform()):"position"===n&&t.translate(e.x()-e.offsetX(),e.y()-e.offsetY())}),e),t;t=this._cache.get(c)||new a.Transform,this.parent?this.parent.getAbsoluteTransform().copyInto(t):t.reset();var n=this.transformsEnabled();if("all"===n)t.multiply(this.getTransform());else if("position"===n){var r=this.attrs.x||0,i=this.attrs.y||0,s=this.attrs.offsetX||0,o=this.attrs.offsetY||0;t.translate(r-s,i-o)}return t.dirty=!1,t},e.prototype.getAbsoluteScale=function(e){for(var t=this;t;)t._isUnderCache&&(e=t),t=t.getParent();var n=this.getAbsoluteTransform(e).decompose();return{x:n.scaleX,y:n.scaleY}},e.prototype.getAbsoluteRotation=function(){return this.getAbsoluteTransform().decompose().rotation},e.prototype.getTransform=function(){return this._getCache(v,this._getTransform)},e.prototype._getTransform=function(){var e,t,n=this._cache.get(v)||new a.Transform;n.reset();var r=this.x(),i=this.y(),o=s.Konva.getAngle(this.rotation()),d=null!==(e=this.attrs.scaleX)&&void 0!==e?e:1,l=null!==(t=this.attrs.scaleY)&&void 0!==t?t:1,u=this.attrs.skewX||0,c=this.attrs.skewY||0,h=this.attrs.offsetX||0,_=this.attrs.offsetY||0;return 0===r&&0===i||n.translate(r,i),0!==o&&n.rotate(o),0===u&&0===c||n.skew(u,c),1===d&&1===l||n.scale(d,l),0===h&&0===_||n.translate(-1*h,-1*_),n.dirty=!1,n},e.prototype.clone=function(e){var t,n,r,i,s,o=a.Util.cloneObject(this.attrs);for(t in e)o[t]=e[t];var d=new this.constructor(o);for(t in this.eventListeners)for(r=(n=this.eventListeners[t]).length,i=0;i<r;i++)(s=n[i]).name.indexOf("konva")<0&&(d.eventListeners[t]||(d.eventListeners[t]=[]),d.eventListeners[t].push(s));return d},e.prototype._toKonvaCanvas=function(e){e=e||{};var t=this.getClientRect(),n=this.getStage(),a=void 0!==e.x?e.x:t.x,r=void 0!==e.y?e.y:t.y,s=e.pixelRatio||1,o=new i.SceneCanvas({width:e.width||t.width||(n?n.width():0),height:e.height||t.height||(n?n.height():0),pixelRatio:s}),d=o.getContext();return d.save(),(a||r)&&d.translate(-1*a,-1*r),this.drawScene(o),d.restore(),o},e.prototype.toCanvas=function(e){return this._toKonvaCanvas(e)._canvas},e.prototype.toDataURL=function(e){var t=(e=e||{}).mimeType||null,n=e.quality||null,a=this._toKonvaCanvas(e).toDataURL(t,n);return e.callback&&e.callback(a),a},e.prototype.toImage=function(e){if(!e||!e.callback)throw"callback required for toImage method config argument";var t=e.callback;delete e.callback,a.Util._urlToImage(this.toDataURL(e),(function(e){t(e)}))},e.prototype.setSize=function(e){return this.width(e.width),this.height(e.height),this},e.prototype.getSize=function(){return{width:this.width(),height:this.height()}},e.prototype.getClassName=function(){return this.className||this.nodeType},e.prototype.getType=function(){return this.nodeType},e.prototype.getDragDistance=function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():s.Konva.dragDistance},e.prototype._off=function(e,t,n){var a,r,i,s=this.eventListeners[e];for(a=0;a<s.length;a++)if(r=s[a].name,i=s[a].handler,!("konva"===r&&"konva"!==t||t&&r!==t||n&&n!==i)){if(s.splice(a,1),0===s.length){delete this.eventListeners[e];break}a--}},e.prototype._fireChangeEvent=function(e,t,n){this._fire(e+"Change",{oldVal:t,newVal:n})},e.prototype.setId=function(e){var n=this.id();return t._removeId(n,this),function(e,n){n&&(t.ids[n]=e)}(this,e),this._setAttr("id",e),this},e.prototype.setName=function(e){var n,a,r=(this.name()||"").split(/\s/g),i=(e||"").split(/\s/g);for(a=0;a<r.length;a++)n=r[a],-1===i.indexOf(n)&&n&&t._removeName(n,this._id);for(a=0;a<i.length;a++)n=i[a],-1===r.indexOf(n)&&n&&t._addName(this,n);return this._setAttr("name",e),this},e.prototype.addName=function(e){if(!this.hasName(e)){var t=this.name(),n=t?t+" "+e:e;this.setName(n)}return this},e.prototype.hasName=function(e){if(!e)return!1;var t=this.name();return!!t&&-1!==(t||"").split(/\s/g).indexOf(e)},e.prototype.removeName=function(e){var t=(this.name()||"").split(/\s/g),n=t.indexOf(e);return-1!==n&&(t.splice(n,1),this.setName(t.join(" "))),this},e.prototype.setAttr=function(e,t){var n=this["set"+a.Util._capitalize(e)];return a.Util._isFunction(n)?n.call(this,t):this._setAttr(e,t),this},e.prototype._setAttr=function(e,t,n){void 0===n&&(n=!1);var r=this.attrs[e];(r!==t||a.Util.isObject(t))&&(null==t?delete this.attrs[e]:this.attrs[e]=t,this._shouldFireChangeEvents&&this._fireChangeEvent(e,r,t))},e.prototype._setComponentAttr=function(e,t,n){var a;void 0!==n&&((a=this.attrs[e])||(this.attrs[e]=this.getAttr(e)),this.attrs[e][t]=n,this._fireChangeEvent(e,a,n))},e.prototype._fireAndBubble=function(e,t,n){if(t&&this.nodeType===y&&(t.target=this),e!==f&&e!==p||!(n&&(this===n||this.isAncestorOf&&this.isAncestorOf(n))||"Stage"===this.nodeType&&!n)){this._fire(e,t);var a=(e===f||e===p)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(t&&!t.cancelBubble||!t)&&this.parent&&this.parent.isListening()&&!a&&(n&&n.parent?this._fireAndBubble.call(this.parent,e,t,n):this._fireAndBubble.call(this.parent,e,t))}},e.prototype._getProtoListeners=function(e){var t=this._cache.get(u);if(!t){t={};for(var n=Object.getPrototypeOf(this);n;)if(n.eventListeners){for(var a in n.eventListeners){var r=n.eventListeners[a],i=t[a]||[];t[a]=r.concat(i)}n=Object.getPrototypeOf(n)}else n=Object.getPrototypeOf(n);this._cache.set(u,t)}return t[e]},e.prototype._fire=function(e,t){(t=t||{}).currentTarget=this,t.type=e;var n=this._getProtoListeners(e);if(n)for(var a=0;a<n.length;a++)n[a].handler.call(this,t);var r=this.eventListeners[e];if(r)for(a=0;a<r.length;a++)r[a].handler.call(this,t)},e.prototype.draw=function(){return this.drawScene(),this.drawHit(),this},e.prototype._createDragElement=function(e){var t=e?e.pointerId:void 0,n=this.getStage(),a=this.getAbsolutePosition(),r=n._getPointerById(t)||n._changedPointerPositions[0]||a;o.DD._dragElements.set(this._id,{node:this,startPointerPos:r,offset:{x:r.x-a.x,y:r.y-a.y},dragStatus:"ready",pointerId:t})},e.prototype.startDrag=function(e,t){void 0===t&&(t=!0),o.DD._dragElements.has(this._id)||this._createDragElement(e),o.DD._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:e&&e.evt},t)},e.prototype._setDragPosition=function(e,t){var n=this.getStage()._getPointerById(t.pointerId);if(n){var r={x:n.x-t.offset.x,y:n.y-t.offset.y},i=this.dragBoundFunc();if(void 0!==i){var s=i.call(this,r,e);s?r=s:a.Util.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===r.x&&this._lastPos.y===r.y||(this.setAbsolutePosition(r),this.getLayer()?this.getLayer().batchDraw():this.getStage()&&this.getStage().batchDraw()),this._lastPos=r}},e.prototype.stopDrag=function(e){var t=o.DD._dragElements.get(this._id);t&&(t.dragStatus="stopped"),o.DD._endDragBefore(e),o.DD._endDragAfter(e)},e.prototype.setDraggable=function(e){this._setAttr("draggable",e),this._dragChange()},e.prototype.isDragging=function(){var e=o.DD._dragElements.get(this._id);return!!e&&"dragging"===e.dragStatus},e.prototype._listenDrag=function(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(e){var t=this;if((void 0===e.evt.button||s.Konva.dragButtons.indexOf(e.evt.button)>=0)&&!this.isDragging()){var n=!1;o.DD._dragElements.forEach((function(e){t.isAncestorOf(e.node)&&(n=!0)})),n||this._createDragElement(e)}}))},e.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;var e=o.DD._dragElements.get(this._id),t=e&&"dragging"===e.dragStatus,n=e&&"ready"===e.dragStatus;t?this.stopDrag():n&&o.DD._dragElements.delete(this._id)}},e.prototype._dragCleanup=function(){this.off("mousedown.konva"),this.off("touchstart.konva")},e.create=function(e,t){return a.Util._isString(e)&&(e=JSON.parse(e)),this._createNode(e,t)},e._createNode=function(t,n){var r,i,o,d=e.prototype.getClassName.call(t),l=t.children;if(n&&(t.attrs.container=n),s._NODES_REGISTRY[d]||(a.Util.warn('Can not find a node with class name "'+d+'". Fallback to "Shape".'),d="Shape"),r=new(0,s._NODES_REGISTRY[d])(t.attrs),l)for(i=l.length,o=0;o<i;o++)r.add(e._createNode(l[o]));return r},e}();t.Node=w,w.prototype.nodeType="Node",w.prototype._attrsAffectingSize=[],w.prototype.eventListeners={},w.prototype.on.call(w.prototype,Y,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache(v),this._clearSelfAndDescendantCache(c))})),w.prototype.on.call(w.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(L)})),w.prototype.on.call(w.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(m)})),w.prototype.on.call(w.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(l)}));var D=r.Factory.addGetterSetter;D(w,"zIndex"),D(w,"absolutePosition"),D(w,"position"),D(w,"x",0,d.getNumberValidator()),D(w,"y",0,d.getNumberValidator()),D(w,"globalCompositeOperation","source-over",d.getStringValidator()),D(w,"opacity",1,d.getNumberValidator()),D(w,"name","",d.getStringValidator()),D(w,"id","",d.getStringValidator()),D(w,"rotation",0,d.getNumberValidator()),r.Factory.addComponentsGetterSetter(w,"scale",["x","y"]),D(w,"scaleX",1,d.getNumberValidator()),D(w,"scaleY",1,d.getNumberValidator()),r.Factory.addComponentsGetterSetter(w,"skew",["x","y"]),D(w,"skewX",0,d.getNumberValidator()),D(w,"skewY",0,d.getNumberValidator()),r.Factory.addComponentsGetterSetter(w,"offset",["x","y"]),D(w,"offsetX",0,d.getNumberValidator()),D(w,"offsetY",0,d.getNumberValidator()),D(w,"dragDistance",null,d.getNumberValidator()),D(w,"width",0,d.getNumberValidator()),D(w,"height",0,d.getNumberValidator()),D(w,"listening",!0,d.getBooleanValidator()),D(w,"preventDefault",!0,d.getBooleanValidator()),D(w,"filters",null,(function(e){return this._filterUpToDate=!1,e})),D(w,"visible",!0,d.getBooleanValidator()),D(w,"transformsEnabled","all",d.getStringValidator()),D(w,"size"),D(w,"dragBoundFunc"),D(w,"draggable",!1,d.getBooleanValidator()),r.Factory.backCompat(w,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),a.Collection.mapMethods(w)},8479:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4417),r=new Map,i=void 0!==a.Konva._global.PointerEvent;function s(e){return{evt:e,pointerId:e.pointerId}}function o(e,t){var n=r.get(e);if(n){var a=n.getStage();a&&a.content,r.delete(e),i&&n._fire("lostpointercapture",s(new PointerEvent("lostpointercapture")))}}t.getCapturedShape=function(e){return r.get(e)},t.createEvent=s,t.hasPointerCapture=function(e,t){return r.get(e)===t},t.setPointerCapture=function(e,t){o(e),t.getStage()&&(r.set(e,t),i&&t._fire("gotpointercapture",s(new PointerEvent("gotpointercapture"))))},t.releaseCapture=o},7955:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i,s=n(8588),o=n(1455),d=n(7939),l=n(3774),u=n(4417),c=n(8479),h="hasShadow",_="shadowRGBA",m="patternImage",f="linearGradient",p="radialGradient";function y(){return i||(i=s.Util.createCanvasElement().getContext("2d"))}t.shapes={};var g=function(e){function n(n){for(var a,r=e.call(this,n)||this;!(a=s.Util.getRandomColor())||a in t.shapes;);return r.colorKey=a,t.shapes[a]=r,r}return r(n,e),n.prototype.getContext=function(){return this.getLayer().getContext()},n.prototype.getCanvas=function(){return this.getLayer().getCanvas()},n.prototype.getSceneFunc=function(){return this.attrs.sceneFunc||this._sceneFunc},n.prototype.getHitFunc=function(){return this.attrs.hitFunc||this._hitFunc},n.prototype.hasShadow=function(){return this._getCache(h,this._hasShadow)},n.prototype._hasShadow=function(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())},n.prototype._getFillPattern=function(){return this._getCache(m,this.__getFillPattern)},n.prototype.__getFillPattern=function(){if(this.fillPatternImage()){var e=y().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");return e&&e.setTransform&&e.setTransform({a:this.fillPatternScaleX(),b:0,c:0,d:this.fillPatternScaleY(),e:0,f:0}),e}},n.prototype._getLinearGradient=function(){return this._getCache(f,this.__getLinearGradient)},n.prototype.__getLinearGradient=function(){var e=this.fillLinearGradientColorStops();if(e){for(var t=y(),n=this.fillLinearGradientStartPoint(),a=this.fillLinearGradientEndPoint(),r=t.createLinearGradient(n.x,n.y,a.x,a.y),i=0;i<e.length;i+=2)r.addColorStop(e[i],e[i+1]);return r}},n.prototype._getRadialGradient=function(){return this._getCache(p,this.__getRadialGradient)},n.prototype.__getRadialGradient=function(){var e=this.fillRadialGradientColorStops();if(e){for(var t=y(),n=this.fillRadialGradientStartPoint(),a=this.fillRadialGradientEndPoint(),r=t.createRadialGradient(n.x,n.y,this.fillRadialGradientStartRadius(),a.x,a.y,this.fillRadialGradientEndRadius()),i=0;i<e.length;i+=2)r.addColorStop(e[i],e[i+1]);return r}},n.prototype.getShadowRGBA=function(){return this._getCache(_,this._getShadowRGBA)},n.prototype._getShadowRGBA=function(){if(this.hasShadow()){var e=s.Util.colorToRGBA(this.shadowColor());return"rgba("+e.r+","+e.g+","+e.b+","+e.a*(this.shadowOpacity()||1)+")"}},n.prototype.hasFill=function(){var e=this;return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(function(){return e.fillEnabled()&&!!(e.fill()||e.fillPatternImage()||e.fillLinearGradientColorStops()||e.fillRadialGradientColorStops())}))},n.prototype.hasStroke=function(){var e=this;return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(function(){return e.strokeEnabled()&&e.strokeWidth()&&!(!e.stroke()&&!e.strokeLinearGradientColorStops())}))},n.prototype.hasHitStroke=function(){var e=this.hitStrokeWidth();return"auto"===e?this.hasStroke():this.strokeEnabled()&&!!e},n.prototype.intersects=function(e){var t=this.getStage().bufferHitCanvas;return t.getContext().clear(),this.drawHit(t),t.context.getImageData(Math.round(e.x),Math.round(e.y),1,1).data[3]>0},n.prototype.destroy=function(){return d.Node.prototype.destroy.call(this),delete t.shapes[this.colorKey],delete this.colorKey,this},n.prototype._useBufferCanvas=function(e){var t;if(!this.getStage())return!1;if(null!==(t=this.attrs.perfectDrawEnabled)&&void 0!==t&&!t)return!1;var n=e||this.hasFill(),a=this.hasStroke(),r=1!==this.getAbsoluteOpacity();if(n&&a&&r)return!0;var i=this.hasShadow(),s=this.shadowForStrokeEnabled();return!!(n&&a&&i&&s)},n.prototype.setStrokeHitEnabled=function(e){s.Util.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),e?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)},n.prototype.getStrokeHitEnabled=function(){return 0!==this.hitStrokeWidth()},n.prototype.getSelfRect=function(){var e=this.size();return{x:this._centroid?-e.width/2:0,y:this._centroid?-e.height/2:0,width:e.width,height:e.height}},n.prototype.getClientRect=function(e){void 0===e&&(e={});var t=e.skipTransform,n=e.relativeTo,a=this.getSelfRect(),r=!e.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,i=a.width+r,s=a.height+r,o=!e.skipShadow&&this.hasShadow(),d=o?this.shadowOffsetX():0,l=o?this.shadowOffsetY():0,u=i+Math.abs(d),c=s+Math.abs(l),h=o&&this.shadowBlur()||0,_=u+2*h,m=c+2*h,f=0;Math.round(r/2)!==r/2&&(f=1);var p={width:_+f,height:m+f,x:-Math.round(r/2+h)+Math.min(d,0)+a.x,y:-Math.round(r/2+h)+Math.min(l,0)+a.y};return t?p:this._transformedRect(p,n)},n.prototype.drawScene=function(e,t){var n,a,r=this.getLayer(),i=e||r.getCanvas(),s=i.getContext(),o=this._getCanvasCache(),d=this.getSceneFunc(),l=this.hasShadow(),u=i.isCache,c=i.isCache,h=t===this;if(!this.isVisible()&&!u)return this;if(o){s.save();var _=this.getAbsoluteTransform(t).getMatrix();return s.transform(_[0],_[1],_[2],_[3],_[4],_[5]),this._drawCachedSceneCanvas(s),s.restore(),this}if(!d)return this;if(s.save(),this._useBufferCanvas()&&!c){(a=(n=this.getStage().bufferCanvas).getContext()).clear(),a.save(),a._applyLineJoin(this);var m=this.getAbsoluteTransform(t).getMatrix();a.transform(m[0],m[1],m[2],m[3],m[4],m[5]),d.call(this,a,this),a.restore();var f=n.pixelRatio;l&&s._applyShadow(this),s._applyOpacity(this),s._applyGlobalCompositeOperation(this),s.drawImage(n._canvas,0,0,n.width/f,n.height/f)}else s._applyLineJoin(this),h||(m=this.getAbsoluteTransform(t).getMatrix(),s.transform(m[0],m[1],m[2],m[3],m[4],m[5]),s._applyOpacity(this),s._applyGlobalCompositeOperation(this)),l&&s._applyShadow(this),d.call(this,s,this);return s.restore(),this},n.prototype.drawHit=function(e,t){if(!this.shouldDrawHit(t))return this;var n=this.getLayer(),a=e||n.hitCanvas,r=a&&a.getContext(),i=this.hitFunc()||this.sceneFunc(),o=this._getCanvasCache(),d=o&&o.hit;if(this.colorKey||(console.log(this),s.Util.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()")),d){r.save();var l=this.getAbsoluteTransform(t).getMatrix();return r.transform(l[0],l[1],l[2],l[3],l[4],l[5]),this._drawCachedHitCanvas(r),r.restore(),this}if(!i)return this;if(r.save(),r._applyLineJoin(this),this!==t){var u=this.getAbsoluteTransform(t).getMatrix();r.transform(u[0],u[1],u[2],u[3],u[4],u[5])}return i.call(this,r,this),r.restore(),this},n.prototype.drawHitFromCache=function(e){void 0===e&&(e=0);var t,n,a,r,i,o=this._getCanvasCache(),d=this._getCachedSceneCanvas(),l=o.hit,u=l.getContext(),c=l.getWidth(),h=l.getHeight();u.clear(),u.drawImage(d._canvas,0,0,c,h);try{for(a=(n=(t=u.getImageData(0,0,c,h)).data).length,r=s.Util._hexToRgb(this.colorKey),i=0;i<a;i+=4)n[i+3]>e?(n[i]=r.r,n[i+1]=r.g,n[i+2]=r.b,n[i+3]=255):n[i+3]=0;u.putImageData(t,0,0)}catch(e){s.Util.error("Unable to draw hit graph from cached scene canvas. "+e.message)}return this},n.prototype.hasPointerCapture=function(e){return c.hasPointerCapture(e,this)},n.prototype.setPointerCapture=function(e){c.setPointerCapture(e,this)},n.prototype.releaseCapture=function(e){c.releaseCapture(e,this)},n}(d.Node);t.Shape=g,g.prototype._fillFunc=function(e){e.fill()},g.prototype._strokeFunc=function(e){e.stroke()},g.prototype._fillFuncHit=function(e){e.fill()},g.prototype._strokeFuncHit=function(e){e.stroke()},g.prototype._centroid=!1,g.prototype.nodeType="Shape",u._registerNode(g),g.prototype.eventListeners={},g.prototype.on.call(g.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(h)})),g.prototype.on.call(g.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(_)})),g.prototype.on.call(g.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva",(function(){this._clearCache(m)})),g.prototype.on.call(g.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(f)})),g.prototype.on.call(g.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(p)})),o.Factory.addGetterSetter(g,"stroke",void 0,l.getStringOrGradientValidator()),o.Factory.addGetterSetter(g,"strokeWidth",2,l.getNumberValidator()),o.Factory.addGetterSetter(g,"hitStrokeWidth","auto",l.getNumberOrAutoValidator()),o.Factory.addGetterSetter(g,"strokeHitEnabled",!0,l.getBooleanValidator()),o.Factory.addGetterSetter(g,"perfectDrawEnabled",!0,l.getBooleanValidator()),o.Factory.addGetterSetter(g,"shadowForStrokeEnabled",!0,l.getBooleanValidator()),o.Factory.addGetterSetter(g,"lineJoin"),o.Factory.addGetterSetter(g,"lineCap"),o.Factory.addGetterSetter(g,"sceneFunc"),o.Factory.addGetterSetter(g,"hitFunc"),o.Factory.addGetterSetter(g,"dash"),o.Factory.addGetterSetter(g,"dashOffset",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"shadowColor",void 0,l.getStringValidator()),o.Factory.addGetterSetter(g,"shadowBlur",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"shadowOpacity",1,l.getNumberValidator()),o.Factory.addComponentsGetterSetter(g,"shadowOffset",["x","y"]),o.Factory.addGetterSetter(g,"shadowOffsetX",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"shadowOffsetY",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternImage"),o.Factory.addGetterSetter(g,"fill",void 0,l.getStringOrGradientValidator()),o.Factory.addGetterSetter(g,"fillPatternX",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternY",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"fillLinearGradientColorStops"),o.Factory.addGetterSetter(g,"strokeLinearGradientColorStops"),o.Factory.addGetterSetter(g,"fillRadialGradientStartRadius",0),o.Factory.addGetterSetter(g,"fillRadialGradientEndRadius",0),o.Factory.addGetterSetter(g,"fillRadialGradientColorStops"),o.Factory.addGetterSetter(g,"fillPatternRepeat","repeat"),o.Factory.addGetterSetter(g,"fillEnabled",!0),o.Factory.addGetterSetter(g,"strokeEnabled",!0),o.Factory.addGetterSetter(g,"shadowEnabled",!0),o.Factory.addGetterSetter(g,"dashEnabled",!0),o.Factory.addGetterSetter(g,"strokeScaleEnabled",!0),o.Factory.addGetterSetter(g,"fillPriority","color"),o.Factory.addComponentsGetterSetter(g,"fillPatternOffset",["x","y"]),o.Factory.addGetterSetter(g,"fillPatternOffsetX",0,l.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternOffsetY",0,l.getNumberValidator()),o.Factory.addComponentsGetterSetter(g,"fillPatternScale",["x","y"]),o.Factory.addGetterSetter(g,"fillPatternScaleX",1,l.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternScaleY",1,l.getNumberValidator()),o.Factory.addComponentsGetterSetter(g,"fillLinearGradientStartPoint",["x","y"]),o.Factory.addComponentsGetterSetter(g,"strokeLinearGradientStartPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillLinearGradientStartPointX",0),o.Factory.addGetterSetter(g,"strokeLinearGradientStartPointX",0),o.Factory.addGetterSetter(g,"fillLinearGradientStartPointY",0),o.Factory.addGetterSetter(g,"strokeLinearGradientStartPointY",0),o.Factory.addComponentsGetterSetter(g,"fillLinearGradientEndPoint",["x","y"]),o.Factory.addComponentsGetterSetter(g,"strokeLinearGradientEndPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillLinearGradientEndPointX",0),o.Factory.addGetterSetter(g,"strokeLinearGradientEndPointX",0),o.Factory.addGetterSetter(g,"fillLinearGradientEndPointY",0),o.Factory.addGetterSetter(g,"strokeLinearGradientEndPointY",0),o.Factory.addComponentsGetterSetter(g,"fillRadialGradientStartPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillRadialGradientStartPointX",0),o.Factory.addGetterSetter(g,"fillRadialGradientStartPointY",0),o.Factory.addComponentsGetterSetter(g,"fillRadialGradientEndPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillRadialGradientEndPointX",0),o.Factory.addGetterSetter(g,"fillRadialGradientEndPointY",0),o.Factory.addGetterSetter(g,"fillPatternRotation",0),o.Factory.backCompat(g,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),s.Collection.mapMethods(g)},8342:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(8783),d=n(4417),l=n(4842),u=n(210),c=n(4417),h=n(8479),_="mouseout",m="mouseleave",f="mouseover",p="mouseenter",y="mousemove",g="mousedown",M="mouseup",v="pointermove",L="pointerdown",Y="pointerup",b="contextmenu",k="click",w="dblclick",D="touchstart",S="touchend",T="dbltap",x="touchmove",P="wheel",H=[p,g,y,M,_,D,x,S,f,P,b,L,v,Y,"pointercancel","lostpointercapture"],C=H.length;function j(e,t){e.content.addEventListener(t,(function(n){e["_"+t](n)}),!1)}function O(e){return void 0===e&&(e={}),(e.clipFunc||e.clipWidth||e.clipHeight)&&i.Util.warn("Stage does not support clipping. Please use clip for Layers or Groups."),e}t.stages=[];var E=function(e){function n(n){var a=e.call(this,O(n))||this;return a._pointerPositions=[],a._changedPointerPositions=[],a._buildDOM(),a._bindContentEvents(),t.stages.push(a),a.on("widthChange.konva heightChange.konva",a._resizeDOM),a.on("visibleChange.konva",a._checkVisibility),a.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(function(){O(a.attrs)})),a._checkVisibility(),a}return r(n,e),n.prototype._validateAdd=function(e){var t="Layer"===e.getType(),n="FastLayer"===e.getType();t||n||i.Util.throw("You may only add layers to the stage.")},n.prototype._checkVisibility=function(){if(this.content){var e=this.visible()?"":"none";this.content.style.display=e}},n.prototype.setContainer=function(e){if("string"==typeof e){if("."===e.charAt(0)){var t=e.slice(1);e=document.getElementsByClassName(t)[0]}else{var n;n="#"!==e.charAt(0)?e:e.slice(1),e=document.getElementById(n)}if(!e)throw"Can not find container in document with id "+n}return this._setAttr("container",e),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),e.appendChild(this.content)),this},n.prototype.shouldDrawHit=function(){return!0},n.prototype.clear=function(){var e,t=this.children,n=t.length;for(e=0;e<n;e++)t[e].clear();return this},n.prototype.clone=function(e){return e||(e={}),e.container=document.createElement("div"),o.Container.prototype.clone.call(this,e)},n.prototype.destroy=function(){e.prototype.destroy.call(this);var n=this.content;n&&i.Util._isInDocument(n)&&this.container().removeChild(n);var a=t.stages.indexOf(this);return a>-1&&t.stages.splice(a,1),this},n.prototype.getPointerPosition=function(){var e=this._pointerPositions[0]||this._changedPointerPositions[0];return e?{x:e.x,y:e.y}:(i.Util.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)},n.prototype._getPointerById=function(e){return this._pointerPositions.find((function(t){return t.id===e}))},n.prototype.getPointersPositions=function(){return this._pointerPositions},n.prototype.getStage=function(){return this},n.prototype.getContent=function(){return this.content},n.prototype._toKonvaCanvas=function(e){(e=e||{}).x=e.x||0,e.y=e.y||0,e.width=e.width||this.width(),e.height=e.height||this.height();var t=new l.SceneCanvas({width:e.width,height:e.height,pixelRatio:e.pixelRatio||1}),n=t.getContext()._context,a=this.children;return(e.x||e.y)&&n.translate(-1*e.x,-1*e.y),a.each((function(t){if(t.isVisible()){var a=t._toKonvaCanvas(e);n.drawImage(a._canvas,e.x,e.y,a.getWidth()/a.getPixelRatio(),a.getHeight()/a.getPixelRatio())}})),t},n.prototype.getIntersection=function(e,t){if(!e)return null;var n,a,r=this.children;for(n=r.length-1;n>=0;n--)if(a=r[n].getIntersection(e,t))return a;return null},n.prototype._resizeDOM=function(){var e=this.width(),t=this.height();this.content&&(this.content.style.width=e+"px",this.content.style.height=t+"px"),this.bufferCanvas.setSize(e,t),this.bufferHitCanvas.setSize(e,t),this.children.each((function(n){n.setSize({width:e,height:t}),n.draw()}))},n.prototype.add=function(t){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}e.prototype.add.call(this,t);var a=this.children.length;return a>5&&i.Util.warn("The stage has "+a+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),t.setSize({width:this.width(),height:this.height()}),t.draw(),d.Konva.isBrowser&&this.content.appendChild(t.canvas._canvas),this},n.prototype.getParent=function(){return null},n.prototype.getLayer=function(){return null},n.prototype.hasPointerCapture=function(e){return h.hasPointerCapture(e,this)},n.prototype.setPointerCapture=function(e){h.setPointerCapture(e,this)},n.prototype.releaseCapture=function(e){h.releaseCapture(e,this)},n.prototype.getLayers=function(){return this.getChildren()},n.prototype._bindContentEvents=function(){if(d.Konva.isBrowser)for(var e=0;e<C;e++)j(this,H[e])},n.prototype._mouseenter=function(e){this.setPointersPositions(e),this._fire(p,{evt:e,target:this,currentTarget:this})},n.prototype._mouseover=function(e){this.setPointersPositions(e),this._fire("contentMouseover",{evt:e}),this._fire(f,{evt:e,target:this,currentTarget:this})},n.prototype._mouseout=function(e){var t;this.setPointersPositions(e);var n=(null===(t=this.targetShape)||void 0===t?void 0:t.getStage())?this.targetShape:null,a=!u.DD.isDragging||d.Konva.hitOnDragEnabled;n&&a?(n._fireAndBubble(_,{evt:e}),n._fireAndBubble(m,{evt:e}),this._fire(m,{evt:e,target:this,currentTarget:this}),this.targetShape=null):a&&(this._fire(m,{evt:e,target:this,currentTarget:this}),this._fire(_,{evt:e,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[],this._fire("contentMouseout",{evt:e})},n.prototype._mousemove=function(e){var t;if(d.Konva.UA.ieMobile)return this._touchmove(e);this.setPointersPositions(e);var n,a=i.Util._getFirstPointerId(e),r=(null===(t=this.targetShape)||void 0===t?void 0:t.getStage())?this.targetShape:null,s=!u.DD.isDragging||d.Konva.hitOnDragEnabled;s&&((n=this.getIntersection(this.getPointerPosition()))&&n.isListening()?s&&r!==n?(r&&(r._fireAndBubble(_,{evt:e,pointerId:a},n),r._fireAndBubble(m,{evt:e,pointerId:a},n)),n._fireAndBubble(f,{evt:e,pointerId:a},r),n._fireAndBubble(p,{evt:e,pointerId:a},r),n._fireAndBubble(y,{evt:e,pointerId:a}),this.targetShape=n):n._fireAndBubble(y,{evt:e,pointerId:a}):(r&&s&&(r._fireAndBubble(_,{evt:e,pointerId:a}),r._fireAndBubble(m,{evt:e,pointerId:a}),this._fire(f,{evt:e,target:this,currentTarget:this,pointerId:a}),this.targetShape=null),this._fire(y,{evt:e,target:this,currentTarget:this,pointerId:a})),this._fire("contentMousemove",{evt:e})),e.cancelable&&e.preventDefault()},n.prototype._mousedown=function(e){if(d.Konva.UA.ieMobile)return this._touchstart(e);this.setPointersPositions(e);var t=i.Util._getFirstPointerId(e),n=this.getIntersection(this.getPointerPosition());u.DD.justDragged=!1,d.Konva.listenClickTap=!0,n&&n.isListening()?(this.clickStartShape=n,n._fireAndBubble(g,{evt:e,pointerId:t})):this._fire(g,{evt:e,target:this,currentTarget:this,pointerId:t}),this._fire("contentMousedown",{evt:e})},n.prototype._mouseup=function(e){if(d.Konva.UA.ieMobile)return this._touchend(e);this.setPointersPositions(e);var t=i.Util._getFirstPointerId(e),n=this.getIntersection(this.getPointerPosition()),a=this.clickStartShape,r=this.clickEndShape,s=!1;d.Konva.inDblClickWindow?(s=!0,clearTimeout(this.dblTimeout)):u.DD.justDragged||(d.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){d.Konva.inDblClickWindow=!1}),d.Konva.dblClickWindow),n&&n.isListening()?(this.clickEndShape=n,n._fireAndBubble(M,{evt:e,pointerId:t}),d.Konva.listenClickTap&&a&&a._id===n._id&&(n._fireAndBubble(k,{evt:e,pointerId:t}),s&&r&&r===n&&n._fireAndBubble(w,{evt:e,pointerId:t}))):(this.clickEndShape=null,this._fire(M,{evt:e,target:this,currentTarget:this,pointerId:t}),d.Konva.listenClickTap&&this._fire(k,{evt:e,target:this,currentTarget:this,pointerId:t}),s&&this._fire(w,{evt:e,target:this,currentTarget:this,pointerId:t})),this._fire("contentMouseup",{evt:e}),d.Konva.listenClickTap&&(this._fire("contentClick",{evt:e}),s&&this._fire("contentDblclick",{evt:e})),d.Konva.listenClickTap=!1,e.cancelable&&e.preventDefault()},n.prototype._contextmenu=function(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble(b,{evt:e}):this._fire(b,{evt:e,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:e})},n.prototype._touchstart=function(e){var t=this;this.setPointersPositions(e);var n=!1;this._changedPointerPositions.forEach((function(a){var r=t.getIntersection(a);d.Konva.listenClickTap=!0,u.DD.justDragged=!1,r&&r.isListening()&&(d.Konva.captureTouchEventsEnabled&&r.setPointerCapture(a.id),t.tapStartShape=r,r._fireAndBubble(D,{evt:e,pointerId:a.id},t),n=!0,r.isListening()&&r.preventDefault()&&e.cancelable&&e.preventDefault())})),n||this._fire(D,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchstart",{evt:e})},n.prototype._touchmove=function(e){var t=this;if(this.setPointersPositions(e),!u.DD.isDragging||d.Konva.hitOnDragEnabled){var n=!1,a={};this._changedPointerPositions.forEach((function(r){var i=h.getCapturedShape(r.id)||t.getIntersection(r);i&&i.isListening()&&(a[i._id]||(a[i._id]=!0,i._fireAndBubble(x,{evt:e,pointerId:r.id}),n=!0,i.isListening()&&i.preventDefault()&&e.cancelable&&e.preventDefault()))})),n||this._fire(x,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchmove",{evt:e})}u.DD.isDragging&&u.DD.node.preventDefault()&&e.cancelable&&e.preventDefault()},n.prototype._touchend=function(e){var t=this;this.setPointersPositions(e);var n=this.tapEndShape,a=!1;d.Konva.inDblClickWindow?(a=!0,clearTimeout(this.dblTimeout)):u.DD.justDragged||(d.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){d.Konva.inDblClickWindow=!1}),d.Konva.dblClickWindow);var r=!1,i={},s=!1,o=!1;this._changedPointerPositions.forEach((function(l){var u=h.getCapturedShape(l.id)||t.getIntersection(l);u&&u.releaseCapture(l.id),u&&u.isListening()&&(i[u._id]||(i[u._id]=!0,t.tapEndShape=u,u._fireAndBubble(S,{evt:e,pointerId:l.id}),r=!0,d.Konva.listenClickTap&&u===t.tapStartShape&&(s=!0,u._fireAndBubble("tap",{evt:e,pointerId:l.id}),a&&n&&n===u&&(o=!0,u._fireAndBubble(T,{evt:e,pointerId:l.id}))),u.isListening()&&u.preventDefault()&&e.cancelable&&e.preventDefault()))})),r||this._fire(S,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),d.Konva.listenClickTap&&!s&&(this.tapEndShape=null,this._fire("tap",{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})),a&&!o&&this._fire(T,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchend",{evt:e}),d.Konva.listenClickTap&&(this._fire("contentTap",{evt:e}),a&&this._fire("contentDbltap",{evt:e})),this.preventDefault()&&e.cancelable&&e.preventDefault(),d.Konva.listenClickTap=!1},n.prototype._wheel=function(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble(P,{evt:e}):this._fire(P,{evt:e,target:this,currentTarget:this}),this._fire("contentWheel",{evt:e})},n.prototype._pointerdown=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(L,h.createEvent(e))}},n.prototype._pointermove=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(v,h.createEvent(e))}},n.prototype._pointerup=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(Y,h.createEvent(e)),h.releaseCapture(e.pointerId)}},n.prototype._pointercancel=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(Y,h.createEvent(e)),h.releaseCapture(e.pointerId)}},n.prototype._lostpointercapture=function(e){h.releaseCapture(e.pointerId)},n.prototype.setPointersPositions=function(e){var t=this,n=this._getContentPosition(),a=null,r=null;void 0!==(e=e||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],i.Collection.prototype.each.call(e.touches,(function(e){t._pointerPositions.push({id:e.identifier,x:(e.clientX-n.left)/n.scaleX,y:(e.clientY-n.top)/n.scaleY})})),i.Collection.prototype.each.call(e.changedTouches||e.touches,(function(e){t._changedPointerPositions.push({id:e.identifier,x:(e.clientX-n.left)/n.scaleX,y:(e.clientY-n.top)/n.scaleY})}))):(a=(e.clientX-n.left)/n.scaleX,r=(e.clientY-n.top)/n.scaleY,this.pointerPos={x:a,y:r},this._pointerPositions=[{x:a,y:r,id:i.Util._getFirstPointerId(e)}],this._changedPointerPositions=[{x:a,y:r,id:i.Util._getFirstPointerId(e)}])},n.prototype._setPointerPosition=function(e){i.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(e)},n.prototype._getContentPosition=function(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var e=this.content.getBoundingClientRect();return{top:e.top,left:e.left,scaleX:e.width/this.content.clientWidth||1,scaleY:e.height/this.content.clientHeight||1}},n.prototype._buildDOM=function(){if(this.bufferCanvas=new l.SceneCanvas({width:this.width(),height:this.height()}),this.bufferHitCanvas=new l.HitCanvas({pixelRatio:1,width:this.width(),height:this.height()}),d.Konva.isBrowser){var e=this.container();if(!e)throw"Stage has no container. A container is required.";e.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),e.appendChild(this.content),this._resizeDOM()}},n.prototype.cache=function(){return i.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this},n.prototype.clearCache=function(){return this},n.prototype.batchDraw=function(){return this.children.each((function(e){e.batchDraw()})),this},n}(o.Container);t.Stage=E,E.prototype.nodeType="Stage",c._registerNode(E),s.Factory.addGetterSetter(E,"container")},8017:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(8588),r=n(6745),i=n(7939),s=n(4417),o={node:1,duration:1,easing:1,onFinish:1,yoyo:1},d=0,l=["fill","stroke","shadowColor"],u=function(){function e(e,t,n,a,r,i,s){this.prop=e,this.propFunc=t,this.begin=a,this._pos=a,this.duration=i,this._change=0,this.prevPos=0,this.yoyo=s,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=r-this.begin,this.pause()}return e.prototype.fire=function(e){var t=this[e];t&&t()},e.prototype.setTime=function(e){e>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():e<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=e,this.update())},e.prototype.getTime=function(){return this._time},e.prototype.setPosition=function(e){this.prevPos=this._pos,this.propFunc(e),this._pos=e},e.prototype.getPosition=function(e){return void 0===e&&(e=this._time),this.func(e,this.begin,this._change,this.duration)},e.prototype.play=function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},e.prototype.reverse=function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},e.prototype.seek=function(e){this.pause(),this._time=e,this.update(),this.fire("onSeek")},e.prototype.reset=function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},e.prototype.finish=function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},e.prototype.update=function(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")},e.prototype.onEnterFrame=function(){var e=this.getTimer()-this._startTime;2===this.state?this.setTime(e):3===this.state&&this.setTime(this.duration-e)},e.prototype.pause=function(){this.state=1,this.fire("onPause")},e.prototype.getTimer=function(){return(new Date).getTime()},e}(),c=function(){function e(n){var i,l,c=this,h=n.node,_=h._id,m=n.easing||t.Easings.Linear,f=!!n.yoyo;i=void 0===n.duration?.3:0===n.duration?.001:n.duration,this.node=h,this._id=d++;var p=h.getLayer()||(h instanceof s.Konva.Stage?h.getLayers():null);for(l in p||a.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new r.Animation((function(){c.tween.onEnterFrame()}),p),this.tween=new u(l,(function(e){c._tweenFunc(e)}),m,0,1,1e3*i,f),this._addListeners(),e.attrs[_]||(e.attrs[_]={}),e.attrs[_][this._id]||(e.attrs[_][this._id]={}),e.tweens[_]||(e.tweens[_]={}),n)void 0===o[l]&&this._addAttr(l,n[l]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset,this.onUpdate=n.onUpdate}return e.prototype._addAttr=function(t,n){var r,i,s,o,d,u,c,h,_=this.node,m=_._id;if((s=e.tweens[m][t])&&delete e.attrs[m][s][t],r=_.getAttr(t),a.Util._isArray(n))if(i=[],d=Math.max(n.length,r.length),"points"===t&&n.length!==r.length&&(n.length>r.length?(c=r,r=a.Util._prepareArrayForTween(r,n,_.closed())):(u=n,n=a.Util._prepareArrayForTween(n,r,_.closed()))),0===t.indexOf("fill"))for(o=0;o<d;o++)if(o%2==0)i.push(n[o]-r[o]);else{var f=a.Util.colorToRGBA(r[o]);h=a.Util.colorToRGBA(n[o]),r[o]=f,i.push({r:h.r-f.r,g:h.g-f.g,b:h.b-f.b,a:h.a-f.a})}else for(o=0;o<d;o++)i.push(n[o]-r[o]);else-1!==l.indexOf(t)?(r=a.Util.colorToRGBA(r),i={r:(h=a.Util.colorToRGBA(n)).r-r.r,g:h.g-r.g,b:h.b-r.b,a:h.a-r.a}):i=n-r;e.attrs[m][this._id][t]={start:r,diff:i,end:n,trueEnd:u,trueStart:c},e.tweens[m][t]=this._id},e.prototype._tweenFunc=function(t){var n,r,i,s,o,d,u,c,h=this.node,_=e.attrs[h._id][this._id];for(n in _){if(i=(r=_[n]).start,s=r.diff,c=r.end,a.Util._isArray(i))if(o=[],u=Math.max(i.length,c.length),0===n.indexOf("fill"))for(d=0;d<u;d++)d%2==0?o.push((i[d]||0)+s[d]*t):o.push("rgba("+Math.round(i[d].r+s[d].r*t)+","+Math.round(i[d].g+s[d].g*t)+","+Math.round(i[d].b+s[d].b*t)+","+(i[d].a+s[d].a*t)+")");else for(d=0;d<u;d++)o.push((i[d]||0)+s[d]*t);else o=-1!==l.indexOf(n)?"rgba("+Math.round(i.r+s.r*t)+","+Math.round(i.g+s.g*t)+","+Math.round(i.b+s.b*t)+","+(i.a+s.a*t)+")":i+s*t;h.setAttr(n,o)}},e.prototype._addListeners=function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){var n=t.node,a=e.attrs[n._id][t._id];a.points&&a.points.trueEnd&&n.setAttr("points",a.points.trueEnd),t.onFinish&&t.onFinish.call(t)},this.tween.onReset=function(){var n=t.node,a=e.attrs[n._id][t._id];a.points&&a.points.trueStart&&n.points(a.points.trueStart),t.onReset&&t.onReset()},this.tween.onUpdate=function(){t.onUpdate&&t.onUpdate.call(t)}},e.prototype.play=function(){return this.tween.play(),this},e.prototype.reverse=function(){return this.tween.reverse(),this},e.prototype.reset=function(){return this.tween.reset(),this},e.prototype.seek=function(e){return this.tween.seek(1e3*e),this},e.prototype.pause=function(){return this.tween.pause(),this},e.prototype.finish=function(){return this.tween.finish(),this},e.prototype.destroy=function(){var t,n=this.node._id,a=this._id,r=e.tweens[n];for(t in this.pause(),r)delete e.tweens[n][t];delete e.attrs[n][a]},e.attrs={},e.tweens={},e}();t.Tween=c,i.Node.prototype.to=function(e){var t=e.onFinish;e.node=this,e.onFinish=function(){this.destroy(),t&&t()},new c(e).play()},t.Easings={BackEaseIn:function(e,t,n,a){var r=1.70158;return n*(e/=a)*e*((r+1)*e-r)+t},BackEaseOut:function(e,t,n,a){var r=1.70158;return n*((e=e/a-1)*e*((r+1)*e+r)+1)+t},BackEaseInOut:function(e,t,n,a){var r=1.70158;return(e/=a/2)<1?n/2*(e*e*((1+(r*=1.525))*e-r))+t:n/2*((e-=2)*e*((1+(r*=1.525))*e+r)+2)+t},ElasticEaseIn:function(e,t,n,a,r,i){var s=0;return 0===e?t:1==(e/=a)?t+n:(i||(i=.3*a),!r||r<Math.abs(n)?(r=n,s=i/4):s=i/(2*Math.PI)*Math.asin(n/r),-r*Math.pow(2,10*(e-=1))*Math.sin((e*a-s)*(2*Math.PI)/i)+t)},ElasticEaseOut:function(e,t,n,a,r,i){var s=0;return 0===e?t:1==(e/=a)?t+n:(i||(i=.3*a),!r||r<Math.abs(n)?(r=n,s=i/4):s=i/(2*Math.PI)*Math.asin(n/r),r*Math.pow(2,-10*e)*Math.sin((e*a-s)*(2*Math.PI)/i)+n+t)},ElasticEaseInOut:function(e,t,n,a,r,i){var s=0;return 0===e?t:2==(e/=a/2)?t+n:(i||(i=a*(.3*1.5)),!r||r<Math.abs(n)?(r=n,s=i/4):s=i/(2*Math.PI)*Math.asin(n/r),e<1?r*Math.pow(2,10*(e-=1))*Math.sin((e*a-s)*(2*Math.PI)/i)*-.5+t:r*Math.pow(2,-10*(e-=1))*Math.sin((e*a-s)*(2*Math.PI)/i)*.5+n+t)},BounceEaseOut:function(e,t,n,a){return(e/=a)<1/2.75?n*(7.5625*e*e)+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t},BounceEaseIn:function(e,n,a,r){return a-t.Easings.BounceEaseOut(r-e,0,a,r)+n},BounceEaseInOut:function(e,n,a,r){return e<r/2?.5*t.Easings.BounceEaseIn(2*e,0,a,r)+n:.5*t.Easings.BounceEaseOut(2*e-r,0,a,r)+.5*a+n},EaseIn:function(e,t,n,a){return n*(e/=a)*e+t},EaseOut:function(e,t,n,a){return-n*(e/=a)*(e-2)+t},EaseInOut:function(e,t,n,a){return(e/=a/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},StrongEaseIn:function(e,t,n,a){return n*(e/=a)*e*e*e*e+t},StrongEaseOut:function(e,t,n,a){return n*((e=e/a-1)*e*e*e*e+1)+t},StrongEaseInOut:function(e,t,n,a){return(e/=a/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t},Linear:function(e,t,n,a){return n*e/a+t}}},8588:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4417),r=function(){function e(){}return e.toCollection=function(t){var n,a=new e,r=t.length;for(n=0;n<r;n++)a.push(t[n]);return a},e._mapMethod=function(t){e.prototype[t]=function(){var e,n=this.length,a=[].slice.call(arguments);for(e=0;e<n;e++)this[e][t].apply(this[e],a);return this}},e.mapMethods=function(t){var n=t.prototype;for(var a in n)e._mapMethod(a)},e}();t.Collection=r,r.prototype=[],r.prototype.each=function(e){for(var t=0;t<this.length;t++)e(this[t],t)},r.prototype.toArray=function(){var e,t=[],n=this.length;for(e=0;e<n;e++)t.push(this[e]);return t};var i=function(){function e(e){void 0===e&&(e=[1,0,0,1,0,0]),this.dirty=!1,this.m=e&&e.slice()||[1,0,0,1,0,0]}return e.prototype.reset=function(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0},e.prototype.copy=function(){return new e(this.m)},e.prototype.copyInto=function(e){e.m[0]=this.m[0],e.m[1]=this.m[1],e.m[2]=this.m[2],e.m[3]=this.m[3],e.m[4]=this.m[4],e.m[5]=this.m[5]},e.prototype.point=function(e){var t=this.m;return{x:t[0]*e.x+t[2]*e.y+t[4],y:t[1]*e.x+t[3]*e.y+t[5]}},e.prototype.translate=function(e,t){return this.m[4]+=this.m[0]*e+this.m[2]*t,this.m[5]+=this.m[1]*e+this.m[3]*t,this},e.prototype.scale=function(e,t){return this.m[0]*=e,this.m[1]*=e,this.m[2]*=t,this.m[3]*=t,this},e.prototype.rotate=function(e){var t=Math.cos(e),n=Math.sin(e),a=this.m[0]*t+this.m[2]*n,r=this.m[1]*t+this.m[3]*n,i=this.m[0]*-n+this.m[2]*t,s=this.m[1]*-n+this.m[3]*t;return this.m[0]=a,this.m[1]=r,this.m[2]=i,this.m[3]=s,this},e.prototype.getTranslation=function(){return{x:this.m[4],y:this.m[5]}},e.prototype.skew=function(e,t){var n=this.m[0]+this.m[2]*t,a=this.m[1]+this.m[3]*t,r=this.m[2]+this.m[0]*e,i=this.m[3]+this.m[1]*e;return this.m[0]=n,this.m[1]=a,this.m[2]=r,this.m[3]=i,this},e.prototype.multiply=function(e){var t=this.m[0]*e.m[0]+this.m[2]*e.m[1],n=this.m[1]*e.m[0]+this.m[3]*e.m[1],a=this.m[0]*e.m[2]+this.m[2]*e.m[3],r=this.m[1]*e.m[2]+this.m[3]*e.m[3],i=this.m[0]*e.m[4]+this.m[2]*e.m[5]+this.m[4],s=this.m[1]*e.m[4]+this.m[3]*e.m[5]+this.m[5];return this.m[0]=t,this.m[1]=n,this.m[2]=a,this.m[3]=r,this.m[4]=i,this.m[5]=s,this},e.prototype.invert=function(){var e=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),t=this.m[3]*e,n=-this.m[1]*e,a=-this.m[2]*e,r=this.m[0]*e,i=e*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),s=e*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=t,this.m[1]=n,this.m[2]=a,this.m[3]=r,this.m[4]=i,this.m[5]=s,this},e.prototype.getMatrix=function(){return this.m},e.prototype.setAbsolutePosition=function(e,t){var n=this.m[0],a=this.m[1],r=this.m[2],i=this.m[3],s=this.m[4],o=(n*(t-this.m[5])-a*(e-s))/(n*i-a*r),d=(e-s-r*o)/n;return this.translate(d,o)},e.prototype.decompose=function(){var e=this.m[0],n=this.m[1],a=this.m[2],r=this.m[3],i=e*r-n*a,s={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=e||0!=n){var o=Math.sqrt(e*e+n*n);s.rotation=n>0?Math.acos(e/o):-Math.acos(e/o),s.scaleX=o,s.scaleY=i/o,s.skewX=(e*a+n*r)/i,s.skewY=0}else if(0!=a||0!=r){var d=Math.sqrt(a*a+r*r);s.rotation=Math.PI/2-(r>0?Math.acos(-a/d):-Math.acos(a/d)),s.scaleX=i/d,s.scaleY=d,s.skewX=0,s.skewY=(e*a+n*r)/i}return s.rotation=t.Util._getRotation(s.rotation),s},e}();t.Transform=i;var s=Math.PI/180,o=180/Math.PI,d="Konva error: ",l={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},u=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,c=[];t.Util={_isElement:function(e){return!(!e||1!=e.nodeType)},_isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},_isPlainObject:function(e){return!!e&&e.constructor===Object},_isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},_isNumber:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&!isNaN(e)&&isFinite(e)},_isString:function(e){return"[object String]"===Object.prototype.toString.call(e)},_isBoolean:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},isObject:function(e){return e instanceof Object},isValidSelector:function(e){if("string"!=typeof e)return!1;var t=e[0];return"#"===t||"."===t||t===t.toUpperCase()},_sign:function(e){return 0===e?0:e>0?1:-1},requestAnimFrame:function(e){c.push(e),1===c.length&&requestAnimationFrame((function(){var e=c;c=[],e.forEach((function(e){e()}))}))},createCanvasElement:function(){var e=document.createElement("canvas");try{e.style=e.style||{}}catch(e){}return e},createImageElement:function(){return document.createElement("img")},_isInDocument:function(e){for(;e=e.parentNode;)if(e==document)return!0;return!1},_simplifyArray:function(e){var n,a,r=[],i=e.length,s=t.Util;for(n=0;n<i;n++)a=e[n],s._isNumber(a)?a=Math.round(1e3*a)/1e3:s._isString(a)||(a=a.toString()),r.push(a);return r},_urlToImage:function(e,t){var n=new a.glob.Image;n.onload=function(){t(n)},n.src=e},_rgbToHex:function(e,t,n){return((1<<24)+(e<<16)+(t<<8)+n).toString(16).slice(1)},_hexToRgb:function(e){e=e.replace("#","");var t=parseInt(e,16);return{r:t>>16&255,g:t>>8&255,b:255&t}},getRandomColor:function(){for(var e=(16777215*Math.random()<<0).toString(16);e.length<6;)e="0"+e;return"#"+e},get:function(e,t){return void 0===e?t:e},getRGB:function(e){var t;return e in l?{r:(t=l[e])[0],g:t[1],b:t[2]}:"#"===e[0]?this._hexToRgb(e.substring(1)):"rgb("===e.substr(0,4)?(t=u.exec(e.replace(/ /g,"")),{r:parseInt(t[1],10),g:parseInt(t[2],10),b:parseInt(t[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(e){return e=e||"black",t.Util._namedColorToRBA(e)||t.Util._hex3ColorToRGBA(e)||t.Util._hex6ColorToRGBA(e)||t.Util._rgbColorToRGBA(e)||t.Util._rgbaColorToRGBA(e)||t.Util._hslColorToRGBA(e)},_namedColorToRBA:function(e){var t=l[e.toLowerCase()];return t?{r:t[0],g:t[1],b:t[2],a:1}:null},_rgbColorToRGBA:function(e){if(0===e.indexOf("rgb(")){var t=(e=e.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:1}}},_rgbaColorToRGBA:function(e){if(0===e.indexOf("rgba(")){var t=(e=e.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:t[3]}}},_hex6ColorToRGBA:function(e){if("#"===e[0]&&7===e.length)return{r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(e){if("#"===e[0]&&4===e.length)return{r:parseInt(e[1]+e[1],16),g:parseInt(e[2]+e[2],16),b:parseInt(e[3]+e[3],16),a:1}},_hslColorToRGBA:function(e){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(e)){var t,n=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e),a=(n[0],n.slice(1)),r=Number(a[0])/360,i=Number(a[1])/100,s=Number(a[2])/100,o=void 0,d=void 0;if(0===i)return d=255*s,{r:Math.round(d),g:Math.round(d),b:Math.round(d),a:1};for(var l=2*s-(t=s<.5?s*(1+i):s+i-s*i),u=[0,0,0],c=0;c<3;c++)(o=r+1/3*-(c-1))<0&&o++,o>1&&o--,d=6*o<1?l+6*(t-l)*o:2*o<1?t:3*o<2?l+(t-l)*(2/3-o)*6:l,u[c]=255*d;return{r:Math.round(u[0]),g:Math.round(u[1]),b:Math.round(u[2]),a:1}}},haveIntersection:function(e,t){return!(t.x>e.x+e.width||t.x+t.width<e.x||t.y>e.y+e.height||t.y+t.height<e.y)},cloneObject:function(e){var t={};for(var n in e)this._isPlainObject(e[n])?t[n]=this.cloneObject(e[n]):this._isArray(e[n])?t[n]=this.cloneArray(e[n]):t[n]=e[n];return t},cloneArray:function(e){return e.slice(0)},_degToRad:function(e){return e*s},_radToDeg:function(e){return e*o},_getRotation:function(e){return a.Konva.angleDeg?t.Util._radToDeg(e):e},_capitalize:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},throw:function(e){throw new Error(d+e)},error:function(e){console.error(d+e)},warn:function(e){a.Konva.showWarnings&&console.warn("Konva warning: "+e)},extend:function(e,t){function n(){this.constructor=e}n.prototype=t.prototype;var a=e.prototype;for(var r in e.prototype=new n,a)a.hasOwnProperty(r)&&(e.prototype[r]=a[r]);e.__super__=t.prototype,e.super=t},_getControlPoints:function(e,t,n,a,r,i,s){var o=Math.sqrt(Math.pow(n-e,2)+Math.pow(a-t,2)),d=Math.sqrt(Math.pow(r-n,2)+Math.pow(i-a,2)),l=s*o/(o+d),u=s*d/(o+d);return[n-l*(r-e),a-l*(i-t),n+u*(r-e),a+u*(i-t)]},_expandPoints:function(e,n){var a,r,i=e.length,s=[];for(a=2;a<i-2;a+=2)r=t.Util._getControlPoints(e[a-2],e[a-1],e[a],e[a+1],e[a+2],e[a+3],n),s.push(r[0]),s.push(r[1]),s.push(e[a]),s.push(e[a+1]),s.push(r[2]),s.push(r[3]);return s},each:function(e,t){for(var n in e)t(n,e[n])},_inRange:function(e,t,n){return t<=e&&e<n},_getProjectionToSegment:function(e,t,n,a,r,i){var s,o,d,l=(e-n)*(e-n)+(t-a)*(t-a);if(0==l)s=e,o=t,d=(r-n)*(r-n)+(i-a)*(i-a);else{var u=((r-e)*(n-e)+(i-t)*(a-t))/l;u<0?(s=e,o=t,d=(e-r)*(e-r)+(t-i)*(t-i)):u>1?(s=n,o=a,d=(n-r)*(n-r)+(a-i)*(a-i)):d=((s=e+u*(n-e))-r)*(s-r)+((o=t+u*(a-t))-i)*(o-i)}return[s,o,d]},_getProjectionToLine:function(e,n,a){var r=t.Util.cloneObject(e),i=Number.MAX_VALUE;return n.forEach((function(s,o){if(a||o!==n.length-1){var d=n[(o+1)%n.length],l=t.Util._getProjectionToSegment(s.x,s.y,d.x,d.y,e.x,e.y),u=l[0],c=l[1],h=l[2];h<i&&(r.x=u,r.y=c,i=h)}})),r},_prepareArrayForTween:function(e,n,a){var r,i=[],s=[];if(e.length>n.length){var o=n;n=e,e=o}for(r=0;r<e.length;r+=2)i.push({x:e[r],y:e[r+1]});for(r=0;r<n.length;r+=2)s.push({x:n[r],y:n[r+1]});var d=[];return s.forEach((function(e){var n=t.Util._getProjectionToLine(e,i,a);d.push(n.x),d.push(n.y)})),d},_prepareToStringify:function(e){var n;for(var a in e.visitedByCircularReferenceRemoval=!0,e)if(e.hasOwnProperty(a)&&e[a]&&"object"==typeof e[a])if(n=Object.getOwnPropertyDescriptor(e,a),e[a].visitedByCircularReferenceRemoval||t.Util._isElement(e[a])){if(!n.configurable)return null;delete e[a]}else if(null===t.Util._prepareToStringify(e[a])){if(!n.configurable)return null;delete e[a]}return delete e.visitedByCircularReferenceRemoval,e},_assign:function(e,t){for(var n in t)e[n]=t[n];return e},_getFirstPointerId:function(e){return e.touches?e.changedTouches[0].identifier:999}}},3774:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4417),r=n(8588);function i(e){return r.Util._isString(e)?'"'+e+'"':"[object Number]"===Object.prototype.toString.call(e)||r.Util._isBoolean(e)?e:Object.prototype.toString.call(e)}t.RGBComponent=function(e){return e>255?255:e<0?0:Math.round(e)},t.alphaComponent=function(e){return e>1?1:e<1e-4?1e-4:e},t.getNumberValidator=function(){if(a.Konva.isUnminified)return function(e,t){return r.Util._isNumber(e)||r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a number.'),e}},t.getNumberOrArrayOfNumbersValidator=function(e){if(a.Konva.isUnminified)return function(t,n){var a=r.Util._isNumber(t),s=r.Util._isArray(t)&&t.length==e;return a||s||r.Util.warn(i(t)+' is a not valid value for "'+n+'" attribute. The value should be a number or Array<number>('+e+")"),t}},t.getNumberOrAutoValidator=function(){if(a.Konva.isUnminified)return function(e,t){return r.Util._isNumber(e)||"auto"===e||r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a number or "auto".'),e}},t.getStringValidator=function(){if(a.Konva.isUnminified)return function(e,t){return r.Util._isString(e)||r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a string.'),e}},t.getStringOrGradientValidator=function(){if(a.Konva.isUnminified)return function(e,t){var n=r.Util._isString(e),a="[object CanvasGradient]"===Object.prototype.toString.call(e);return n||a||r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a string or a native gradient.'),e}},t.getFunctionValidator=function(){if(a.Konva.isUnminified)return function(e,t){return r.Util._isFunction(e)||r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a function.'),e}},t.getNumberArrayValidator=function(){if(a.Konva.isUnminified)return function(e,t){return r.Util._isArray(e)?e.forEach((function(e){r.Util._isNumber(e)||r.Util.warn('"'+t+'" attribute has non numeric element '+e+". Make sure that all elements are numbers.")})):r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a array of numbers.'),e}},t.getBooleanValidator=function(){if(a.Konva.isUnminified)return function(e,t){return!0===e||!1===e||r.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a boolean.'),e}},t.getComponentValidator=function(e){if(a.Konva.isUnminified)return function(t,n){return r.Util.isObject(t)||r.Util.warn(i(t)+' is a not valid value for "'+n+'" attribute. The value should be an object with properties '+e),t}}},3986:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4417),r=n(8588),i=n(7939),s=n(8783),o=n(8342),d=n(4415),l=n(3980),u=n(8985),c=n(210),h=n(7955),_=n(6745),m=n(8017),f=n(3442),p=n(4842);t.Konva=r.Util._assign(a.Konva,{Collection:r.Collection,Util:r.Util,Transform:r.Transform,Node:i.Node,ids:i.ids,names:i.names,Container:s.Container,Stage:o.Stage,stages:o.stages,Layer:d.Layer,FastLayer:l.FastLayer,Group:u.Group,DD:c.DD,Shape:h.Shape,shapes:h.shapes,Animation:_.Animation,Tween:m.Tween,Easings:m.Easings,Context:f.Context,Canvas:p.Canvas})},2076:(e,t,n)=>{"use strict";var a=n(3986),r=n(119),i=n(2064),s=n(7643),o=n(535),d=n(1298),l=n(6067),u=n(7149),c=n(7339),h=n(5244),_=n(1785),m=n(657),f=n(8986),p=n(1964),y=n(3787),g=n(2831),M=n(9516),v=n(9846),L=n(2527),Y=n(6672),b=n(5309),k=n(1695),w=n(9621),D=n(1179),S=n(7194),T=n(3925),x=n(5751),P=n(6588),H=n(3565),C=n(5929),j=n(7233),O=n(8590),E=n(8280),A=n(3438),F=n(6703),N=n(1665),W=n(1863);t.S=a.Konva.Util._assign(a.Konva,{Arc:r.Arc,Arrow:i.Arrow,Circle:s.Circle,Ellipse:o.Ellipse,Image:d.Image,Label:l.Label,Tag:l.Tag,Line:u.Line,Path:c.Path,Rect:h.Rect,RegularPolygon:_.RegularPolygon,Ring:m.Ring,Sprite:f.Sprite,Star:p.Star,Text:y.Text,TextPath:g.TextPath,Transformer:M.Transformer,Wedge:v.Wedge,Filters:{Blur:L.Blur,Brighten:Y.Brighten,Contrast:b.Contrast,Emboss:k.Emboss,Enhance:w.Enhance,Grayscale:D.Grayscale,HSL:S.HSL,HSV:T.HSV,Invert:x.Invert,Kaleidoscope:P.Kaleidoscope,Mask:H.Mask,Noise:C.Noise,Pixelate:j.Pixelate,Posterize:O.Posterize,RGB:E.RGB,RGBA:A.RGBA,Sepia:F.Sepia,Solarize:N.Solarize,Threshold:W.Threshold}})},2527:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);function s(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var o=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],d=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];t.Blur=function(e){var t=Math.round(this.blurRadius());t>0&&function(e,t){var n,a,r,i,l,u,c,h,_,m,f,p,y,g,M,v,L,Y,b,k,w,D,S,T,x=e.data,P=e.width,H=e.height,C=t+t+1,j=P-1,O=H-1,E=t+1,A=E*(E+1)/2,F=new s,N=null,W=F,R=null,I=null,z=o[t],G=d[t];for(r=1;r<C;r++)W=W.next=new s,r===E&&(N=W);for(W.next=F,c=u=0,a=0;a<H;a++){for(v=L=Y=b=h=_=m=f=0,p=E*(k=x[u]),y=E*(w=x[u+1]),g=E*(D=x[u+2]),M=E*(S=x[u+3]),h+=A*k,_+=A*w,m+=A*D,f+=A*S,W=F,r=0;r<E;r++)W.r=k,W.g=w,W.b=D,W.a=S,W=W.next;for(r=1;r<E;r++)i=u+((j<r?j:r)<<2),h+=(W.r=k=x[i])*(T=E-r),_+=(W.g=w=x[i+1])*T,m+=(W.b=D=x[i+2])*T,f+=(W.a=S=x[i+3])*T,v+=k,L+=w,Y+=D,b+=S,W=W.next;for(R=F,I=N,n=0;n<P;n++)x[u+3]=S=f*z>>G,0!==S?(S=255/S,x[u]=(h*z>>G)*S,x[u+1]=(_*z>>G)*S,x[u+2]=(m*z>>G)*S):x[u]=x[u+1]=x[u+2]=0,h-=p,_-=y,m-=g,f-=M,p-=R.r,y-=R.g,g-=R.b,M-=R.a,i=c+((i=n+t+1)<j?i:j)<<2,h+=v+=R.r=x[i],_+=L+=R.g=x[i+1],m+=Y+=R.b=x[i+2],f+=b+=R.a=x[i+3],R=R.next,p+=k=I.r,y+=w=I.g,g+=D=I.b,M+=S=I.a,v-=k,L-=w,Y-=D,b-=S,I=I.next,u+=4;c+=P}for(n=0;n<P;n++){for(L=Y=b=v=_=m=f=h=0,p=E*(k=x[u=n<<2]),y=E*(w=x[u+1]),g=E*(D=x[u+2]),M=E*(S=x[u+3]),h+=A*k,_+=A*w,m+=A*D,f+=A*S,W=F,r=0;r<E;r++)W.r=k,W.g=w,W.b=D,W.a=S,W=W.next;for(l=P,r=1;r<=t;r++)u=l+n<<2,h+=(W.r=k=x[u])*(T=E-r),_+=(W.g=w=x[u+1])*T,m+=(W.b=D=x[u+2])*T,f+=(W.a=S=x[u+3])*T,v+=k,L+=w,Y+=D,b+=S,W=W.next,r<O&&(l+=P);for(u=n,R=F,I=N,a=0;a<H;a++)x[3+(i=u<<2)]=S=f*z>>G,S>0?(S=255/S,x[i]=(h*z>>G)*S,x[i+1]=(_*z>>G)*S,x[i+2]=(m*z>>G)*S):x[i]=x[i+1]=x[i+2]=0,h-=p,_-=y,m-=g,f-=M,p-=R.r,y-=R.g,g-=R.b,M-=R.a,i=n+((i=a+E)<O?i:O)*P<<2,h+=v+=R.r=x[i],_+=L+=R.g=x[i+1],m+=Y+=R.b=x[i+2],f+=b+=R.a=x[i+3],R=R.next,p+=k=I.r,y+=w=I.g,g+=D=I.b,M+=S=I.a,v-=k,L-=w,Y-=D,b-=S,I=I.next,u+=P}}(e,t)},a.Factory.addGetterSetter(r.Node,"blurRadius",0,i.getNumberValidator(),a.Factory.afterSetFilter)},6672:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.Brighten=function(e){var t,n=255*this.brightness(),a=e.data,r=a.length;for(t=0;t<r;t+=4)a[t]+=n,a[t+1]+=n,a[t+2]+=n},a.Factory.addGetterSetter(r.Node,"brightness",0,i.getNumberValidator(),a.Factory.afterSetFilter)},5309:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.Contrast=function(e){var t,n=Math.pow((this.contrast()+100)/100,2),a=e.data,r=a.length,i=150,s=150,o=150;for(t=0;t<r;t+=4)i=a[t],s=a[t+1],o=a[t+2],i/=255,i-=.5,i*=n,i+=.5,s/=255,s-=.5,s*=n,s+=.5,o/=255,o-=.5,o*=n,o+=.5,i=(i*=255)<0?0:i>255?255:i,s=(s*=255)<0?0:s>255?255:s,o=(o*=255)<0?0:o>255?255:o,a[t]=i,a[t+1]=s,a[t+2]=o},a.Factory.addGetterSetter(r.Node,"contrast",0,i.getNumberValidator(),a.Factory.afterSetFilter)},1695:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(8588),s=n(3774);t.Emboss=function(e){var t=10*this.embossStrength(),n=255*this.embossWhiteLevel(),a=this.embossDirection(),r=this.embossBlend(),s=0,o=0,d=e.data,l=e.width,u=e.height,c=4*l,h=u;switch(a){case"top-left":s=-1,o=-1;break;case"top":s=-1,o=0;break;case"top-right":s=-1,o=1;break;case"right":s=0,o=1;break;case"bottom-right":s=1,o=1;break;case"bottom":s=1,o=0;break;case"bottom-left":s=1,o=-1;break;case"left":s=0,o=-1;break;default:i.Util.error("Unknown emboss direction: "+a)}do{var _=(h-1)*c,m=s;h+m<1&&(m=0),h+m>u&&(m=0);var f=(h-1+m)*l*4,p=l;do{var y=_+4*(p-1),g=o;p+g<1&&(g=0),p+g>l&&(g=0);var M=f+4*(p-1+g),v=d[y]-d[M],L=d[y+1]-d[M+1],Y=d[y+2]-d[M+2],b=v,k=b>0?b:-b;if((L>0?L:-L)>k&&(b=L),(Y>0?Y:-Y)>k&&(b=Y),b*=t,r){var w=d[y]+b,D=d[y+1]+b,S=d[y+2]+b;d[y]=w>255?255:w<0?0:w,d[y+1]=D>255?255:D<0?0:D,d[y+2]=S>255?255:S<0?0:S}else{var T=n-b;T<0?T=0:T>255&&(T=255),d[y]=d[y+1]=d[y+2]=T}}while(--p)}while(--h)},a.Factory.addGetterSetter(r.Node,"embossStrength",.5,s.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"embossWhiteLevel",.5,s.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"embossDirection","top-left",null,a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"embossBlend",!1,null,a.Factory.afterSetFilter)},9621:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);function s(e,t,n,a,r){var i=n-t,s=r-a;return 0===i?a+s/2:0===s?a:s*((e-t)/i)+a}t.Enhance=function(e){var t,n,a,r,i=e.data,o=i.length,d=i[0],l=d,u=i[1],c=u,h=i[2],_=h,m=this.enhance();if(0!==m){for(r=0;r<o;r+=4)(t=i[r+0])<d?d=t:t>l&&(l=t),(n=i[r+1])<u?u=n:n>c&&(c=n),(a=i[r+2])<h?h=a:a>_&&(_=a);var f,p,y,g,M,v,L,Y,b;for(l===d&&(l=255,d=0),c===u&&(c=255,u=0),_===h&&(_=255,h=0),m>0?(p=l+m*(255-l),y=d-m*(d-0),M=c+m*(255-c),v=u-m*(u-0),Y=_+m*(255-_),b=h-m*(h-0)):(p=l+m*(l-(f=.5*(l+d))),y=d+m*(d-f),M=c+m*(c-(g=.5*(c+u))),v=u+m*(u-g),Y=_+m*(_-(L=.5*(_+h))),b=h+m*(h-L)),r=0;r<o;r+=4)i[r+0]=s(i[r+0],d,l,y,p),i[r+1]=s(i[r+1],u,c,v,M),i[r+2]=s(i[r+2],h,_,b,Y)}},a.Factory.addGetterSetter(r.Node,"enhance",0,i.getNumberValidator(),a.Factory.afterSetFilter)},1179:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Grayscale=function(e){var t,n,a=e.data,r=a.length;for(t=0;t<r;t+=4)n=.34*a[t]+.5*a[t+1]+.16*a[t+2],a[t]=n,a[t+1]=n,a[t+2]=n}},7194:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);a.Factory.addGetterSetter(r.Node,"hue",0,i.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"saturation",0,i.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"luminance",0,i.getNumberValidator(),a.Factory.afterSetFilter),t.HSL=function(e){var t,n,a,r,i,s=e.data,o=s.length,d=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,u=127*this.luminance(),c=1*d*Math.cos(l*Math.PI/180),h=1*d*Math.sin(l*Math.PI/180),_=.299+.701*c+.167*h,m=.587-.587*c+.33*h,f=.114-.114*c-.497*h,p=.299-.299*c-.328*h,y=.587+.413*c+.035*h,g=.114-.114*c+.293*h,M=.299-.3*c+1.25*h,v=.587-.586*c-1.05*h,L=.114+.886*c-.2*h;for(t=0;t<o;t+=4)n=s[t+0],a=s[t+1],r=s[t+2],i=s[t+3],s[t+0]=_*n+m*a+f*r+u,s[t+1]=p*n+y*a+g*r+u,s[t+2]=M*n+v*a+L*r+u,s[t+3]=i}},3925:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.HSV=function(e){var t,n,a,r,i,s=e.data,o=s.length,d=Math.pow(2,this.value()),l=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,c=d*l*Math.cos(u*Math.PI/180),h=d*l*Math.sin(u*Math.PI/180),_=.299*d+.701*c+.167*h,m=.587*d-.587*c+.33*h,f=.114*d-.114*c-.497*h,p=.299*d-.299*c-.328*h,y=.587*d+.413*c+.035*h,g=.114*d-.114*c+.293*h,M=.299*d-.3*c+1.25*h,v=.587*d-.586*c-1.05*h,L=.114*d+.886*c-.2*h;for(t=0;t<o;t+=4)n=s[t+0],a=s[t+1],r=s[t+2],i=s[t+3],s[t+0]=_*n+m*a+f*r,s[t+1]=p*n+y*a+g*r,s[t+2]=M*n+v*a+L*r,s[t+3]=i},a.Factory.addGetterSetter(r.Node,"hue",0,i.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"saturation",0,i.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"value",0,i.getNumberValidator(),a.Factory.afterSetFilter)},5751:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Invert=function(e){var t,n=e.data,a=n.length;for(t=0;t<a;t+=4)n[t]=255-n[t],n[t+1]=255-n[t+1],n[t+2]=255-n[t+2]}},6588:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(8588),s=n(3774);t.Kaleidoscope=function(e){var t,n,a,r,s,o,d,l,u,c=e.width,h=e.height,_=Math.round(this.kaleidoscopePower()),m=Math.round(this.kaleidoscopeAngle()),f=Math.floor(c*(m%360)/360);if(!(_<1)){var p=i.Util.createCanvasElement();p.width=c,p.height=h;var y=p.getContext("2d").getImageData(0,0,c,h);!function(e,t,n){var a,r,i,s,o=e.data,d=t.data,l=e.width,u=e.height,c=n.polarCenterX||l/2,h=n.polarCenterY||u/2,_=0,m=0,f=0,p=0,y=Math.sqrt(c*c+h*h);r=l-c,i=u-h,y=(s=Math.sqrt(r*r+i*i))>y?s:y;var g,M,v,L,Y=u,b=l,k=360/b*Math.PI/180;for(M=0;M<b;M+=1)for(v=Math.sin(M*k),L=Math.cos(M*k),g=0;g<Y;g+=1)r=Math.floor(c+y*g/Y*L),_=o[0+(a=4*((i=Math.floor(h+y*g/Y*v))*l+r))],m=o[a+1],f=o[a+2],p=o[a+3],d[0+(a=4*(M+g*l))]=_,d[a+1]=m,d[a+2]=f,d[a+3]=p}(e,y,{polarCenterX:c/2,polarCenterY:h/2});for(var g=c/Math.pow(2,_);g<=8;)g*=2,_-=1;var M=g=Math.ceil(g),v=0,L=M,Y=1;for(f+g>c&&(v=M,L=0,Y=-1),n=0;n<h;n+=1)for(t=v;t!==L;t+=Y)l=4*(c*n+Math.round(t+f)%c),r=y.data[l+0],s=y.data[l+1],o=y.data[l+2],d=y.data[l+3],u=4*(c*n+t),y.data[u+0]=r,y.data[u+1]=s,y.data[u+2]=o,y.data[u+3]=d;for(n=0;n<h;n+=1)for(M=Math.floor(g),a=0;a<_;a+=1){for(t=0;t<M+1;t+=1)l=4*(c*n+t),r=y.data[l+0],s=y.data[l+1],o=y.data[l+2],d=y.data[l+3],u=4*(c*n+2*M-t-1),y.data[u+0]=r,y.data[u+1]=s,y.data[u+2]=o,y.data[u+3]=d;M*=2}!function(e,t,n){var a,r,i,s,o,d,l=e.data,u=t.data,c=e.width,h=e.height,_=n.polarCenterX||c/2,m=n.polarCenterY||h/2,f=0,p=0,y=0,g=0,M=Math.sqrt(_*_+m*m);r=c-_,i=h-m,M=(d=Math.sqrt(r*r+i*i))>M?d:M;var v,L,Y,b=h,k=c,w=n.polarRotation||0;for(r=0;r<c;r+=1)for(i=0;i<h;i+=1)s=r-_,o=i-m,v=Math.sqrt(s*s+o*o)*b/M,L=(L=(180*Math.atan2(o,s)/Math.PI+360+w)%360)*k/360,Y=Math.floor(L),f=l[0+(a=4*(Math.floor(v)*c+Y))],p=l[a+1],y=l[a+2],g=l[a+3],u[0+(a=4*(i*c+r))]=f,u[a+1]=p,u[a+2]=y,u[a+3]=g}(y,e,{polarRotation:0})}},a.Factory.addGetterSetter(r.Node,"kaleidoscopePower",2,s.getNumberValidator(),a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"kaleidoscopeAngle",0,s.getNumberValidator(),a.Factory.afterSetFilter)},3565:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);function s(e,t,n){var a=4*(n*e.width+t),r=[];return r.push(e.data[a++],e.data[a++],e.data[a++],e.data[a++]),r}function o(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)+Math.pow(e[2]-t[2],2))}t.Mask=function(e){var t=function(e,t){var n=s(e,0,0),a=s(e,e.width-1,0),r=s(e,0,e.height-1),i=s(e,e.width-1,e.height-1),d=t||10;if(o(n,a)<d&&o(a,i)<d&&o(i,r)<d&&o(r,n)<d){for(var l=function(e){for(var t=[0,0,0],n=0;n<e.length;n++)t[0]+=e[n][0],t[1]+=e[n][1],t[2]+=e[n][2];return t[0]/=e.length,t[1]/=e.length,t[2]/=e.length,t}([a,n,i,r]),u=[],c=0;c<e.width*e.height;c++){var h=o(l,[e.data[4*c],e.data[4*c+1],e.data[4*c+2]]);u[c]=h<d?0:255}return u}}(e,this.threshold());return t&&function(e,t){for(var n=0;n<e.width*e.height;n++)e.data[4*n+3]=t[n]}(e,t=function(e,t,n){for(var a=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],r=Math.round(Math.sqrt(a.length)),i=Math.floor(r/2),s=[],o=0;o<n;o++)for(var d=0;d<t;d++){for(var l=o*t+d,u=0,c=0;c<r;c++)for(var h=0;h<r;h++){var _=o+c-i,m=d+h-i;if(_>=0&&_<n&&m>=0&&m<t){var f=a[c*r+h];u+=e[_*t+m]*f}}s[l]=u}return s}(t=function(e,t,n){for(var a=[1,1,1,1,1,1,1,1,1],r=Math.round(Math.sqrt(a.length)),i=Math.floor(r/2),s=[],o=0;o<n;o++)for(var d=0;d<t;d++){for(var l=o*t+d,u=0,c=0;c<r;c++)for(var h=0;h<r;h++){var _=o+c-i,m=d+h-i;if(_>=0&&_<n&&m>=0&&m<t){var f=a[c*r+h];u+=e[_*t+m]*f}}s[l]=u>=1020?255:0}return s}(t=function(e,t,n){for(var a=[1,1,1,1,0,1,1,1,1],r=Math.round(Math.sqrt(a.length)),i=Math.floor(r/2),s=[],o=0;o<n;o++)for(var d=0;d<t;d++){for(var l=o*t+d,u=0,c=0;c<r;c++)for(var h=0;h<r;h++){var _=o+c-i,m=d+h-i;if(_>=0&&_<n&&m>=0&&m<t){var f=a[c*r+h];u+=e[_*t+m]*f}}s[l]=2040===u?255:0}return s}(t,e.width,e.height),e.width,e.height),e.width,e.height)),e},a.Factory.addGetterSetter(r.Node,"threshold",0,i.getNumberValidator(),a.Factory.afterSetFilter)},5929:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.Noise=function(e){var t,n=255*this.noise(),a=e.data,r=a.length,i=n/2;for(t=0;t<r;t+=4)a[t+0]+=i-2*i*Math.random(),a[t+1]+=i-2*i*Math.random(),a[t+2]+=i-2*i*Math.random()},a.Factory.addGetterSetter(r.Node,"noise",.2,i.getNumberValidator(),a.Factory.afterSetFilter)},7233:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(8588),i=n(7939),s=n(3774);t.Pixelate=function(e){var t,n,a,i,s,o,d,l,u,c,h,_,m,f,p=Math.ceil(this.pixelSize()),y=e.width,g=e.height,M=Math.ceil(y/p),v=Math.ceil(g/p),L=e.data;if(p<=0)r.Util.error("pixelSize value can not be <= 0");else for(_=0;_<M;_+=1)for(m=0;m<v;m+=1){for(i=0,s=0,o=0,d=0,u=(l=_*p)+p,h=(c=m*p)+p,f=0,t=l;t<u;t+=1)if(!(t>=y))for(n=c;n<h;n+=1)n>=g||(i+=L[0+(a=4*(y*n+t))],s+=L[a+1],o+=L[a+2],d+=L[a+3],f+=1);for(i/=f,s/=f,o/=f,d/=f,t=l;t<u;t+=1)if(!(t>=y))for(n=c;n<h;n+=1)n>=g||(L[0+(a=4*(y*n+t))]=i,L[a+1]=s,L[a+2]=o,L[a+3]=d)}},a.Factory.addGetterSetter(i.Node,"pixelSize",8,s.getNumberValidator(),a.Factory.afterSetFilter)},8590:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.Posterize=function(e){var t,n=Math.round(254*this.levels())+1,a=e.data,r=a.length,i=255/n;for(t=0;t<r;t+=1)a[t]=Math.floor(a[t]/i)*i},a.Factory.addGetterSetter(r.Node,"levels",.5,i.getNumberValidator(),a.Factory.afterSetFilter)},8280:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.RGB=function(e){var t,n,a=e.data,r=a.length,i=this.red(),s=this.green(),o=this.blue();for(t=0;t<r;t+=4)n=(.34*a[t]+.5*a[t+1]+.16*a[t+2])/255,a[t]=n*i,a[t+1]=n*s,a[t+2]=n*o,a[t+3]=a[t+3]},a.Factory.addGetterSetter(r.Node,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),a.Factory.addGetterSetter(r.Node,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),a.Factory.addGetterSetter(r.Node,"blue",0,i.RGBComponent,a.Factory.afterSetFilter)},3438:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.RGBA=function(e){var t,n,a=e.data,r=a.length,i=this.red(),s=this.green(),o=this.blue(),d=this.alpha();for(t=0;t<r;t+=4)n=1-d,a[t]=i*d+a[t]*n,a[t+1]=s*d+a[t+1]*n,a[t+2]=o*d+a[t+2]*n},a.Factory.addGetterSetter(r.Node,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),a.Factory.addGetterSetter(r.Node,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),a.Factory.addGetterSetter(r.Node,"blue",0,i.RGBComponent,a.Factory.afterSetFilter),a.Factory.addGetterSetter(r.Node,"alpha",1,(function(e){return this._filterUpToDate=!1,e>1?1:e<0?0:e}))},6703:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sepia=function(e){var t,n,a,r,i=e.data,s=i.length;for(t=0;t<s;t+=4)n=i[t+0],a=i[t+1],r=i[t+2],i[t+0]=Math.min(255,.393*n+.769*a+.189*r),i[t+1]=Math.min(255,.349*n+.686*a+.168*r),i[t+2]=Math.min(255,.272*n+.534*a+.131*r)}},1665:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Solarize=function(e){var t=e.data,n=e.width,a=4*n,r=e.height;do{var i=(r-1)*a,s=n;do{var o=i+4*(s-1),d=t[o],l=t[o+1],u=t[o+2];d>127&&(d=255-d),l>127&&(l=255-l),u>127&&(u=255-u),t[o]=d,t[o+1]=l,t[o+2]=u}while(--s)}while(--r)}},1863:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(1455),r=n(7939),i=n(3774);t.Threshold=function(e){var t,n=255*this.threshold(),a=e.data,r=a.length;for(t=0;t<r;t+=1)a[t]=a[t]<n?0:255},a.Factory.addGetterSetter(r.Node,"threshold",.5,i.getNumberValidator(),a.Factory.afterSetFilter)},185:(e,t,n)=>{var a=n(2076).S;a._injectGlobal(a),t.default=a,e.exports=t.default},119:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),l=n(3774),u=n(4417),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){var t=d.Konva.getAngle(this.angle()),n=this.clockwise();e.beginPath(),e.arc(0,0,this.outerRadius(),0,t,n),e.arc(0,0,this.innerRadius(),t,0,!n),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.outerRadius()},t.prototype.getHeight=function(){return 2*this.outerRadius()},t.prototype.setWidth=function(e){this.outerRadius(e/2)},t.prototype.setHeight=function(e){this.outerRadius(e/2)},t}(o.Shape);t.Arc=c,c.prototype._centroid=!0,c.prototype.className="Arc",c.prototype._attrsAffectingSize=["innerRadius","outerRadius"],u._registerNode(c),s.Factory.addGetterSetter(c,"innerRadius",0,l.getNumberValidator()),s.Factory.addGetterSetter(c,"outerRadius",0,l.getNumberValidator()),s.Factory.addGetterSetter(c,"angle",0,l.getNumberValidator()),s.Factory.addGetterSetter(c,"clockwise",!1,l.getBooleanValidator()),i.Collection.mapMethods(c)},2064:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7149),d=n(3774),l=n(4417),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(t){e.prototype._sceneFunc.call(this,t);var n=2*Math.PI,a=this.points(),r=a,i=0!==this.tension()&&a.length>4;i&&(r=this.getTensionPoints());var s,o,d=a.length;i?(s=a[d-2]-(r[r.length-2]+r[r.length-4])/2,o=a[d-1]-(r[r.length-1]+r[r.length-3])/2):(s=a[d-2]-a[d-4],o=a[d-1]-a[d-3]);var l=(Math.atan2(o,s)+n)%n,u=this.pointerLength(),c=this.pointerWidth();t.save(),t.beginPath(),t.translate(a[d-2],a[d-1]),t.rotate(l),t.moveTo(0,0),t.lineTo(-u,c/2),t.lineTo(-u,-c/2),t.closePath(),t.restore(),this.pointerAtBeginning()&&(t.save(),t.translate(a[0],a[1]),i?(s=(r[0]+r[2])/2-a[0],o=(r[1]+r[3])/2-a[1]):(s=a[2]-a[0],o=a[3]-a[1]),t.rotate((Math.atan2(-o,-s)+n)%n),t.moveTo(0,0),t.lineTo(-u,c/2),t.lineTo(-u,-c/2),t.closePath(),t.restore());var h=this.dashEnabled();h&&(this.attrs.dashEnabled=!1,t.setLineDash([])),t.fillStrokeShape(this),h&&(this.attrs.dashEnabled=!0)},t.prototype.getSelfRect=function(){var t=e.prototype.getSelfRect.call(this),n=this.pointerWidth()/2;return{x:t.x-n,y:t.y-n,width:t.width+2*n,height:t.height+2*n}},t}(o.Line);t.Arrow=u,u.prototype.className="Arrow",l._registerNode(u),s.Factory.addGetterSetter(u,"pointerLength",10,d.getNumberValidator()),s.Factory.addGetterSetter(u,"pointerWidth",10,d.getNumberValidator()),s.Factory.addGetterSetter(u,"pointerAtBeginning",!1),i.Collection.mapMethods(u)},7643:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),l=n(4417),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){e.beginPath(),e.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radius()},t.prototype.getHeight=function(){return 2*this.radius()},t.prototype.setWidth=function(e){this.radius()!==e/2&&this.radius(e/2)},t.prototype.setHeight=function(e){this.radius()!==e/2&&this.radius(e/2)},t}(o.Shape);t.Circle=u,u.prototype._centroid=!0,u.prototype.className="Circle",u.prototype._attrsAffectingSize=["radius"],l._registerNode(u),s.Factory.addGetterSetter(u,"radius",0,d.getNumberValidator()),i.Collection.mapMethods(u)},535:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),l=n(4417),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.radiusX(),n=this.radiusY();e.beginPath(),e.save(),t!==n&&e.scale(1,n/t),e.arc(0,0,t,0,2*Math.PI,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radiusX()},t.prototype.getHeight=function(){return 2*this.radiusY()},t.prototype.setWidth=function(e){this.radiusX(e/2)},t.prototype.setHeight=function(e){this.radiusY(e/2)},t}(o.Shape);t.Ellipse=u,u.prototype.className="Ellipse",u.prototype._centroid=!0,u.prototype._attrsAffectingSize=["radiusX","radiusY"],l._registerNode(u),s.Factory.addComponentsGetterSetter(u,"radius",["x","y"]),s.Factory.addGetterSetter(u,"radiusX",0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"radiusY",0,d.getNumberValidator()),i.Collection.mapMethods(u)},1298:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),l=n(4417),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._useBufferCanvas=function(){return e.prototype._useBufferCanvas.call(this,!0)},t.prototype._sceneFunc=function(e){var t,n=this.getWidth(),a=this.getHeight(),r=this.attrs.image;if(r){var i=this.attrs.cropWidth,s=this.attrs.cropHeight;t=i&&s?[r,this.cropX(),this.cropY(),i,s,0,0,n,a]:[r,0,0,n,a]}(this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,n,a),e.closePath(),e.fillStrokeShape(this)),r&&e.drawImage.apply(e,t)},t.prototype._hitFunc=function(e){var t=this.width(),n=this.height();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){var e,t;return null!==(e=this.attrs.width)&&void 0!==e?e:(null===(t=this.image())||void 0===t?void 0:t.width)||0},t.prototype.getHeight=function(){var e,t;return null!==(e=this.attrs.height)&&void 0!==e?e:(null===(t=this.image())||void 0===t?void 0:t.height)||0},t.fromURL=function(e,n){var a=i.Util.createImageElement();a.onload=function(){var e=new t({image:a});n(e)},a.crossOrigin="Anonymous",a.src=e},t}(o.Shape);t.Image=u,u.prototype.className="Image",l._registerNode(u),s.Factory.addGetterSetter(u,"image"),s.Factory.addComponentsGetterSetter(u,"crop",["x","y","width","height"]),s.Factory.addGetterSetter(u,"cropX",0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"cropY",0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"cropWidth",0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"cropHeight",0,d.getNumberValidator()),i.Collection.mapMethods(u)},6067:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(8985),l=n(3774),u=n(4417),c=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],h="up",_="right",m="down",f="left",p=c.length,y=function(e){function t(t){var n=e.call(this,t)||this;return n.on("add.konva",(function(e){this._addListeners(e.child),this._sync()})),n}return r(t,e),t.prototype.getText=function(){return this.find("Text")[0]},t.prototype.getTag=function(){return this.find("Tag")[0]},t.prototype._addListeners=function(e){var t,n=this,a=function(){n._sync()};for(t=0;t<p;t++)e.on(c[t]+"Change.konva",a)},t.prototype.getWidth=function(){return this.getText().width()},t.prototype.getHeight=function(){return this.getText().height()},t.prototype._sync=function(){var e,t,n,a,r,i,s,o=this.getText(),d=this.getTag();if(o&&d){switch(e=o.width(),t=o.height(),n=d.pointerDirection(),a=d.pointerWidth(),s=d.pointerHeight(),r=0,i=0,n){case h:r=e/2,i=-1*s;break;case _:r=e+a,i=t/2;break;case m:r=e/2,i=t+s;break;case f:r=-1*a,i=t/2}d.setAttrs({x:-1*r,y:-1*i,width:e,height:t}),o.setAttrs({x:-1*r,y:-1*i})}},t}(d.Group);t.Label=y,y.prototype.className="Label",u._registerNode(y),i.Collection.mapMethods(y);var g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.width(),n=this.height(),a=this.pointerDirection(),r=this.pointerWidth(),i=this.pointerHeight(),s=this.cornerRadius(),o=0,d=0,l=0,u=0;"number"==typeof s?o=d=l=u=Math.min(s,t/2,n/2):(o=Math.min(s[0]||0,t/2,n/2),d=Math.min(s[1]||0,t/2,n/2),u=Math.min(s[2]||0,t/2,n/2),l=Math.min(s[3]||0,t/2,n/2)),e.beginPath(),e.moveTo(o,0),a===h&&(e.lineTo((t-r)/2,0),e.lineTo(t/2,-1*i),e.lineTo((t+r)/2,0)),e.lineTo(t-d,0),e.arc(t-d,d,d,3*Math.PI/2,0,!1),a===_&&(e.lineTo(t,(n-i)/2),e.lineTo(t+r,n/2),e.lineTo(t,(n+i)/2)),e.lineTo(t,n-u),e.arc(t-u,n-u,u,0,Math.PI/2,!1),a===m&&(e.lineTo((t+r)/2,n),e.lineTo(t/2,n+i),e.lineTo((t-r)/2,n)),e.lineTo(l,n),e.arc(l,n-l,l,Math.PI/2,Math.PI,!1),a===f&&(e.lineTo(0,(n+i)/2),e.lineTo(-1*r,n/2),e.lineTo(0,(n-i)/2)),e.lineTo(0,o),e.arc(o,o,o,Math.PI,3*Math.PI/2,!1),e.closePath(),e.fillStrokeShape(this)},t.prototype.getSelfRect=function(){var e=0,t=0,n=this.pointerWidth(),a=this.pointerHeight(),r=this.pointerDirection(),i=this.width(),s=this.height();return r===h?(t-=a,s+=a):r===m?s+=a:r===f?(e-=1.5*n,i+=n):r===_&&(i+=1.5*n),{x:e,y:t,width:i,height:s}},t}(o.Shape);t.Tag=g,g.prototype.className="Tag",u._registerNode(g),s.Factory.addGetterSetter(g,"pointerDirection","none"),s.Factory.addGetterSetter(g,"pointerWidth",0,l.getNumberValidator()),s.Factory.addGetterSetter(g,"pointerHeight",0,l.getNumberValidator()),s.Factory.addGetterSetter(g,"cornerRadius",0,l.getNumberOrArrayOfNumbersValidator(4)),i.Collection.mapMethods(g)},7149:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var a=Array(e),r=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,o=i.length;s<o;s++,r++)a[r]=i[s];return a};Object.defineProperty(t,"__esModule",{value:!0});var s=n(8588),o=n(1455),d=n(7955),l=n(3774),u=n(4417),c=function(e){function t(t){var n=e.call(this,t)||this;return n.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")})),n}return r(t,e),t.prototype._sceneFunc=function(e){var t,n,a,r=this.points(),i=r.length,s=this.tension(),o=this.closed(),d=this.bezier();if(i){if(e.beginPath(),e.moveTo(r[0],r[1]),0!==s&&i>4){for(n=(t=this.getTensionPoints()).length,a=o?0:4,o||e.quadraticCurveTo(t[0],t[1],t[2],t[3]);a<n-2;)e.bezierCurveTo(t[a++],t[a++],t[a++],t[a++],t[a++],t[a++]);o||e.quadraticCurveTo(t[n-2],t[n-1],r[i-2],r[i-1])}else if(d)for(a=2;a<i;)e.bezierCurveTo(r[a++],r[a++],r[a++],r[a++],r[a++],r[a++]);else for(a=2;a<i;a+=2)e.lineTo(r[a],r[a+1]);o?(e.closePath(),e.fillStrokeShape(this)):e.strokeShape(this)}},t.prototype.getTensionPoints=function(){return this._getCache("tensionPoints",this._getTensionPoints)},t.prototype._getTensionPoints=function(){return this.closed()?this._getTensionPointsClosed():s.Util._expandPoints(this.points(),this.tension())},t.prototype._getTensionPointsClosed=function(){var e=this.points(),t=e.length,n=this.tension(),a=s.Util._getControlPoints(e[t-2],e[t-1],e[0],e[1],e[2],e[3],n),r=s.Util._getControlPoints(e[t-4],e[t-3],e[t-2],e[t-1],e[0],e[1],n),i=s.Util._expandPoints(e,n);return[a[2],a[3]].concat(i).concat([r[0],r[1],e[t-2],e[t-1],r[2],r[3],a[0],a[1],e[0],e[1]])},t.prototype.getWidth=function(){return this.getSelfRect().width},t.prototype.getHeight=function(){return this.getSelfRect().height},t.prototype.getSelfRect=function(){var e=this.points();if(e.length<4)return{x:e[0]||0,y:e[1]||0,width:0,height:0};for(var t,n,a=(e=0!==this.tension()?i([e[0],e[1]],this._getTensionPoints(),[e[e.length-2],e[e.length-1]]):this.points())[0],r=e[0],s=e[1],o=e[1],d=0;d<e.length/2;d++)t=e[2*d],n=e[2*d+1],a=Math.min(a,t),r=Math.max(r,t),s=Math.min(s,n),o=Math.max(o,n);return{x:a,y:s,width:r-a,height:o-s}},t}(d.Shape);t.Line=c,c.prototype.className="Line",c.prototype._attrsAffectingSize=["points","bezier","tension"],u._registerNode(c),o.Factory.addGetterSetter(c,"closed",!1),o.Factory.addGetterSetter(c,"bezier",!1),o.Factory.addGetterSetter(c,"tension",0,l.getNumberValidator()),o.Factory.addGetterSetter(c,"points",[],l.getNumberArrayValidator()),s.Collection.mapMethods(c)},7339:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),l=function(e){function t(n){var a=e.call(this,n)||this;a.dataArray=[],a.pathLength=0,a.dataArray=t.parsePathData(a.data()),a.pathLength=0;for(var r=0;r<a.dataArray.length;++r)a.pathLength+=a.dataArray[r].pathLength;return a.on("dataChange.konva",(function(){this.dataArray=t.parsePathData(this.data()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength})),a}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.dataArray;e.beginPath();for(var n=!1,a=0;a<t.length;a++){var r=t[a].command,i=t[a].points;switch(r){case"L":e.lineTo(i[0],i[1]);break;case"M":e.moveTo(i[0],i[1]);break;case"C":e.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case"Q":e.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case"A":var s=i[0],o=i[1],d=i[2],l=i[3],u=i[4],c=i[5],h=i[6],_=i[7],m=d>l?d:l,f=d>l?1:d/l,p=d>l?l/d:1;e.translate(s,o),e.rotate(h),e.scale(f,p),e.arc(0,0,m,u,u+c,1-_),e.scale(1/f,1/p),e.rotate(-h),e.translate(-s,-o);break;case"z":n=!0,e.closePath()}}n||this.hasFill()?e.fillStrokeShape(this):e.strokeShape(this)},t.prototype.getSelfRect=function(){var e=[];this.dataArray.forEach((function(n){if("A"===n.command){var a=n.points[4],r=n.points[5],i=n.points[4]+r,s=Math.PI/180;if(Math.abs(a-i)<s&&(s=Math.abs(a-i)),r<0)for(var o=a-s;o>i;o-=s){var d=t.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],o,0);e.push(d.x,d.y)}else for(o=a+s;o<i;o+=s)d=t.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],o,0),e.push(d.x,d.y)}else if("C"===n.command)for(o=0;o<=1;o+=.01)d=t.getPointOnCubicBezier(o,n.start.x,n.start.y,n.points[0],n.points[1],n.points[2],n.points[3],n.points[4],n.points[5]),e.push(d.x,d.y);else e=e.concat(n.points)}));for(var n,a,r=e[0],i=e[0],s=e[1],o=e[1],d=0;d<e.length/2;d++)n=e[2*d],a=e[2*d+1],isNaN(n)||(r=Math.min(r,n),i=Math.max(i,n)),isNaN(a)||(s=Math.min(s,a),o=Math.max(o,a));return{x:Math.round(r),y:Math.round(s),width:Math.round(i-r),height:Math.round(o-s)}},t.prototype.getLength=function(){return this.pathLength},t.prototype.getPointAtLength=function(e){var n,a=0,r=this.dataArray.length;if(!r)return null;for(;a<r&&e>this.dataArray[a].pathLength;)e-=this.dataArray[a].pathLength,++a;if(a===r)return{x:(n=this.dataArray[a-1].points.slice(-2))[0],y:n[1]};if(e<.01)return{x:(n=this.dataArray[a].points.slice(0,2))[0],y:n[1]};var i=this.dataArray[a],s=i.points;switch(i.command){case"L":return t.getPointOnLine(e,i.start.x,i.start.y,s[0],s[1]);case"C":return t.getPointOnCubicBezier(e/i.pathLength,i.start.x,i.start.y,s[0],s[1],s[2],s[3],s[4],s[5]);case"Q":return t.getPointOnQuadraticBezier(e/i.pathLength,i.start.x,i.start.y,s[0],s[1],s[2],s[3]);case"A":var o=s[0],d=s[1],l=s[2],u=s[3],c=s[4],h=s[5],_=s[6];return c+=h*e/i.pathLength,t.getPointOnEllipticalArc(o,d,l,u,c,_)}return null},t.getLineLength=function(e,t,n,a){return Math.sqrt((n-e)*(n-e)+(a-t)*(a-t))},t.getPointOnLine=function(e,t,n,a,r,i,s){void 0===i&&(i=t),void 0===s&&(s=n);var o=(r-n)/(a-t+1e-8),d=Math.sqrt(e*e/(1+o*o));a<t&&(d*=-1);var l,u=o*d;if(a===t)l={x:i,y:s+u};else if((s-n)/(i-t+1e-8)===o)l={x:i+d,y:s+u};else{var c,h,_=this.getLineLength(t,n,a,r);if(_<1e-8)return;var m=(i-t)*(a-t)+(s-n)*(r-n);c=t+(m/=_*_)*(a-t),h=n+m*(r-n);var f=this.getLineLength(i,s,c,h),p=Math.sqrt(e*e-f*f);d=Math.sqrt(p*p/(1+o*o)),a<t&&(d*=-1),l={x:c+d,y:h+(u=o*d)}}return l},t.getPointOnCubicBezier=function(e,t,n,a,r,i,s,o,d){function l(e){return e*e*e}function u(e){return 3*e*e*(1-e)}function c(e){return 3*e*(1-e)*(1-e)}function h(e){return(1-e)*(1-e)*(1-e)}return{x:o*l(e)+i*u(e)+a*c(e)+t*h(e),y:d*l(e)+s*u(e)+r*c(e)+n*h(e)}},t.getPointOnQuadraticBezier=function(e,t,n,a,r,i,s){function o(e){return e*e}function d(e){return 2*e*(1-e)}function l(e){return(1-e)*(1-e)}return{x:i*o(e)+a*d(e)+t*l(e),y:s*o(e)+r*d(e)+n*l(e)}},t.getPointOnEllipticalArc=function(e,t,n,a,r,i){var s=Math.cos(i),o=Math.sin(i),d=n*Math.cos(r),l=a*Math.sin(r);return{x:e+(d*s-l*o),y:t+(d*o+l*s)}},t.parsePathData=function(e){if(!e)return[];var t=e,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];t=t.replace(new RegExp(" ","g"),",");for(var a=0;a<n.length;a++)t=t.replace(new RegExp(n[a],"g"),"|"+n[a]);var r,i=t.split("|"),s=[],o=[],d=0,l=0,u=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(a=1;a<i.length;a++){var c=i[a],h=c.charAt(0);for(c=c.slice(1),o.length=0;r=u.exec(c);)o.push(r[0]);for(var _=[],m=0,f=o.length;m<f;m++){var p=parseFloat(o[m]);isNaN(p)?_.push(0):_.push(p)}for(;_.length>0&&!isNaN(_[0]);){var y,g,M,v,L,Y,b,k,w,D,S=null,T=[],x=d,P=l;switch(h){case"l":d+=_.shift(),l+=_.shift(),S="L",T.push(d,l);break;case"L":d=_.shift(),l=_.shift(),T.push(d,l);break;case"m":var H=_.shift(),C=_.shift();if(d+=H,l+=C,S="M",s.length>2&&"z"===s[s.length-1].command)for(var j=s.length-2;j>=0;j--)if("M"===s[j].command){d=s[j].points[0]+H,l=s[j].points[1]+C;break}T.push(d,l),h="l";break;case"M":d=_.shift(),l=_.shift(),S="M",T.push(d,l),h="L";break;case"h":d+=_.shift(),S="L",T.push(d,l);break;case"H":d=_.shift(),S="L",T.push(d,l);break;case"v":l+=_.shift(),S="L",T.push(d,l);break;case"V":l=_.shift(),S="L",T.push(d,l);break;case"C":T.push(_.shift(),_.shift(),_.shift(),_.shift()),d=_.shift(),l=_.shift(),T.push(d,l);break;case"c":T.push(d+_.shift(),l+_.shift(),d+_.shift(),l+_.shift()),d+=_.shift(),l+=_.shift(),S="C",T.push(d,l);break;case"S":g=d,M=l,"C"===(y=s[s.length-1]).command&&(g=d+(d-y.points[2]),M=l+(l-y.points[3])),T.push(g,M,_.shift(),_.shift()),d=_.shift(),l=_.shift(),S="C",T.push(d,l);break;case"s":g=d,M=l,"C"===(y=s[s.length-1]).command&&(g=d+(d-y.points[2]),M=l+(l-y.points[3])),T.push(g,M,d+_.shift(),l+_.shift()),d+=_.shift(),l+=_.shift(),S="C",T.push(d,l);break;case"Q":T.push(_.shift(),_.shift()),d=_.shift(),l=_.shift(),T.push(d,l);break;case"q":T.push(d+_.shift(),l+_.shift()),d+=_.shift(),l+=_.shift(),S="Q",T.push(d,l);break;case"T":g=d,M=l,"Q"===(y=s[s.length-1]).command&&(g=d+(d-y.points[0]),M=l+(l-y.points[1])),d=_.shift(),l=_.shift(),S="Q",T.push(g,M,d,l);break;case"t":g=d,M=l,"Q"===(y=s[s.length-1]).command&&(g=d+(d-y.points[0]),M=l+(l-y.points[1])),d+=_.shift(),l+=_.shift(),S="Q",T.push(g,M,d,l);break;case"A":v=_.shift(),L=_.shift(),Y=_.shift(),b=_.shift(),k=_.shift(),w=d,D=l,d=_.shift(),l=_.shift(),S="A",T=this.convertEndpointToCenterParameterization(w,D,d,l,b,k,v,L,Y);break;case"a":v=_.shift(),L=_.shift(),Y=_.shift(),b=_.shift(),k=_.shift(),w=d,D=l,d+=_.shift(),l+=_.shift(),S="A",T=this.convertEndpointToCenterParameterization(w,D,d,l,b,k,v,L,Y)}s.push({command:S||h,points:T,start:{x,y:P},pathLength:this.calcLength(x,P,S||h,T)})}"z"!==h&&"Z"!==h||s.push({command:"z",points:[],start:void 0,pathLength:0})}return s},t.calcLength=function(e,n,a,r){var i,s,o,d,l=t;switch(a){case"L":return l.getLineLength(e,n,r[0],r[1]);case"C":for(i=0,s=l.getPointOnCubicBezier(0,e,n,r[0],r[1],r[2],r[3],r[4],r[5]),d=.01;d<=1;d+=.01)o=l.getPointOnCubicBezier(d,e,n,r[0],r[1],r[2],r[3],r[4],r[5]),i+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;return i;case"Q":for(i=0,s=l.getPointOnQuadraticBezier(0,e,n,r[0],r[1],r[2],r[3]),d=.01;d<=1;d+=.01)o=l.getPointOnQuadraticBezier(d,e,n,r[0],r[1],r[2],r[3]),i+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;return i;case"A":i=0;var u=r[4],c=r[5],h=r[4]+c,_=Math.PI/180;if(Math.abs(u-h)<_&&(_=Math.abs(u-h)),s=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],u,0),c<0)for(d=u-_;d>h;d-=_)o=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],d,0),i+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;else for(d=u+_;d<h;d+=_)o=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],d,0),i+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;return o=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],h,0),i+l.getLineLength(s.x,s.y,o.x,o.y)}return 0},t.convertEndpointToCenterParameterization=function(e,t,n,a,r,i,s,o,d){var l=d*(Math.PI/180),u=Math.cos(l)*(e-n)/2+Math.sin(l)*(t-a)/2,c=-1*Math.sin(l)*(e-n)/2+Math.cos(l)*(t-a)/2,h=u*u/(s*s)+c*c/(o*o);h>1&&(s*=Math.sqrt(h),o*=Math.sqrt(h));var _=Math.sqrt((s*s*(o*o)-s*s*(c*c)-o*o*(u*u))/(s*s*(c*c)+o*o*(u*u)));r===i&&(_*=-1),isNaN(_)&&(_=0);var m=_*s*c/o,f=_*-o*u/s,p=(e+n)/2+Math.cos(l)*m-Math.sin(l)*f,y=(t+a)/2+Math.sin(l)*m+Math.cos(l)*f,g=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1])},M=function(e,t){return(e[0]*t[0]+e[1]*t[1])/(g(e)*g(t))},v=function(e,t){return(e[0]*t[1]<e[1]*t[0]?-1:1)*Math.acos(M(e,t))},L=v([1,0],[(u-m)/s,(c-f)/o]),Y=[(u-m)/s,(c-f)/o],b=[(-1*u-m)/s,(-1*c-f)/o],k=v(Y,b);return M(Y,b)<=-1&&(k=Math.PI),M(Y,b)>=1&&(k=0),0===i&&k>0&&(k-=2*Math.PI),1===i&&k<0&&(k+=2*Math.PI),[p,y,s,o,L,k,l,i]},t}(o.Shape);t.Path=l,l.prototype.className="Path",l.prototype._attrsAffectingSize=["data"],d._registerNode(l),s.Factory.addGetterSetter(l,"data"),i.Collection.mapMethods(l)},5244:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),l=n(3774),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.cornerRadius(),n=this.width(),a=this.height();if(e.beginPath(),t){var r=0,i=0,s=0,o=0;"number"==typeof t?r=i=s=o=Math.min(t,n/2,a/2):(r=Math.min(t[0]||0,n/2,a/2),i=Math.min(t[1]||0,n/2,a/2),o=Math.min(t[2]||0,n/2,a/2),s=Math.min(t[3]||0,n/2,a/2)),e.moveTo(r,0),e.lineTo(n-i,0),e.arc(n-i,i,i,3*Math.PI/2,0,!1),e.lineTo(n,a-o),e.arc(n-o,a-o,o,0,Math.PI/2,!1),e.lineTo(s,a),e.arc(s,a-s,s,Math.PI/2,Math.PI,!1),e.lineTo(0,r),e.arc(r,r,r,Math.PI,3*Math.PI/2,!1)}else e.rect(0,0,n,a);e.closePath(),e.fillStrokeShape(this)},t}(o.Shape);t.Rect=u,u.prototype.className="Rect",d._registerNode(u),s.Factory.addGetterSetter(u,"cornerRadius",0,l.getNumberOrArrayOfNumbersValidator(4)),i.Collection.mapMethods(u)},1785:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),l=n(4417),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){var t,n,a,r=this.sides(),i=this.radius();for(e.beginPath(),e.moveTo(0,0-i),t=1;t<r;t++)n=i*Math.sin(2*t*Math.PI/r),a=-1*i*Math.cos(2*t*Math.PI/r),e.lineTo(n,a);e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radius()},t.prototype.getHeight=function(){return 2*this.radius()},t.prototype.setWidth=function(e){this.radius(e/2)},t.prototype.setHeight=function(e){this.radius(e/2)},t}(o.Shape);t.RegularPolygon=u,u.prototype.className="RegularPolygon",u.prototype._centroid=!0,u.prototype._attrsAffectingSize=["radius"],l._registerNode(u),s.Factory.addGetterSetter(u,"radius",0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"sides",0,d.getNumberValidator()),i.Collection.mapMethods(u)},657:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),l=n(4417),u=2*Math.PI,c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){e.beginPath(),e.arc(0,0,this.innerRadius(),0,u,!1),e.moveTo(this.outerRadius(),0),e.arc(0,0,this.outerRadius(),u,0,!0),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.outerRadius()},t.prototype.getHeight=function(){return 2*this.outerRadius()},t.prototype.setWidth=function(e){this.outerRadius(e/2)},t.prototype.setHeight=function(e){this.outerRadius(e/2)},t}(o.Shape);t.Ring=c,c.prototype.className="Ring",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l._registerNode(c),s.Factory.addGetterSetter(c,"innerRadius",0,d.getNumberValidator()),s.Factory.addGetterSetter(c,"outerRadius",0,d.getNumberValidator()),i.Collection.mapMethods(c)},8986:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(6745),l=n(3774),u=n(4417),c=function(e){function t(t){var n=e.call(this,t)||this;return n._updated=!0,n.anim=new d.Animation((function(){var e=n._updated;return n._updated=!1,e})),n.on("animationChange.konva",(function(){this.frameIndex(0)})),n.on("frameIndexChange.konva",(function(){this._updated=!0})),n.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())})),n}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.animation(),n=this.frameIndex(),a=4*n,r=this.animations()[t],i=this.frameOffsets(),s=r[a+0],o=r[a+1],d=r[a+2],l=r[a+3],u=this.image();if((this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,d,l),e.closePath(),e.fillStrokeShape(this)),u)if(i){var c=i[t],h=2*n;e.drawImage(u,s,o,d,l,c[h+0],c[h+1],d,l)}else e.drawImage(u,s,o,d,l,0,0,d,l)},t.prototype._hitFunc=function(e){var t=this.animation(),n=this.frameIndex(),a=4*n,r=this.animations()[t],i=this.frameOffsets(),s=r[a+2],o=r[a+3];if(e.beginPath(),i){var d=i[t],l=2*n;e.rect(d[l+0],d[l+1],s,o)}else e.rect(0,0,s,o);e.closePath(),e.fillShape(this)},t.prototype._useBufferCanvas=function(){return e.prototype._useBufferCanvas.call(this,!0)},t.prototype._setInterval=function(){var e=this;this.interval=setInterval((function(){e._updateIndex()}),1e3/this.frameRate())},t.prototype.start=function(){if(!this.isRunning()){var e=this.getLayer();this.anim.setLayers(e),this._setInterval(),this.anim.start()}},t.prototype.stop=function(){this.anim.stop(),clearInterval(this.interval)},t.prototype.isRunning=function(){return this.anim.isRunning()},t.prototype._updateIndex=function(){var e=this.frameIndex(),t=this.animation();e<this.animations()[t].length/4-1?this.frameIndex(e+1):this.frameIndex(0)},t}(o.Shape);t.Sprite=c,c.prototype.className="Sprite",u._registerNode(c),s.Factory.addGetterSetter(c,"animation"),s.Factory.addGetterSetter(c,"animations"),s.Factory.addGetterSetter(c,"frameOffsets"),s.Factory.addGetterSetter(c,"image"),s.Factory.addGetterSetter(c,"frameIndex",0,l.getNumberValidator()),s.Factory.addGetterSetter(c,"frameRate",17,l.getNumberValidator()),s.Factory.backCompat(c,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),i.Collection.mapMethods(c)},1964:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),l=n(4417),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.innerRadius(),n=this.outerRadius(),a=this.numPoints();e.beginPath(),e.moveTo(0,0-n);for(var r=1;r<2*a;r++){var i=r%2==0?n:t,s=i*Math.sin(r*Math.PI/a),o=-1*i*Math.cos(r*Math.PI/a);e.lineTo(s,o)}e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.outerRadius()},t.prototype.getHeight=function(){return 2*this.outerRadius()},t.prototype.setWidth=function(e){this.outerRadius(e/2)},t.prototype.setHeight=function(e){this.outerRadius(e/2)},t}(o.Shape);t.Star=u,u.prototype.className="Star",u.prototype._centroid=!0,u.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l._registerNode(u),s.Factory.addGetterSetter(u,"numPoints",5,d.getNumberValidator()),s.Factory.addGetterSetter(u,"innerRadius",0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"outerRadius",0,d.getNumberValidator()),i.Collection.mapMethods(u)},3787:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),l=n(3774),u=n(4417);function c(e){return Array.from(e)}t.stringToArray=c;var h,_="auto",m="justify",f="left",p="middle",y="normal",g=" ",M="…",v=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],L=v.length;function Y(){return h||(h=i.Util.createCanvasElement().getContext("2d"))}var b=function(e){function t(t){var n=e.call(this,function(e){return(e=e||{}).fillLinearGradientColorStops||e.fillRadialGradientColorStops||e.fillPatternImage||(e.fill=e.fill||"black"),e}(t))||this;n._partialTextX=0,n._partialTextY=0;for(var a=0;a<L;a++)n.on(v[a]+"Change.konva",n._setTextData);return n._setTextData(),n}return r(t,e),t.prototype._sceneFunc=function(e){var t=this.textArr,n=t.length;if(this.text()){var a,r=this.padding(),i=this.fontSize(),s=this.lineHeight()*i,o=this.verticalAlign(),d=0,l=this.align(),u=this.getWidth(),h=this.letterSpacing(),_=this.fill(),y=this.textDecoration(),g=-1!==y.indexOf("underline"),M=-1!==y.indexOf("line-through"),v=0,L=(v=s/2,0),Y=0;for(e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",p),e.setAttr("textAlign",f),o===p?d=(this.getHeight()-n*s-2*r)/2:"bottom"===o&&(d=this.getHeight()-n*s-2*r),e.translate(r,d+r),a=0;a<n;a++){L=0,Y=0;var b,k,w,D=t[a],S=D.text,T=D.width,x=a!==n-1;if(e.save(),"right"===l?L+=u-T-2*r:"center"===l&&(L+=(u-T-2*r)/2),g&&(e.save(),e.beginPath(),e.moveTo(L,v+Y+Math.round(i/2)),k=0==(b=S.split(" ").length-1),w=l===m&&x&&!k?u-2*r:T,e.lineTo(L+Math.round(w),v+Y+Math.round(i/2)),e.lineWidth=i/15,e.strokeStyle=_,e.stroke(),e.restore()),M&&(e.save(),e.beginPath(),e.moveTo(L,v+Y),k=0==(b=S.split(" ").length-1),w=l===m&&x&&!k?u-2*r:T,e.lineTo(L+Math.round(w),v+Y),e.lineWidth=i/15,e.strokeStyle=_,e.stroke(),e.restore()),0!==h||l===m){b=S.split(" ").length-1;for(var P=c(S),H=0;H<P.length;H++){var C=P[H];" "===C&&a!==n-1&&l===m&&(L+=(u-2*r-T)/b),this._partialTextX=L,this._partialTextY=v+Y,this._partialText=C,e.fillStrokeShape(this),L+=this.measureSize(C).width+h}}else this._partialTextX=L,this._partialTextY=v+Y,this._partialText=S,e.fillStrokeShape(this);e.restore(),n>1&&(v+=s)}}},t.prototype._hitFunc=function(e){var t=this.getWidth(),n=this.getHeight();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)},t.prototype.setText=function(e){var t=i.Util._isString(e)?e:null==e?"":e+"";return this._setAttr("text",t),this},t.prototype.getWidth=function(){return this.attrs.width===_||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width},t.prototype.getHeight=function(){return this.attrs.height===_||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height},t.prototype.getTextWidth=function(){return this.textWidth},t.prototype.getTextHeight=function(){return i.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},t.prototype.measureSize=function(e){var t,n=Y(),a=this.fontSize();return n.save(),n.font=this._getContextFont(),t=n.measureText(e),n.restore(),{width:t.width,height:a}},t.prototype._getContextFont=function(){return d.Konva.UA.isIE?this.fontStyle()+g+this.fontSize()+"px "+this.fontFamily():this.fontStyle()+g+this.fontVariant()+g+(this.fontSize()+"px ")+this.fontFamily().split(",").map((function(e){var t=(e=e.trim()).indexOf(" ")>=0,n=e.indexOf('"')>=0||e.indexOf("'")>=0;return t&&!n&&(e='"'+e+'"'),e})).join(", ")},t.prototype._addTextLine=function(e){this.align()===m&&(e=e.trim());var t=this._getTextWidth(e);return this.textArr.push({text:e,width:t})},t.prototype._getTextWidth=function(e){var t=this.letterSpacing(),n=e.length;return Y().measureText(e).width+(n?t*(n-1):0)},t.prototype._setTextData=function(){var e=this.text().split("\n"),t=+this.fontSize(),n=0,a=this.lineHeight()*t,r=this.attrs.width,i=this.attrs.height,s=r!==_&&void 0!==r,o=i!==_&&void 0!==i,d=this.padding(),l=r-2*d,u=i-2*d,c=0,h=this.wrap(),m="none"!==h,f="char"!==h&&m,p=this.ellipsis();this.textArr=[],Y().font=this._getContextFont();for(var y=p?this._getTextWidth(M):0,v=0,L=e.length;v<L;++v){var b=e[v],k=this._getTextWidth(b);if(s&&k>l)for(;b.length>0;){for(var w=0,D=b.length,S="",T=0;w<D;){var x=w+D>>>1,P=b.slice(0,x+1),H=this._getTextWidth(P)+y;H<=l?(w=x+1,S=P+(p?M:""),T=H):D=x}if(!S)break;if(f){var C,j=b[S.length];(C=(j===g||"-"===j)&&T<=l?S.length:Math.max(S.lastIndexOf(g),S.lastIndexOf("-"))+1)>0&&(w=C,S=S.slice(0,w),T=this._getTextWidth(S))}if(S=S.trimRight(),this._addTextLine(S),n=Math.max(n,T),c+=a,!m||o&&c+a>u){var O=this.textArr[this.textArr.length-1];O&&p&&(this._getTextWidth(O.text+M)<l||(O.text=O.text.slice(0,O.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(O.text+M));break}if((b=(b=b.slice(w)).trimLeft()).length>0&&(k=this._getTextWidth(b))<=l){this._addTextLine(b),c+=a,n=Math.max(n,k);break}}else this._addTextLine(b),c+=a,n=Math.max(n,k);if(o&&c+a>u)break}this.textHeight=t,this.textWidth=n},t.prototype.getStrokeScaleEnabled=function(){return!0},t}(o.Shape);t.Text=b,b.prototype._fillFunc=function(e){e.fillText(this._partialText,this._partialTextX,this._partialTextY)},b.prototype._strokeFunc=function(e){e.strokeText(this._partialText,this._partialTextX,this._partialTextY)},b.prototype.className="Text",b.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight"],u._registerNode(b),s.Factory.overWriteSetter(b,"width",l.getNumberOrAutoValidator()),s.Factory.overWriteSetter(b,"height",l.getNumberOrAutoValidator()),s.Factory.addGetterSetter(b,"fontFamily","Arial"),s.Factory.addGetterSetter(b,"fontSize",12,l.getNumberValidator()),s.Factory.addGetterSetter(b,"fontStyle",y),s.Factory.addGetterSetter(b,"fontVariant",y),s.Factory.addGetterSetter(b,"padding",0,l.getNumberValidator()),s.Factory.addGetterSetter(b,"align",f),s.Factory.addGetterSetter(b,"verticalAlign","top"),s.Factory.addGetterSetter(b,"lineHeight",1,l.getNumberValidator()),s.Factory.addGetterSetter(b,"wrap","word"),s.Factory.addGetterSetter(b,"ellipsis",!1,l.getBooleanValidator()),s.Factory.addGetterSetter(b,"letterSpacing",0,l.getNumberValidator()),s.Factory.addGetterSetter(b,"text","",l.getStringValidator()),s.Factory.addGetterSetter(b,"textDecoration",""),i.Collection.mapMethods(b)},2831:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(7339),l=n(3787),u=n(3774),c=n(4417),h="normal";function _(e){e.fillText(this.partialText,0,0)}function m(e){e.strokeText(this.partialText,0,0)}var f=function(e){function t(t){var n=e.call(this,t)||this;return n.dummyCanvas=i.Util.createCanvasElement(),n.dataArray=[],n.dataArray=d.Path.parsePathData(n.attrs.data),n.on("dataChange.konva",(function(){this.dataArray=d.Path.parsePathData(this.attrs.data),this._setTextData()})),n.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",n._setTextData),t&&t.getKerning&&(i.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),n.kerningFunc(t.getKerning)),n._setTextData(),n}return r(t,e),t.prototype._sceneFunc=function(e){e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",this.textBaseline()),e.setAttr("textAlign","left"),e.save();var t=this.textDecoration(),n=this.fill(),a=this.fontSize(),r=this.glyphInfo;"underline"===t&&e.beginPath();for(var i=0;i<r.length;i++){e.save();var s=r[i].p0;e.translate(s.x,s.y),e.rotate(r[i].rotation),this.partialText=r[i].text,e.fillStrokeShape(this),"underline"===t&&(0===i&&e.moveTo(0,a/2+1),e.lineTo(a,a/2+1)),e.restore()}"underline"===t&&(e.strokeStyle=n,e.lineWidth=a/20,e.stroke()),e.restore()},t.prototype._hitFunc=function(e){e.beginPath();var t=this.glyphInfo;if(t.length>=1){var n=t[0].p0;e.moveTo(n.x,n.y)}for(var a=0;a<t.length;a++){var r=t[a].p1;e.lineTo(r.x,r.y)}e.setAttr("lineWidth",this.fontSize()),e.setAttr("strokeStyle",this.colorKey),e.stroke()},t.prototype.getTextWidth=function(){return this.textWidth},t.prototype.getTextHeight=function(){return i.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},t.prototype.setText=function(e){return l.Text.prototype.setText.call(this,e)},t.prototype._getContextFont=function(){return l.Text.prototype._getContextFont.call(this)},t.prototype._getTextSize=function(e){var t=this.dummyCanvas.getContext("2d");t.save(),t.font=this._getContextFont();var n=t.measureText(e);return t.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}},t.prototype._setTextData=function(){var e=this,t=this._getTextSize(this.attrs.text),n=this.letterSpacing(),a=this.align(),r=this.kerningFunc();this.textWidth=t.width,this.textHeight=t.height;var i=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var s=0,o=0;o<e.dataArray.length;o++)e.dataArray[o].pathLength>0&&(s+=e.dataArray[o].pathLength);var u=0;"center"===a&&(u=Math.max(0,s/2-i/2)),"right"===a&&(u=Math.max(0,s-i));for(var c,h,_,m=l.stringToArray(this.text()),f=this.text().split(" ").length-1,p=-1,y=0,g=function(){y=0;for(var t=e.dataArray,n=p+1;n<t.length;n++){if(t[n].pathLength>0)return p=n,t[n];"M"===t[n].command&&(c={x:t[n].points[0],y:t[n].points[1]})}return{}},M=function(t){var r=e._getTextSize(t).width+n;" "===t&&"justify"===a&&(r+=(s-i)/f);var o=0,l=0;for(h=void 0;Math.abs(r-o)/r>.01&&l<50;){l++;for(var u=o;void 0===_;)(_=g())&&u+_.pathLength<r&&(u+=_.pathLength,_=void 0);if(_==={}||void 0===c)return;var m=!1;switch(_.command){case"L":d.Path.getLineLength(c.x,c.y,_.points[0],_.points[1])>r?h=d.Path.getPointOnLine(r,c.x,c.y,_.points[0],_.points[1],c.x,c.y):_=void 0;break;case"A":var p=_.points[4],M=_.points[5],v=_.points[4]+M;0===y?y=p+1e-8:r>o?y+=Math.PI/180*M/Math.abs(M):y-=Math.PI/360*M/Math.abs(M),(M<0&&y<v||M>=0&&y>v)&&(y=v,m=!0),h=d.Path.getPointOnEllipticalArc(_.points[0],_.points[1],_.points[2],_.points[3],y,_.points[6]);break;case"C":0===y?y=r>_.pathLength?1e-8:r/_.pathLength:r>o?y+=(r-o)/_.pathLength:y-=(o-r)/_.pathLength,y>1&&(y=1,m=!0),h=d.Path.getPointOnCubicBezier(y,_.start.x,_.start.y,_.points[0],_.points[1],_.points[2],_.points[3],_.points[4],_.points[5]);break;case"Q":0===y?y=r/_.pathLength:r>o?y+=(r-o)/_.pathLength:y-=(o-r)/_.pathLength,y>1&&(y=1,m=!0),h=d.Path.getPointOnQuadraticBezier(y,_.start.x,_.start.y,_.points[0],_.points[1],_.points[2],_.points[3])}void 0!==h&&(o=d.Path.getLineLength(c.x,c.y,h.x,h.y)),m&&(m=!1,_=void 0)}},v=u/(e._getTextSize("C").width+n)-1,L=0;L<v&&(M("C"),void 0!==c&&void 0!==h);L++)c=h;for(var Y=0;Y<m.length&&(M(m[Y]),void 0!==c&&void 0!==h);Y++){var b=d.Path.getLineLength(c.x,c.y,h.x,h.y),k=0;if(r)try{k=r(m[Y-1],m[Y])*this.fontSize()}catch(e){k=0}c.x+=k,h.x+=k,this.textWidth+=k;var w=d.Path.getPointOnLine(k+b/2,c.x,c.y,h.x,h.y),D=Math.atan2(h.y-c.y,h.x-c.x);this.glyphInfo.push({transposeX:w.x,transposeY:w.y,text:m[Y],rotation:D,p0:c,p1:h}),c=h}},t.prototype.getSelfRect=function(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var e=[];this.glyphInfo.forEach((function(t){e.push(t.p0.x),e.push(t.p0.y),e.push(t.p1.x),e.push(t.p1.y)}));for(var t,n,a=e[0]||0,r=e[0]||0,i=e[1]||0,s=e[1]||0,o=0;o<e.length/2;o++)t=e[2*o],n=e[2*o+1],a=Math.min(a,t),r=Math.max(r,t),i=Math.min(i,n),s=Math.max(s,n);var d=this.fontSize();return{x:a-d/2,y:i-d/2,width:r-a+d,height:s-i+d}},t}(o.Shape);t.TextPath=f,f.prototype._fillFunc=_,f.prototype._strokeFunc=m,f.prototype._fillFuncHit=_,f.prototype._strokeFuncHit=m,f.prototype.className="TextPath",f.prototype._attrsAffectingSize=["text","fontSize","data"],c._registerNode(f),s.Factory.addGetterSetter(f,"data"),s.Factory.addGetterSetter(f,"fontFamily","Arial"),s.Factory.addGetterSetter(f,"fontSize",12,u.getNumberValidator()),s.Factory.addGetterSetter(f,"fontStyle",h),s.Factory.addGetterSetter(f,"align","left"),s.Factory.addGetterSetter(f,"letterSpacing",0,u.getNumberValidator()),s.Factory.addGetterSetter(f,"textBaseline","middle"),s.Factory.addGetterSetter(f,"fontVariant",h),s.Factory.addGetterSetter(f,"text",""),s.Factory.addGetterSetter(f,"textDecoration",null),s.Factory.addGetterSetter(f,"kerningFunc",null),i.Collection.mapMethods(f)},9516:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=n(8588),o=n(1455),d=n(7939),l=n(7955),u=n(5244),c=n(8985),h=n(4417),_=n(3774),m=n(4417),f=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((function(e){return e+".tr-konva"})).join(" "),p="nodesRect",y=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((function(e){return e+".tr-konva"})).join(" "),g={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135},M="ontouchstart"in h.Konva._global,v=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function L(e,t,n){var a=n.x+(e.x-n.x)*Math.cos(t)-(e.y-n.y)*Math.sin(t),r=n.y+(e.x-n.x)*Math.sin(t)+(e.y-n.y)*Math.cos(t);return i(i({},e),{rotation:e.rotation+t,x:a,y:r})}var Y=function(e){function t(t){var n=e.call(this,t)||this;return n._transforming=!1,n._createElements(),n._handleMouseMove=n._handleMouseMove.bind(n),n._handleMouseUp=n._handleMouseUp.bind(n),n.update=n.update.bind(n),n.on(f,n.update),n.getNode()&&n.update(),n}return r(t,e),t.prototype.attachTo=function(e){return this.setNode(e),this},t.prototype.setNode=function(e){return s.Util.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([e])},t.prototype.getNode=function(){return this._nodes&&this._nodes[0]},t.prototype.setNodes=function(e){var t=this;return void 0===e&&(e=[]),this._nodes&&this._nodes.length&&this.detach(),this._nodes=e,1===e.length?this.rotation(e[0].rotation()):this.rotation(0),this._nodes.forEach((function(e){var n=e._attrsAffectingSize.map((function(e){return e+"Change.tr-konva"})).join(" "),a=function(){1===t.nodes().length&&t.rotation(t.nodes()[0].rotation()),t._resetTransformCache(),t._transforming||t.isDragging()||t.update()};e.on(n,a),e.on(y,a),e.on("_clearTransformCache.tr-konva",a),e.on("xChange.tr-konva yChange.tr-konva",a),t._proxyDrag(e)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this},t.prototype._proxyDrag=function(e){var t,n=this;e.on("dragstart.tr-konva",(function(a){t=e.getAbsolutePosition(),n.isDragging()||e===n.findOne(".back")||n.startDrag(a,!1)})),e.on("dragmove.tr-konva",(function(a){if(t){var r=e.getAbsolutePosition(),i=r.x-t.x,s=r.y-t.y;n.nodes().forEach((function(t){if(t!==e&&!t.isDragging()){var n=t.getAbsolutePosition();t.setAbsolutePosition({x:n.x+i,y:n.y+s}),t.startDrag(a)}})),t=null}}))},t.prototype.getNodes=function(){return this._nodes||[]},t.prototype.getActiveAnchor=function(){return this._movingAnchorName},t.prototype.detach=function(){this._nodes&&this._nodes.forEach((function(e){e.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()},t.prototype._resetTransformCache=function(){this._clearCache(p),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},t.prototype._getNodeRect=function(){return this._getCache(p,this.__getNodeRect)},t.prototype.__getNodeShape=function(e,t,n){void 0===t&&(t=this.rotation());var a=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),r=e.getAbsoluteScale(n),i=e.getAbsolutePosition(n),s=a.x*r.x-e.offsetX()*r.x,o=a.y*r.y-e.offsetY()*r.y,d=(h.Konva.getAngle(e.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return L({x:i.x+s*Math.cos(d)+o*Math.sin(-d),y:i.y+o*Math.cos(d)+s*Math.sin(d),width:a.width*r.x,height:a.height*r.y,rotation:d},-h.Konva.getAngle(t),{x:0,y:0})},t.prototype.__getNodeRect=function(){var e=this;if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};var t=[];this.nodes().map((function(n){var a=n.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:e.ignoreStroke()}),r=[{x:a.x,y:a.y},{x:a.x+a.width,y:a.y},{x:a.x+a.width,y:a.y+a.height},{x:a.x,y:a.y+a.height}],i=n.getAbsoluteTransform();r.forEach((function(e){var n=i.point(e);t.push(n)}))}));var n,a,r,i,o=new s.Transform;o.rotate(-h.Konva.getAngle(this.rotation())),t.forEach((function(e){var t=o.point(e);void 0===n&&(n=r=t.x,a=i=t.y),n=Math.min(n,t.x),a=Math.min(a,t.y),r=Math.max(r,t.x),i=Math.max(i,t.y)})),o.invert();var d=o.point({x:n,y:a});return{x:d.x,y:d.y,width:r-n,height:i-a,rotation:h.Konva.getAngle(this.rotation())}},t.prototype.getX=function(){return this._getNodeRect().x},t.prototype.getY=function(){return this._getNodeRect().y},t.prototype.getWidth=function(){return this._getNodeRect().width},t.prototype.getHeight=function(){return this._getNodeRect().height},t.prototype._createElements=function(){this._createBack(),v.forEach(function(e){this._createAnchor(e)}.bind(this)),this._createAnchor("rotater")},t.prototype._createAnchor=function(e){var t=this,n=new u.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:e+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:M?10:"auto"}),a=this;n.on("mousedown touchstart",(function(e){a._handleMouseDown(e)})),n.on("dragstart",(function(e){n.stopDrag(),e.cancelBubble=!0})),n.on("dragend",(function(e){e.cancelBubble=!0})),n.on("mouseenter",(function(){var a=h.Konva.getAngle(t.rotation()),r=function(e,t){if("rotater"===e)return"crosshair";t+=s.Util._degToRad(g[e]||0);var n=(s.Util._radToDeg(t)%360+360)%360;return s.Util._inRange(n,337.5,360)||s.Util._inRange(n,0,22.5)?"ns-resize":s.Util._inRange(n,22.5,67.5)?"nesw-resize":s.Util._inRange(n,67.5,112.5)?"ew-resize":s.Util._inRange(n,112.5,157.5)?"nwse-resize":s.Util._inRange(n,157.5,202.5)?"ns-resize":s.Util._inRange(n,202.5,247.5)?"nesw-resize":s.Util._inRange(n,247.5,292.5)?"ew-resize":s.Util._inRange(n,292.5,337.5)?"nwse-resize":(s.Util.error("Transformer has unknown angle for cursor detection: "+n),"pointer")}(e,a);n.getStage().content.style.cursor=r,t._cursorChange=!0})),n.on("mouseout",(function(){n.getStage().content.style.cursor="",t._cursorChange=!1})),this.add(n)},t.prototype._createBack=function(){var e=this,t=new l.Shape({name:"back",width:0,height:0,draggable:!0,sceneFunc:function(e){var t=this.getParent(),n=t.padding();e.beginPath(),e.rect(-n,-n,this.width()+2*n,this.height()+2*n),e.moveTo(this.width()/2,-n),t.rotateEnabled()&&e.lineTo(this.width()/2,-t.rotateAnchorOffset()*s.Util._sign(this.height())-n),e.fillStrokeShape(this)},hitFunc:function(t,n){if(e.shouldOverdrawWholeArea()){var a=e.padding();t.beginPath(),t.rect(-a,-a,n.width()+2*a,n.height()+2*a),t.fillStrokeShape(n)}}});this.add(t),this._proxyDrag(t),t.on("dragstart",(function(e){e.cancelBubble=!0})),t.on("dragmove",(function(e){e.cancelBubble=!0})),t.on("dragend",(function(e){e.cancelBubble=!0}))},t.prototype._handleMouseDown=function(e){this._movingAnchorName=e.target.name().split(" ")[0];var t=this._getNodeRect(),n=t.width,a=t.height,r=Math.sqrt(Math.pow(n,2)+Math.pow(a,2));this.sin=Math.abs(a/r),this.cos=Math.abs(n/r),window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0;var i=e.target.getAbsolutePosition(),s=e.target.getStage().getPointerPosition();this._anchorDragOffset={x:s.x-i.x,y:s.y-i.y},this._fire("transformstart",{evt:e,target:this.getNode()}),this.getNode()._fire("transformstart",{evt:e,target:this.getNode()})},t.prototype._handleMouseMove=function(e){var t,n,a,r=this.findOne("."+this._movingAnchorName),i=r.getStage();i.setPointersPositions(e);var s=i.getPointerPosition(),o={x:s.x-this._anchorDragOffset.x,y:s.y-this._anchorDragOffset.y},d=r.getAbsolutePosition();r.setAbsolutePosition(o);var l=r.getAbsolutePosition();if(d.x!==l.x||d.y!==l.y)if("rotater"!==this._movingAnchorName){var u=this.keepRatio()||e.shiftKey,c=this.centeredScaling()||e.altKey;if("top-left"===this._movingAnchorName){if(u){var _=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};a=Math.sqrt(Math.pow(_.x-r.x(),2)+Math.pow(_.y-r.y(),2));var m=this.findOne(".top-left").x()>_.x?-1:1,f=this.findOne(".top-left").y()>_.y?-1:1;t=a*this.cos*m,n=a*this.sin*f,this.findOne(".top-left").x(_.x-t),this.findOne(".top-left").y(_.y-n)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(r.y());else if("top-right"===this._movingAnchorName){u&&(_=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()},a=Math.sqrt(Math.pow(r.x()-_.x,2)+Math.pow(_.y-r.y(),2)),m=this.findOne(".top-right").x()<_.x?-1:1,f=this.findOne(".top-right").y()>_.y?-1:1,t=a*this.cos*m,n=a*this.sin*f,this.findOne(".top-right").x(_.x+t),this.findOne(".top-right").y(_.y-n));var p=r.position();this.findOne(".top-left").y(p.y),this.findOne(".bottom-right").x(p.x)}else"middle-left"===this._movingAnchorName?this.findOne(".top-left").x(r.x()):"middle-right"===this._movingAnchorName?this.findOne(".bottom-right").x(r.x()):"bottom-left"===this._movingAnchorName?(u&&(_=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()},a=Math.sqrt(Math.pow(_.x-r.x(),2)+Math.pow(r.y()-_.y,2)),m=_.x<r.x()?-1:1,f=r.y()<_.y?-1:1,t=a*this.cos*m,n=a*this.sin*f,r.x(_.x-t),r.y(_.y+n)),p=r.position(),this.findOne(".top-left").x(p.x),this.findOne(".bottom-right").y(p.y)):"bottom-center"===this._movingAnchorName?this.findOne(".bottom-right").y(r.y()):"bottom-right"===this._movingAnchorName?u&&(_=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()},a=Math.sqrt(Math.pow(r.x()-_.x,2)+Math.pow(r.y()-_.y,2)),m=this.findOne(".bottom-right").x()<_.x?-1:1,f=this.findOne(".bottom-right").y()<_.y?-1:1,t=a*this.cos*m,n=a*this.sin*f,this.findOne(".bottom-right").x(_.x+t),this.findOne(".bottom-right").y(_.y+n)):console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(c=this.centeredScaling()||e.altKey){var y=this.findOne(".top-left"),g=this.findOne(".bottom-right"),M=y.x(),v=y.y(),Y=this.getWidth()-g.x(),b=this.getHeight()-g.y();g.move({x:-M,y:-v}),y.move({x:Y,y:b})}var k=this.findOne(".top-left").getAbsolutePosition();t=k.x,n=k.y;var w=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),D=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:t,y:n,width:w,height:D,rotation:h.Konva.getAngle(this.rotation())},e)}else{var S=this._getNodeRect();t=r.x()-S.width/2,n=-r.y()+S.height/2;var T=Math.atan2(-n,t)+Math.PI/2;S.height<0&&(T-=Math.PI);var x=h.Konva.getAngle(this.rotation())+T,P=h.Konva.getAngle(this.rotationSnapTolerance()),H=function(e,t){return L(e,t,function(e){return{x:e.x+e.width/2*Math.cos(e.rotation)+e.height/2*Math.sin(-e.rotation),y:e.y+e.height/2*Math.cos(e.rotation)+e.width/2*Math.sin(e.rotation)}}(e))}(S,function(e,t,n){for(var a=t,r=0;r<e.length;r++){var i=h.Konva.getAngle(e[r]),s=Math.abs(i-t)%(2*Math.PI);Math.min(s,2*Math.PI-s)<n&&(a=i)}return a}(this.rotationSnaps(),x,P)-S.rotation);this._fitNodesInto(H,e)}},t.prototype._handleMouseUp=function(e){this._removeEvents(e)},t.prototype.getAbsoluteTransform=function(){return this.getTransform()},t.prototype._removeEvents=function(e){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0);var t=this.getNode();this._fire("transformend",{evt:e,target:t}),t&&t.fire("transformend",{evt:e,target:t}),this._movingAnchorName=null}},t.prototype._fitNodesInto=function(e,t){var n=this,a=this._getNodeRect();if(s.Util._inRange(e.width,2*-this.padding()-1,1))this.update();else if(s.Util._inRange(e.height,2*-this.padding()-1,1))this.update();else{var r=new s.Transform;if(r.rotate(h.Konva.getAngle(this.rotation())),this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("left")>=0){var i=r.point({x:2*-this.padding(),y:0});e.x+=i.x,e.y+=i.y,e.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y}else this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("right")>=0&&(i=r.point({x:2*this.padding(),y:0}),this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y,e.width+=2*this.padding());if(this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("top")>=0?(i=r.point({x:0,y:2*-this.padding()}),e.x+=i.x,e.y+=i.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y,e.height+=2*this.padding()):this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("bottom")>=0&&(i=r.point({x:0,y:2*this.padding()}),this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y,e.height+=2*this.padding()),this.boundBoxFunc()){var o=this.boundBoxFunc()(a,e);o?e=o:s.Util.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}var d=1e7,l=new s.Transform;l.translate(a.x,a.y),l.rotate(a.rotation),l.scale(a.width/d,a.height/d);var u=new s.Transform;u.translate(e.x,e.y),u.rotate(e.rotation),u.scale(e.width/d,e.height/d);var c=u.multiply(l.invert());this._nodes.forEach((function(e){var a=e.getParent().getAbsoluteTransform(),r=e.getTransform().copy();r.translate(e.offsetX(),e.offsetY());var i=new s.Transform;i.multiply(a.copy().invert()).multiply(c).multiply(a).multiply(r);var o=i.decompose();e.setAttrs(o),n._fire("transform",{evt:t,target:e}),e._fire("transform",{evt:t,target:e})})),this.rotation(s.Util._getRotation(e.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}},t.prototype.forceUpdate=function(){this._resetTransformCache(),this.update()},t.prototype._batchChangeChild=function(e,t){this.findOne(e).setAttrs(t)},t.prototype.update=function(){var e=this,t=this._getNodeRect();this.rotation(s.Util._getRotation(t.rotation));var n=t.width,a=t.height,r=this.enabledAnchors(),i=this.resizeEnabled(),o=this.padding(),d=this.anchorSize();this.find("._anchor").each((function(t){t.setAttrs({width:d,height:d,offsetX:d/2,offsetY:d/2,stroke:e.anchorStroke(),strokeWidth:e.anchorStrokeWidth(),fill:e.anchorFill(),cornerRadius:e.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:d/2+o,offsetY:d/2+o,visible:i&&r.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:n/2,y:0,offsetY:d/2+o,visible:i&&r.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:n,y:0,offsetX:d/2-o,offsetY:d/2+o,visible:i&&r.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:a/2,offsetX:d/2+o,visible:i&&r.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:n,y:a/2,offsetX:d/2-o,visible:i&&r.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:a,offsetX:d/2+o,offsetY:d/2-o,visible:i&&r.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:n/2,y:a,offsetY:d/2-o,visible:i&&r.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:n,y:a,offsetX:d/2-o,offsetY:d/2-o,visible:i&&r.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:n/2,y:-this.rotateAnchorOffset()*s.Util._sign(a)-o,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:n,height:a,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0})},t.prototype.isTransforming=function(){return this._transforming},t.prototype.stopTransform=function(){if(this._transforming){this._removeEvents();var e=this.findOne("."+this._movingAnchorName);e&&e.stopDrag()}},t.prototype.destroy=function(){return this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),c.Group.prototype.destroy.call(this),this.detach(),this._removeEvents(),this},t.prototype.toObject=function(){return d.Node.prototype.toObject.call(this)},t}(c.Group);t.Transformer=Y,Y.prototype.className="Transformer",m._registerNode(Y),o.Factory.addGetterSetter(Y,"enabledAnchors",v,(function(e){return e instanceof Array||s.Util.warn("enabledAnchors value should be an array"),e instanceof Array&&e.forEach((function(e){-1===v.indexOf(e)&&s.Util.warn("Unknown anchor name: "+e+". Available names are: "+v.join(", "))})),e||[]})),o.Factory.addGetterSetter(Y,"resizeEnabled",!0),o.Factory.addGetterSetter(Y,"anchorSize",10,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"rotateEnabled",!0),o.Factory.addGetterSetter(Y,"rotationSnaps",[]),o.Factory.addGetterSetter(Y,"rotateAnchorOffset",50,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"rotationSnapTolerance",5,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"borderEnabled",!0),o.Factory.addGetterSetter(Y,"anchorStroke","rgb(0, 161, 255)"),o.Factory.addGetterSetter(Y,"anchorStrokeWidth",1,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"anchorFill","white"),o.Factory.addGetterSetter(Y,"anchorCornerRadius",0,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"borderStroke","rgb(0, 161, 255)"),o.Factory.addGetterSetter(Y,"borderStrokeWidth",1,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"borderDash"),o.Factory.addGetterSetter(Y,"keepRatio",!0),o.Factory.addGetterSetter(Y,"centeredScaling",!1),o.Factory.addGetterSetter(Y,"ignoreStroke",!1),o.Factory.addGetterSetter(Y,"padding",0,_.getNumberValidator()),o.Factory.addGetterSetter(Y,"node"),o.Factory.addGetterSetter(Y,"nodes"),o.Factory.addGetterSetter(Y,"boundBoxFunc"),o.Factory.addGetterSetter(Y,"shouldOverdrawWholeArea",!1),o.Factory.backCompat(Y,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),s.Collection.mapMethods(Y)},9846:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),l=n(3774),u=n(4417),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype._sceneFunc=function(e){e.beginPath(),e.arc(0,0,this.radius(),0,d.Konva.getAngle(this.angle()),this.clockwise()),e.lineTo(0,0),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radius()},t.prototype.getHeight=function(){return 2*this.radius()},t.prototype.setWidth=function(e){this.radius(e/2)},t.prototype.setHeight=function(e){this.radius(e/2)},t}(o.Shape);t.Wedge=c,c.prototype.className="Wedge",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["radius"],u._registerNode(c),s.Factory.addGetterSetter(c,"radius",0,l.getNumberValidator()),s.Factory.addGetterSetter(c,"angle",0,l.getNumberValidator()),s.Factory.addGetterSetter(c,"clockwise",!1),s.Factory.backCompat(c,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),i.Collection.mapMethods(c)},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(a,r,i,s){var o=t(a),d=n[e][t(a)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,a)}},r=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,r,i,s){var o=n(t),d=a[e][n(t)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=a(t),d=r[e][a(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(a=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2]);var a,r}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},1560:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var a=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],r=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return a+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return a+(1===e?"dan":"dana");case"MM":return a+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return a+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),a=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],r=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"pár sekund":"pár sekundami";case"ss":return t||a?r+(i(e)?"sekundy":"sekund"):r+"sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?r+(i(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?r+(i(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?r+(i(e)?"dny":"dní"):r+"dny";case"M":return t||a?"měsíc":"měsícem";case"MM":return t||a?r+(i(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?r+(i(e)?"roky":"let"):r+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,a=this._calendarEl[e],r=t&&t.hours();return n=a,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(a=a.apply(t)),a.replace("{}",r%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:a?r[n][0]:r[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function a(e,a,r,i){var s="";switch(r){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":s=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return function(e,a){return e<10?a?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return a?r[n][0]:r[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return a?r[n][0]:r[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},94:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},a=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:a,longMonthsParse:a,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return a+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return a+(1===e?"dan":"dana");case"MM":return a+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return a+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,a){var r=e;switch(n){case"s":return a||t?"néhány másodperc":"néhány másodperce";case"ss":return r+(a||t)?" másodperc":" másodperce";case"m":return"egy"+(a||t?" perc":" perce");case"mm":return r+(a||t?" perc":" perce");case"h":return"egy"+(a||t?" óra":" órája");case"hh":return r+(a||t?" óra":" órája");case"d":return"egy"+(a||t?" nap":" napja");case"dd":return r+(a||t?" nap":" napja");case"M":return"egy"+(a||t?" hónap":" hónapja");case"MM":return r+(a||t?" hónap":" hónapja");case"y":return"egy"+(a||t?" év":" éve");case"yy":return r+(a||t?" év":" éve")}return""}function a(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return a.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return a.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},8529:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,a,r){var i=e+" ";switch(a){case"s":return n||r?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||r?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||r?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||r?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":r?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(r?"daga":"dögum"):n?i+"dagur":i+(r?"dag":"degi");case"M":return n?"mánuður":r?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(r?"mánuði":"mánuðum"):n?i+"mánuður":i+(r?"mánuð":"mánuði");case"y":return n||r?"ár":"ári";case"yy":return t(e)?i+(n||r?"ár":"árum"):i+(n||r?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:a,monthsShort:a,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,a){return t?r(n)[0]:a?r(n)[1]:r(n)[2]}function a(e){return e%10==0||e>10&&e<20}function r(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(a(e)?r(i)[1]:r(i)[0]):s?o+r(i)[1]:o+(a(e)?r(i)[1]:r(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,a){return t?"kelios sekundės":a?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function a(e,a,r){return e+" "+n(t[r],e,a)}function r(e,a,r){return n(t[r],e,a)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:a,m:r,mm:a,h:r,hh:a,d:r,dd:a,M:r,MM:a,y:r,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function a(e,t,n,a){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"ss":r="%d सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"ss":r="%d सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),a=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"ww":return a+(r(e)?"tygodnie":"tygodni");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,a){return e?/D MMMM/.test(a)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=" ";return(e%100>=20||e>=100&&e%100==0)&&(a=" de "),e+a+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(a=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2]);var a,r}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function a(e){return e>1&&e<5}function r(e,t,n,r){var i=e+" ";switch(n){case"s":return t||r?"pár sekúnd":"pár sekundami";case"ss":return t||r?i+(a(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":r?"minútu":"minútou";case"mm":return t||r?i+(a(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?i+(a(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||r?"deň":"dňom";case"dd":return t||r?i+(a(e)?"dni":"dní"):i+"dňami";case"M":return t||r?"mesiac":"mesiacom";case"MM":return t||r?i+(a(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||r?"rok":"rokom";case"yy":return t||r?i+(a(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"nekaj sekund":"nekaj sekundami";case"ss":return r+(1===e?t?"sekundo":"sekundi":2===e?t||a?"sekundi":"sekundah":e<5?t||a?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return r+(1===e?t?"minuta":"minuto":2===e?t||a?"minuti":"minutama":e<5?t||a?"minute":"minutami":t||a?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return r+(1===e?t?"ura":"uro":2===e?t||a?"uri":"urama":e<5?t||a?"ure":"urami":t||a?"ur":"urami");case"d":return t||a?"en dan":"enim dnem";case"dd":return r+(1===e?t||a?"dan":"dnem":2===e?t||a?"dni":"dnevoma":t||a?"dni":"dnevi");case"M":return t||a?"en mesec":"enim mesecem";case"MM":return r+(1===e?t||a?"mesec":"mesecem":2===e?t||a?"meseca":"mesecema":e<5?t||a?"mesece":"meseci":t||a?"mesecev":"meseci");case"y":return t||a?"eno leto":"enim letom";case"yy":return r+(1===e?t||a?"leto":"letom":2===e?t||a?"leti":"letoma":e<5?t||a?"leta":"leti":t||a?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,a,r){var i=function(e){var n=Math.floor(e%1e3/100),a=Math.floor(e%100/10),r=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),a>0&&(i+=(""!==i?" ":"")+t[a]+"maH"),r>0&&(i+=(""!==i?" ":"")+t[r]),""===i?"pagh":i}(e);switch(a){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return a||t?r[n][0]:r[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"يېرىم كېچە":a<900?"سەھەر":a<1130?"چۈشتىن بۇرۇن":a<1230?"چۈش":a<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(a=+e,r={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2]);var a,r}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1200?"上午":1200===a?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,a;function r(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function h(e,t){var n,a=[];for(n=0;n<e.length;++n)a.push(t(e[n],n));return a}function _(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function m(e,t,n,a){return wt(e,t,n,a,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=a.call(t.parsedDateParts,(function(e){return null!=e})),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function y(e){var t=m(NaN);return null!=e?_(f(t),e):f(t).userInvalidated=!0,t}a=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),a=n.length>>>0;for(t=0;t<a;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=r.momentProperties=[],M=!1;function v(e,t){var n,a,r;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=f(t)),l(t._locale)||(e._locale=t._locale),g.length>0)for(n=0;n<g.length;n++)l(r=t[a=g[n]])||(e[a]=r);return e}function L(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,r.updateOffset(this),M=!1)}function Y(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function b(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function k(e,t){var n=!0;return _((function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){var a,i,s,d=[];for(i=0;i<arguments.length;i++){if(a="","object"==typeof arguments[i]){for(s in a+="\n["+i+"] ",arguments[0])o(arguments[0],s)&&(a+=s+": "+arguments[0][s]+", ");a=a.slice(0,-2)}else a=arguments[i];d.push(a)}b(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var w,D={};function S(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),D[e]||(b(t),D[e]=!0)}function T(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,a=_({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(a[n]={},_(a[n],e[n]),_(a[n],t[n])):null!=t[n]?a[n]=t[n]:delete a[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(a[n]=_({},a[n]));return a}function P(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function H(e,t,n){var a=""+Math.abs(e),r=t-a.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+a}var C=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,j=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,O={},E={};function A(e,t,n,a){var r=a;"string"==typeof a&&(r=function(){return this[a]()}),e&&(E[e]=r),t&&(E[t[0]]=function(){return H(r.apply(this,arguments),t[1],t[2])}),n&&(E[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function F(e,t){return e.isValid()?(t=N(t,e.localeData()),O[t]=O[t]||function(e){var t,n,a,r=e.match(C);for(t=0,n=r.length;t<n;t++)E[r[t]]?r[t]=E[r[t]]:r[t]=(a=r[t]).match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"");return function(t){var a,i="";for(a=0;a<n;a++)i+=T(r[a])?r[a].call(t,e):r[a];return i}}(t),O[t](e)):e.localeData().invalidDate()}function N(e,t){var n=5;function a(e){return t.longDateFormat(e)||e}for(j.lastIndex=0;n>=0&&j.test(e);)e=e.replace(j,a),j.lastIndex=0,n-=1;return e}var W={};function R(e,t){var n=e.toLowerCase();W[n]=W[n+"s"]=W[t]=e}function I(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function z(e){var t,n,a={};for(n in e)o(e,n)&&(t=I(n))&&(a[t]=e[n]);return a}var G={};function U(e,t){G[e]=t}function B(e){return e%4==0&&e%100!=0||e%400==0}function V(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function J(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=V(t)),n}function K(e,t){return function(n){return null!=n?(X(this,e,n),r.updateOffset(this,t),this):q(this,e)}}function q(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function X(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&B(e.year())&&1===e.month()&&29===e.date()?(n=J(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ye(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Q,$=/\d/,Z=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,ae=/\d\d?/,re=/\d\d\d\d?/,ie=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,he=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function me(e,t,n){Q[e]=T(t)?t:function(e,a){return e&&n?n:t}}function fe(e,t){return o(Q,e)?Q[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,a,r){return t||n||a||r}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Q={};var ye={};function ge(e,t){var n,a=t;for("string"==typeof e&&(e=[e]),u(t)&&(a=function(e,n){n[t]=J(e)}),n=0;n<e.length;n++)ye[e[n]]=a}function Me(e,t){ge(e,(function(e,n,a,r){a._w=a._w||{},t(e,a._w,a,r)}))}function ve(e,t,n){null!=t&&o(ye,e)&&ye[e](t,n._a,n,e)}var Le;function Ye(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,a=(t%(n=12)+n)%n;return e+=(t-a)/12,1===a?B(e)?29:28:31-a%7%2}Le=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},A("M",["MM",2],"Mo",(function(){return this.month()+1})),A("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),A("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),R("month","M"),U("month",8),me("M",ae),me("MM",ae,Z),me("MMM",(function(e,t){return t.monthsShortRegex(e)})),me("MMMM",(function(e,t){return t.monthsRegex(e)})),ge(["M","MM"],(function(e,t){t[1]=J(e)-1})),ge(["MMM","MMMM"],(function(e,t,n,a){var r=n._locale.monthsParse(e,a,n._strict);null!=r?t[1]=r:f(n).invalidMonth=e}));var be="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ke="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),we=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,De=_e,Se=_e;function Te(e,t,n){var a,r,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)i=m([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(r=Le.call(this._shortMonthsParse,s))?r:null:-1!==(r=Le.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=Le.call(this._shortMonthsParse,s))||-1!==(r=Le.call(this._longMonthsParse,s))?r:null:-1!==(r=Le.call(this._longMonthsParse,s))||-1!==(r=Le.call(this._shortMonthsParse,s))?r:null}function xe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=J(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ye(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Pe(e){return null!=e?(xe(this,e),r.updateOffset(this,!0),this):q(this,"Month")}function He(){function e(e,t){return t.length-e.length}var t,n,a=[],r=[],i=[];for(t=0;t<12;t++)n=m([2e3,t]),a.push(this.monthsShort(n,"")),r.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(a.sort(e),r.sort(e),i.sort(e),t=0;t<12;t++)a[t]=pe(a[t]),r[t]=pe(r[t]);for(t=0;t<24;t++)i[t]=pe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Ce(e){return B(e)?366:365}A("Y",0,0,(function(){var e=this.year();return e<=9999?H(e,4):"+"+e})),A(0,["YY",2],0,(function(){return this.year()%100})),A(0,["YYYY",4],0,"year"),A(0,["YYYYY",5],0,"year"),A(0,["YYYYYY",6,!0],0,"year"),R("year","y"),U("year",1),me("Y",ue),me("YY",ae,Z),me("YYYY",oe,te),me("YYYYY",de,ne),me("YYYYYY",de,ne),ge(["YYYYY","YYYYYY"],0),ge("YYYY",(function(e,t){t[0]=2===e.length?r.parseTwoDigitYear(e):J(e)})),ge("YY",(function(e,t){t[0]=r.parseTwoDigitYear(e)})),ge("Y",(function(e,t){t[0]=parseInt(e,10)})),r.parseTwoDigitYear=function(e){return J(e)+(J(e)>68?1900:2e3)};var je=K("FullYear",!0);function Oe(e,t,n,a,r,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,a,r,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,a,r,i,s),o}function Ee(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ae(e,t,n){var a=7+t-n;return-(7+Ee(e,0,a).getUTCDay()-t)%7+a-1}function Fe(e,t,n,a,r){var i,s,o=1+7*(t-1)+(7+n-a)%7+Ae(e,a,r);return o<=0?s=Ce(i=e-1)+o:o>Ce(e)?(i=e+1,s=o-Ce(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Ne(e,t,n){var a,r,i=Ae(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?a=s+We(r=e.year()-1,t,n):s>We(e.year(),t,n)?(a=s-We(e.year(),t,n),r=e.year()+1):(r=e.year(),a=s),{week:a,year:r}}function We(e,t,n){var a=Ae(e,t,n),r=Ae(e+1,t,n);return(Ce(e)-a+r)/7}A("w",["ww",2],"wo","week"),A("W",["WW",2],"Wo","isoWeek"),R("week","w"),R("isoWeek","W"),U("week",5),U("isoWeek",5),me("w",ae),me("ww",ae,Z),me("W",ae),me("WW",ae,Z),Me(["w","ww","W","WW"],(function(e,t,n,a){t[a.substr(0,1)]=J(e)}));function Re(e,t){return e.slice(t,7).concat(e.slice(0,t))}A("d",0,"do","day"),A("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),A("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),A("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),A("e",0,0,"weekday"),A("E",0,0,"isoWeekday"),R("day","d"),R("weekday","e"),R("isoWeekday","E"),U("day",11),U("weekday",11),U("isoWeekday",11),me("d",ae),me("e",ae),me("E",ae),me("dd",(function(e,t){return t.weekdaysMinRegex(e)})),me("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),me("dddd",(function(e,t){return t.weekdaysRegex(e)})),Me(["dd","ddd","dddd"],(function(e,t,n,a){var r=n._locale.weekdaysParse(e,a,n._strict);null!=r?t.d=r:f(n).invalidWeekday=e})),Me(["d","e","E"],(function(e,t,n,a){t[a]=J(e)}));var Ie="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ge="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ue=_e,Be=_e,Ve=_e;function Je(e,t,n){var a,r,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)i=m([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(r=Le.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=Le.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=Le.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=Le.call(this._weekdaysParse,s))||-1!==(r=Le.call(this._shortWeekdaysParse,s))||-1!==(r=Le.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=Le.call(this._shortWeekdaysParse,s))||-1!==(r=Le.call(this._weekdaysParse,s))||-1!==(r=Le.call(this._minWeekdaysParse,s))?r:null:-1!==(r=Le.call(this._minWeekdaysParse,s))||-1!==(r=Le.call(this._weekdaysParse,s))||-1!==(r=Le.call(this._shortWeekdaysParse,s))?r:null}function Ke(){function e(e,t){return t.length-e.length}var t,n,a,r,i,s=[],o=[],d=[],l=[];for(t=0;t<7;t++)n=m([2e3,1]).day(t),a=pe(this.weekdaysMin(n,"")),r=pe(this.weekdaysShort(n,"")),i=pe(this.weekdays(n,"")),s.push(a),o.push(r),d.push(i),l.push(a),l.push(r),l.push(i);s.sort(e),o.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function qe(){return this.hours()%12||12}function Xe(e,t){A(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}A("H",["HH",2],0,"hour"),A("h",["hh",2],0,qe),A("k",["kk",2],0,(function(){return this.hours()||24})),A("hmm",0,0,(function(){return""+qe.apply(this)+H(this.minutes(),2)})),A("hmmss",0,0,(function(){return""+qe.apply(this)+H(this.minutes(),2)+H(this.seconds(),2)})),A("Hmm",0,0,(function(){return""+this.hours()+H(this.minutes(),2)})),A("Hmmss",0,0,(function(){return""+this.hours()+H(this.minutes(),2)+H(this.seconds(),2)})),Xe("a",!0),Xe("A",!1),R("hour","h"),U("hour",13),me("a",Qe),me("A",Qe),me("H",ae),me("h",ae),me("k",ae),me("HH",ae,Z),me("hh",ae,Z),me("kk",ae,Z),me("hmm",re),me("hmmss",ie),me("Hmm",re),me("Hmmss",ie),ge(["H","HH"],3),ge(["k","kk"],(function(e,t,n){var a=J(e);t[3]=24===a?0:a})),ge(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ge(["h","hh"],(function(e,t,n){t[3]=J(e),f(n).bigHour=!0})),ge("hmm",(function(e,t,n){var a=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a)),f(n).bigHour=!0})),ge("hmmss",(function(e,t,n){var a=e.length-4,r=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a,2)),t[5]=J(e.substr(r)),f(n).bigHour=!0})),ge("Hmm",(function(e,t,n){var a=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a))})),ge("Hmmss",(function(e,t,n){var a=e.length-4,r=e.length-2;t[3]=J(e.substr(0,a)),t[4]=J(e.substr(a,2)),t[5]=J(e.substr(r))}));var $e=K("Hours",!0);var Ze,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:be,monthsShort:ke,week:{dow:0,doy:6},weekdays:Ie,weekdaysMin:Ge,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function at(e,t){var n,a=Math.min(e.length,t.length);for(n=0;n<a;n+=1)if(e[n]!==t[n])return n;return a}function rt(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var a=null;if(void 0===tt[t]&&e&&e.exports)try{a=Ze._abbr,n(6700)("./"+t),st(a)}catch(e){tt[t]=null}return tt[t]}function st(e,t){var n;return e&&((n=l(t)?dt(e):ot(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function ot(e,t){if(null!==t){var n,a=et;if(t.abbr=e,null!=tt[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])a=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;a=n._config}return tt[e]=new P(x(a,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),st(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,a,r,i=0;i<e.length;){for(t=(r=rt(e[i]).split("-")).length,n=(n=rt(e[i+1]))?n.split("-"):null;t>0;){if(a=it(r.slice(0,t).join("-")))return a;if(n&&n.length>=t&&at(r,n)>=t-1)break;t--}i++}return Ze}(e)}function lt(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>Ye(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,f(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),f(e)._overflowWeeks&&-1===t&&(t=7),f(e)._overflowWeekday&&-1===t&&(t=8),f(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ht=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ft=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,a,r,i,s,o=e._i,d=ut.exec(o)||ct.exec(o);if(d){for(f(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[1])){r=_t[t][0],a=!1!==_t[t][2];break}if(null==r)return void(e._isValid=!1);if(d[3]){for(t=0,n=mt.length;t<n;t++)if(mt[t][1].exec(d[3])){i=(d[2]||" ")+mt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!a&&null!=i)return void(e._isValid=!1);if(d[4]){if(!ht.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=r+(i||"")+(s||""),bt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function vt(e){var t,n,a,r,i,s,o,d,l=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],a=l[3],r=l[2],i=l[5],s=l[6],o=l[7],d=[Mt(n),ke.indexOf(a),parseInt(r,10),parseInt(i,10),parseInt(s,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return yt[e];if(t)return 0;var a=parseInt(n,10),r=a%100;return(a-r)/100*60+r}(l[8],l[9],l[10]),e._d=Ee.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Lt(e,t,n){return null!=e?e:null!=t?t:n}function Yt(e){var t,n,a,i,s,o=[];if(!e._d){for(a=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,a,r,i,s,o,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,s=4,n=Lt(t.GG,e._a[0],Ne(Dt(),1,4).year),a=Lt(t.W,1),((r=Lt(t.E,1))<1||r>7)&&(d=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,l=Ne(Dt(),i,s),n=Lt(t.gg,e._a[0],l.year),a=Lt(t.w,l.week),null!=t.d?((r=t.d)<0||r>6)&&(d=!0):null!=t.e?(r=t.e+i,(t.e<0||t.e>6)&&(d=!0)):r=i),a<1||a>We(n,i,s)?f(e)._overflowWeeks=!0:null!=d?f(e)._overflowWeekday=!0:(o=Fe(n,a,r,i,s),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Lt(e._a[0],a[0]),(e._dayOfYear>Ce(s)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Ee(s,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=a[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ee:Oe).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(f(e).weekdayMismatch=!0)}}function bt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],f(e).empty=!0;var t,n,a,i,s,o,d=""+e._i,l=d.length,u=0;for(a=N(e._f,e._locale).match(C)||[],t=0;t<a.length;t++)i=a[t],(n=(d.match(fe(i,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&f(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),u+=n.length),E[i]?(n?f(e).empty=!1:f(e).unusedTokens.push(i),ve(i,n,e)):e._strict&&!n&&f(e).unusedTokens.push(i);f(e).charsLeftOver=l-u,d.length>0&&f(e).unusedInput.push(d),e._a[3]<=12&&!0===f(e).bigHour&&e._a[3]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var a;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((a=e.isPM(n))&&t<12&&(t+=12),a||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=f(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),Yt(e),lt(e)}else vt(e);else gt(e)}function kt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),Y(t)?new L(lt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,a,r,i,s,o=!1;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)i=0,s=!1,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],bt(t),p(t)&&(s=!0),i+=f(t).charsLeftOver,i+=10*f(t).unusedTokens.length,f(t).score=i,o?i<a&&(a=i,n=t):(null==a||i<a||s)&&(a=i,n=t,s&&(o=!0));_(e,n||t)}(e):n?bt(e):function(e){var t=e._i;l(t)?e._d=new Date(r.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ft.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,vt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=h(t.slice(0),(function(e){return parseInt(e,10)})),Yt(e)):s(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=h([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Yt(e)}}(e):u(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function wt(e,t,n,a,r){var o,l={};return!0!==t&&!1!==t||(a=t,t=void 0),!0!==n&&!1!==n||(a=n,n=void 0),(s(e)&&d(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=r,l._l=n,l._i=e,l._f=t,l._strict=a,(o=new L(lt(kt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Dt(e,t,n,a){return wt(e,t,n,a,!1)}r.createFromInputFallback=k("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),r.ISO_8601=function(){},r.RFC_2822=function(){};var St=k("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),Tt=k("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function xt(e,t){var n,a;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],a=1;a<t.length;++a)t[a].isValid()&&!t[a][e](n)||(n=t[a]);return n}var Pt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ht(e){var t=z(e),n=t.year||0,a=t.quarter||0,r=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,a=!1;for(t in e)if(o(e,t)&&(-1===Le.call(Pt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Pt.length;++n)if(e[Pt[n]]){if(a)return!1;parseFloat(e[Pt[n]])!==J(e[Pt[n]])&&(a=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+s+7*i,this._months=+r+3*a+12*n,this._data={},this._locale=dt(),this._bubble()}function Ct(e){return e instanceof Ht}function jt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ot(e,t){A(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+H(~~(e/60),2)+t+H(~~e%60,2)}))}Ot("Z",":"),Ot("ZZ",""),me("Z",he),me("ZZ",he),ge(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=At(he,e)}));var Et=/([\+\-]|\d\d)/gi;function At(e,t){var n,a,r=(t||"").match(e);return null===r?null:0===(a=60*(n=((r[r.length-1]||[])+"").match(Et)||["-",0,0])[1]+J(n[2]))?0:"+"===n[0]?a:-a}function Ft(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(Y(e)||c(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),r.updateOffset(n,!1),n):Dt(e).local()}function Nt(e){return-Math.round(e._d.getTimezoneOffset())}function Wt(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Rt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,It=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function zt(e,t){var n,a,r,i,s,d,l=e,c=null;return Ct(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=Rt.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:J(c[2])*n,h:J(c[3])*n,m:J(c[4])*n,s:J(c[5])*n,ms:J(jt(1e3*c[6]))*n}):(c=It.exec(e))?(n="-"===c[1]?-1:1,l={y:Gt(c[2],n),M:Gt(c[3],n),w:Gt(c[4],n),d:Gt(c[5],n),h:Gt(c[6],n),m:Gt(c[7],n),s:Gt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=Dt(l.from),s=Dt(l.to),r=i.isValid()&&s.isValid()?(s=Ft(s,i),i.isBefore(s)?d=Ut(i,s):((d=Ut(s,i)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=r.milliseconds,l.M=r.months),a=new Ht(l),Ct(e)&&o(e,"_locale")&&(a._locale=e._locale),Ct(e)&&o(e,"_isValid")&&(a._isValid=e._isValid),a}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Ut(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Bt(e,t){return function(n,a){var r;return null===a||isNaN(+a)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=a,a=r),Vt(this,zt(n,a),e),this}}function Vt(e,t,n,a){var i=t._milliseconds,s=jt(t._days),o=jt(t._months);e.isValid()&&(a=null==a||a,o&&xe(e,q(e,"Month")+o*n),s&&X(e,"Date",q(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),a&&r.updateOffset(e,s||o))}zt.fn=Ht.prototype,zt.invalid=function(){return zt(NaN)};var Jt=Bt(1,"add"),Kt=Bt(-1,"subtract");function qt(e){return"string"==typeof e||e instanceof String}function Xt(e){return Y(e)||c(e)||qt(e)||u(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&qt(e)})).length),t&&n}(e)||function(e){var t,n,a=s(e)&&!d(e),r=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<i.length;t+=1)n=i[t],r=r||o(e,n);return a&&r}(e)||null==e}function Qt(e){var t,n=s(e)&&!d(e),a=!1,r=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<r.length;t+=1)a=a||o(e,r[t]);return n&&a}function $t(e,t){if(e.date()<t.date())return-$t(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(n,"months");return-(n+(t-a<0?(t-a)/(a-e.clone().add(n-1,"months")):(t-a)/(e.clone().add(n+1,"months")-a)))||0}function Zt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=k("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,an=6e4,rn=36e5,sn=126227808e5;function on(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function un(e,t){return t.erasAbbrRegex(e)}function cn(){var e,t,n=[],a=[],r=[],i=[],s=this.eras();for(e=0,t=s.length;e<t;++e)a.push(pe(s[e].name)),n.push(pe(s[e].abbr)),r.push(pe(s[e].narrow)),i.push(pe(s[e].name)),i.push(pe(s[e].abbr)),i.push(pe(s[e].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+a.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+r.join("|")+")","i")}function hn(e,t){A(0,[e,e.length],0,t)}function _n(e,t,n,a,r){var i;return null==e?Ne(this,a,r).year:(t>(i=We(e,a,r))&&(t=i),mn.call(this,e,t,n,a,r))}function mn(e,t,n,a,r){var i=Fe(e,t,n,a,r),s=Ee(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}A("N",0,0,"eraAbbr"),A("NN",0,0,"eraAbbr"),A("NNN",0,0,"eraAbbr"),A("NNNN",0,0,"eraName"),A("NNNNN",0,0,"eraNarrow"),A("y",["y",1],"yo","eraYear"),A("y",["yy",2],0,"eraYear"),A("y",["yyy",3],0,"eraYear"),A("y",["yyyy",4],0,"eraYear"),me("N",un),me("NN",un),me("NNN",un),me("NNNN",(function(e,t){return t.erasNameRegex(e)})),me("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ge(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,a){var r=n._locale.erasParse(e,a,n._strict);r?f(n).era=r:f(n).invalidEra=e})),me("y",le),me("yy",le),me("yyy",le),me("yyyy",le),me("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ge(["y","yy","yyy","yyyy"],0),ge(["yo"],(function(e,t,n,a){var r;n._locale._eraYearOrdinalRegex&&(r=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,r):t[0]=parseInt(e,10)})),A(0,["gg",2],0,(function(){return this.weekYear()%100})),A(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),hn("gggg","weekYear"),hn("ggggg","weekYear"),hn("GGGG","isoWeekYear"),hn("GGGGG","isoWeekYear"),R("weekYear","gg"),R("isoWeekYear","GG"),U("weekYear",1),U("isoWeekYear",1),me("G",ue),me("g",ue),me("GG",ae,Z),me("gg",ae,Z),me("GGGG",oe,te),me("gggg",oe,te),me("GGGGG",de,ne),me("ggggg",de,ne),Me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,a){t[a.substr(0,2)]=J(e)})),Me(["gg","GG"],(function(e,t,n,a){t[a]=r.parseTwoDigitYear(e)})),A("Q",0,"Qo","quarter"),R("quarter","Q"),U("quarter",7),me("Q",$),ge("Q",(function(e,t){t[1]=3*(J(e)-1)})),A("D",["DD",2],"Do","date"),R("date","D"),U("date",9),me("D",ae),me("DD",ae,Z),me("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ge(["D","DD"],2),ge("Do",(function(e,t){t[2]=J(e.match(ae)[0])}));var fn=K("Date",!0);A("DDD",["DDDD",3],"DDDo","dayOfYear"),R("dayOfYear","DDD"),U("dayOfYear",4),me("DDD",se),me("DDDD",ee),ge(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=J(e)})),A("m",["mm",2],0,"minute"),R("minute","m"),U("minute",14),me("m",ae),me("mm",ae,Z),ge(["m","mm"],4);var pn=K("Minutes",!1);A("s",["ss",2],0,"second"),R("second","s"),U("second",15),me("s",ae),me("ss",ae,Z),ge(["s","ss"],5);var yn,gn,Mn=K("Seconds",!1);for(A("S",0,0,(function(){return~~(this.millisecond()/100)})),A(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),A(0,["SSS",3],0,"millisecond"),A(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),A(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),A(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),A(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),A(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),A(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),R("millisecond","ms"),U("millisecond",16),me("S",se,$),me("SS",se,Z),me("SSS",se,ee),yn="SSSS";yn.length<=9;yn+="S")me(yn,le);function vn(e,t){t[6]=J(1e3*("0."+e))}for(yn="S";yn.length<=9;yn+="S")ge(yn,vn);gn=K("Milliseconds",!1),A("z",0,0,"zoneAbbr"),A("zz",0,0,"zoneName");var Ln=L.prototype;function Yn(e){return e}Ln.add=Jt,Ln.calendar=function(e,t){1===arguments.length&&(arguments[0]?Xt(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Dt(),a=Ft(n,this).startOf("day"),i=r.calendarFormat(this,a)||"sameElse",s=t&&(T(t[i])?t[i].call(this,n):t[i]);return this.format(s||this.localeData().calendar(i,this,Dt(n)))},Ln.clone=function(){return new L(this)},Ln.diff=function(e,t,n){var a,r,i;if(!this.isValid())return NaN;if(!(a=Ft(e,this)).isValid())return NaN;switch(r=6e4*(a.utcOffset()-this.utcOffset()),t=I(t)){case"year":i=$t(this,a)/12;break;case"month":i=$t(this,a);break;case"quarter":i=$t(this,a)/3;break;case"second":i=(this-a)/1e3;break;case"minute":i=(this-a)/6e4;break;case"hour":i=(this-a)/36e5;break;case"day":i=(this-a-r)/864e5;break;case"week":i=(this-a-r)/6048e5;break;default:i=this-a}return n?i:V(i)},Ln.endOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=rn-on(t+(this._isUTC?0:this.utcOffset()*an),rn)-1;break;case"minute":t=this._d.valueOf(),t+=an-on(t,an)-1;break;case"second":t=this._d.valueOf(),t+=nn-on(t,nn)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},Ln.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=F(this,e);return this.localeData().postformat(t)},Ln.from=function(e,t){return this.isValid()&&(Y(e)&&e.isValid()||Dt(e).isValid())?zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.fromNow=function(e){return this.from(Dt(),e)},Ln.to=function(e,t){return this.isValid()&&(Y(e)&&e.isValid()||Dt(e).isValid())?zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.toNow=function(e){return this.to(Dt(),e)},Ln.get=function(e){return T(this[e=I(e)])?this[e]():this},Ln.invalidAt=function(){return f(this).overflow},Ln.isAfter=function(e,t){var n=Y(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Ln.isBefore=function(e,t){var n=Y(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Ln.isBetween=function(e,t,n,a){var r=Y(e)?e:Dt(e),i=Y(t)?t:Dt(t);return!!(this.isValid()&&r.isValid()&&i.isValid())&&("("===(a=a||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===a[1]?this.isBefore(i,n):!this.isAfter(i,n))},Ln.isSame=function(e,t){var n,a=Y(e)?e:Dt(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Ln.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Ln.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Ln.isValid=function(){return p(this)},Ln.lang=en,Ln.locale=Zt,Ln.localeData=tn,Ln.max=Tt,Ln.min=St,Ln.parsingFlags=function(){return _({},f(this))},Ln.set=function(e,t){if("object"==typeof e){var n,a=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:G[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e));for(n=0;n<a.length;n++)this[a[n].unit](e[a[n].unit])}else if(T(this[e=I(e)]))return this[e](t);return this},Ln.startOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=on(t+(this._isUTC?0:this.utcOffset()*an),rn);break;case"minute":t=this._d.valueOf(),t-=on(t,an);break;case"second":t=this._d.valueOf(),t-=on(t,nn)}return this._d.setTime(t),r.updateOffset(this,!0),this},Ln.subtract=Kt,Ln.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Ln.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Ln.toDate=function(){return new Date(this.valueOf())},Ln.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?F(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",F(n,"Z")):F(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Ln.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,a="moment",r="";return this.isLocal()||(a=0===this.utcOffset()?"moment.utc":"moment.parseZone",r="Z"),e="["+a+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=r+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Ln[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Ln.toJSON=function(){return this.isValid()?this.toISOString():null},Ln.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Ln.unix=function(){return Math.floor(this.valueOf()/1e3)},Ln.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Ln.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Ln.eraName=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].name;if(a[e].until<=n&&n<=a[e].since)return a[e].name}return""},Ln.eraNarrow=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].narrow;if(a[e].until<=n&&n<=a[e].since)return a[e].narrow}return""},Ln.eraAbbr=function(){var e,t,n,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),a[e].since<=n&&n<=a[e].until)return a[e].abbr;if(a[e].until<=n&&n<=a[e].since)return a[e].abbr}return""},Ln.eraYear=function(){var e,t,n,a,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,a=this.clone().startOf("day").valueOf(),i[e].since<=a&&a<=i[e].until||i[e].until<=a&&a<=i[e].since)return(this.year()-r(i[e].since).year())*n+i[e].offset;return this.year()},Ln.year=je,Ln.isLeapYear=function(){return B(this.year())},Ln.weekYear=function(e){return _n.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Ln.isoWeekYear=function(e){return _n.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Ln.quarter=Ln.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Ln.month=Pe,Ln.daysInMonth=function(){return Ye(this.year(),this.month())},Ln.week=Ln.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Ln.isoWeek=Ln.isoWeeks=function(e){var t=Ne(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Ln.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},Ln.weeksInWeekYear=function(){var e=this.localeData()._week;return We(this.weekYear(),e.dow,e.doy)},Ln.isoWeeksInYear=function(){return We(this.year(),1,4)},Ln.isoWeeksInISOWeekYear=function(){return We(this.isoWeekYear(),1,4)},Ln.date=fn,Ln.day=Ln.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Ln.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Ln.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Ln.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Ln.hour=Ln.hours=$e,Ln.minute=Ln.minutes=pn,Ln.second=Ln.seconds=Mn,Ln.millisecond=Ln.milliseconds=gn,Ln.utcOffset=function(e,t,n){var a,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=At(he,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Nt(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),i!==e&&(!t||this._changeInProgress?Vt(this,zt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Nt(this)},Ln.utc=function(e){return this.utcOffset(0,e)},Ln.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Nt(this),"m")),this},Ln.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=At(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Ln.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Ln.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Ln.isLocal=function(){return!!this.isValid()&&!this._isUTC},Ln.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Ln.isUtc=Wt,Ln.isUTC=Wt,Ln.zoneAbbr=function(){return this._isUTC?"UTC":""},Ln.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Ln.dates=k("dates accessor is deprecated. Use date instead.",fn),Ln.months=k("months accessor is deprecated. Use month instead",Pe),Ln.years=k("years accessor is deprecated. Use year instead",je),Ln.zone=k("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Ln.isDSTShifted=k("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return v(t,this),(t=kt(t))._a?(e=t._isUTC?m(t._a):Dt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var a,r=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(a=0;a<r;a++)(n&&e[a]!==t[a]||!n&&J(e[a])!==J(t[a]))&&s++;return s+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var bn=P.prototype;function kn(e,t,n,a){var r=dt(),i=m().set(a,t);return r[n](i,e)}function wn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return kn(e,t,n,"month");var a,r=[];for(a=0;a<12;a++)r[a]=kn(e,a,n,"month");return r}function Dn(e,t,n,a){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var r,i=dt(),s=e?i._week.dow:0,o=[];if(null!=n)return kn(t,(n+s)%7,a,"day");for(r=0;r<7;r++)o[r]=kn(t,(r+s)%7,a,"day");return o}bn.calendar=function(e,t,n){var a=this._calendar[e]||this._calendar.sameElse;return T(a)?a.call(t,n):a},bn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(C).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},bn.invalidDate=function(){return this._invalidDate},bn.ordinal=function(e){return this._ordinal.replace("%d",e)},bn.preparse=Yn,bn.postformat=Yn,bn.relativeTime=function(e,t,n,a){var r=this._relativeTime[n];return T(r)?r(e,t,n,a):r.replace(/%d/i,e)},bn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(t):n.replace(/%s/i,t)},bn.set=function(e){var t,n;for(n in e)o(e,n)&&(T(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},bn.eras=function(e,t){var n,a,i,s=this._eras||dt("en")._eras;for(n=0,a=s.length;n<a;++n){switch(typeof s[n].since){case"string":i=r(s[n].since).startOf("day"),s[n].since=i.valueOf()}switch(typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":i=r(s[n].until).startOf("day").valueOf(),s[n].until=i.valueOf()}}return s},bn.erasParse=function(e,t,n){var a,r,i,s,o,d=this.eras();for(e=e.toUpperCase(),a=0,r=d.length;a<r;++a)if(i=d[a].name.toUpperCase(),s=d[a].abbr.toUpperCase(),o=d[a].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return d[a];break;case"NNNN":if(i===e)return d[a];break;case"NNNNN":if(o===e)return d[a]}else if([i,s,o].indexOf(e)>=0)return d[a]},bn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?r(e.since).year():r(e.since).year()+(t-e.offset)*n},bn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||cn.call(this),e?this._erasAbbrRegex:this._erasRegex},bn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||cn.call(this),e?this._erasNameRegex:this._erasRegex},bn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||cn.call(this),e?this._erasNarrowRegex:this._erasRegex},bn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||we).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},bn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[we.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},bn.monthsParse=function(e,t,n){var a,r,i;if(this._monthsParseExact)return Te.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(r=m([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(i="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[a]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===t&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}},bn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||He.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=Se),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},bn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||He.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=De),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},bn.week=function(e){return Ne(e,this._week.dow,this._week.doy).week},bn.firstDayOfYear=function(){return this._week.doy},bn.firstDayOfWeek=function(){return this._week.dow},bn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Re(n,this._week.dow):e?n[e.day()]:n},bn.weekdaysMin=function(e){return!0===e?Re(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},bn.weekdaysShort=function(e){return!0===e?Re(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},bn.weekdaysParse=function(e,t,n){var a,r,i;if(this._weekdaysParseExact)return Je.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(r=m([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(i="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[a]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===t&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===t&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}},bn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ke.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Ue),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},bn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ke.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Be),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},bn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ke.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ve),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},bn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},bn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},st("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===J(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=k("moment.lang is deprecated. Use moment.locale instead.",st),r.langData=k("moment.langData is deprecated. Use moment.localeData instead.",dt);var Sn=Math.abs;function Tn(e,t,n,a){var r=zt(t,n);return e._milliseconds+=a*r._milliseconds,e._days+=a*r._days,e._months+=a*r._months,e._bubble()}function xn(e){return e<0?Math.floor(e):Math.ceil(e)}function Pn(e){return 4800*e/146097}function Hn(e){return 146097*e/4800}function Cn(e){return function(){return this.as(e)}}var jn=Cn("ms"),On=Cn("s"),En=Cn("m"),An=Cn("h"),Fn=Cn("d"),Nn=Cn("w"),Wn=Cn("M"),Rn=Cn("Q"),In=Cn("y");function zn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Gn=zn("milliseconds"),Un=zn("seconds"),Bn=zn("minutes"),Vn=zn("hours"),Jn=zn("days"),Kn=zn("months"),qn=zn("years");var Xn=Math.round,Qn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function $n(e,t,n,a,r){return r.relativeTime(t||1,!!n,e,a)}var Zn=Math.abs;function ea(e){return(e>0)-(e<0)||+e}function ta(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,a,r,i,s,o,d=Zn(this._milliseconds)/1e3,l=Zn(this._days),u=Zn(this._months),c=this.asSeconds();return c?(e=V(d/60),t=V(e/60),d%=60,e%=60,n=V(u/12),u%=12,a=d?d.toFixed(3).replace(/\.?0+$/,""):"",r=c<0?"-":"",i=ea(this._months)!==ea(c)?"-":"",s=ea(this._days)!==ea(c)?"-":"",o=ea(this._milliseconds)!==ea(c)?"-":"",r+"P"+(n?i+n+"Y":"")+(u?i+u+"M":"")+(l?s+l+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+a+"S":"")):"P0D"}var na=Ht.prototype;return na.isValid=function(){return this._isValid},na.abs=function(){var e=this._data;return this._milliseconds=Sn(this._milliseconds),this._days=Sn(this._days),this._months=Sn(this._months),e.milliseconds=Sn(e.milliseconds),e.seconds=Sn(e.seconds),e.minutes=Sn(e.minutes),e.hours=Sn(e.hours),e.months=Sn(e.months),e.years=Sn(e.years),this},na.add=function(e,t){return Tn(this,e,t,1)},na.subtract=function(e,t){return Tn(this,e,t,-1)},na.as=function(e){if(!this.isValid())return NaN;var t,n,a=this._milliseconds;if("month"===(e=I(e))||"quarter"===e||"year"===e)switch(t=this._days+a/864e5,n=this._months+Pn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Hn(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return 24*t+a/36e5;case"minute":return 1440*t+a/6e4;case"second":return 86400*t+a/1e3;case"millisecond":return Math.floor(864e5*t)+a;default:throw new Error("Unknown unit "+e)}},na.asMilliseconds=jn,na.asSeconds=On,na.asMinutes=En,na.asHours=An,na.asDays=Fn,na.asWeeks=Nn,na.asMonths=Wn,na.asQuarters=Rn,na.asYears=In,na.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*J(this._months/12):NaN},na._bubble=function(){var e,t,n,a,r,i=this._milliseconds,s=this._days,o=this._months,d=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*xn(Hn(o)+s),s=0,o=0),d.milliseconds=i%1e3,e=V(i/1e3),d.seconds=e%60,t=V(e/60),d.minutes=t%60,n=V(t/60),d.hours=n%24,s+=V(n/24),o+=r=V(Pn(s)),s-=xn(Hn(r)),a=V(o/12),o%=12,d.days=s,d.months=o,d.years=a,this},na.clone=function(){return zt(this)},na.get=function(e){return e=I(e),this.isValid()?this[e+"s"]():NaN},na.milliseconds=Gn,na.seconds=Un,na.minutes=Bn,na.hours=Vn,na.days=Jn,na.weeks=function(){return V(this.days()/7)},na.months=Kn,na.years=qn,na.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,a,r=!1,i=Qn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(r=e),"object"==typeof t&&(i=Object.assign({},Qn,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),a=function(e,t,n,a){var r=zt(e).abs(),i=Xn(r.as("s")),s=Xn(r.as("m")),o=Xn(r.as("h")),d=Xn(r.as("d")),l=Xn(r.as("M")),u=Xn(r.as("w")),c=Xn(r.as("y")),h=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(h=h||u<=1&&["w"]||u<n.w&&["ww",u]),(h=h||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,h[3]=+e>0,h[4]=a,$n.apply(null,h)}(this,!r,i,n=this.localeData()),r&&(a=n.pastFuture(+this,a)),n.postformat(a)},na.toISOString=ta,na.toString=ta,na.toJSON=ta,na.locale=Zt,na.localeData=tn,na.toIsoString=k("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ta),na.lang=en,A("X",0,0,"unix"),A("x",0,0,"valueOf"),me("x",ue),me("X",/[+-]?\d+(\.\d{1,3})?/),ge("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ge("x",(function(e,t,n){n._d=new Date(J(e))})),r.version="2.29.1",t=Dt,r.fn=Ln,r.min=function(){return xt("isBefore",[].slice.call(arguments,0))},r.max=function(){return xt("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=m,r.unix=function(e){return Dt(1e3*e)},r.months=function(e,t){return wn(e,t,"months")},r.isDate=c,r.locale=st,r.invalid=y,r.duration=zt,r.isMoment=Y,r.weekdays=function(e,t,n){return Dn(e,t,n,"weekdays")},r.parseZone=function(){return Dt.apply(null,arguments).parseZone()},r.localeData=dt,r.isDuration=Ct,r.monthsShort=function(e,t){return wn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return Dn(e,t,n,"weekdaysMin")},r.defineLocale=ot,r.updateLocale=function(e,t){if(null!=t){var n,a,r=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(x(tt[e]._config,t)):(null!=(a=it(e))&&(r=a._config),t=x(r,t),null==a&&(t.abbr=e),(n=new P(t)).parentLocale=tt[e],tt[e]=n),st(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===st()&&st(e)):null!=tt[e]&&delete tt[e]);return tt[e]},r.locales=function(){return w(tt)},r.weekdaysShort=function(e,t,n){return Dn(e,t,n,"weekdaysShort")},r.normalizeUnits=I,r.relativeTimeRounding=function(e){return void 0===e?Xn:"function"==typeof e&&(Xn=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Qn[e]&&(void 0===t?Qn[e]:(Qn[e]=t,"s"===e&&(Qn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=Ln,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()},111:(e,t,n)=>{"use strict";t.__esModule=!0,t.didNotFindHydratableTextInstance=t.didNotFindHydratableInstance=t.didNotFindHydratableContainerTextInstance=t.didNotFindHydratableContainerInstance=t.didNotHydrateInstance=t.didNotHydrateContainerInstance=t.didNotMatchHydratedTextInstance=t.didNotMatchHydratedContainerTextInstance=t.hydrateTextInstance=t.hydrateInstance=t.getFirstHydratableChild=t.getNextHydratableSibling=t.canHydrateTextInstance=t.canHydrateInstance=t.supportsHydration=void 0;var a,r=(a=n(7441))&&a.__esModule?a:{default:a};function i(){(0,r.default)(!1,"The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.")}t.supportsHydration=!1,t.canHydrateInstance=i,t.canHydrateTextInstance=i,t.getNextHydratableSibling=i,t.getFirstHydratableChild=i,t.hydrateInstance=i,t.hydrateTextInstance=i,t.didNotMatchHydratedContainerTextInstance=i,t.didNotMatchHydratedTextInstance=i,t.didNotHydrateContainerInstance=i,t.didNotHydrateInstance=i,t.didNotFindHydratableContainerInstance=i,t.didNotFindHydratableContainerTextInstance=i,t.didNotFindHydratableInstance=i,t.didNotFindHydratableTextInstance=i},7559:(e,t,n)=>{"use strict";t.__esModule=!0,t.createHiddenTextInstance=t.cloneUnhiddenInstance=t.cloneHiddenInstance=t.replaceContainerChildren=t.finalizeContainerChildren=t.appendChildToContainerChildSet=t.createContainerChildSet=t.cloneInstance=t.supportsPersistence=void 0;var a,r=(a=n(7441))&&a.__esModule?a:{default:a};function i(){(0,r.default)(!1,"The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.")}t.supportsPersistence=!1,t.cloneInstance=i,t.createContainerChildSet=i,t.appendChildToContainerChildSet=i,t.finalizeContainerChildren=i,t.replaceContainerChildren=i,t.cloneHiddenInstance=i,t.cloneUnhiddenInstance=i,t.createHiddenTextInstance=i},8994:(e,t)=>{"use strict";t.__esModule=!0,t.getClosestInstanceFromNode=function(e){if(e[n])return e[n];for(;!e[n];){if(!e.parentNode)return null;e=e.parentNode}var t=e[n];return 5===t.tag||6===t.tag?t:null};var n="__reactInternalInstance$"+Math.random().toString(36).slice(2)},3286:(e,t,n)=>{"use strict";var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=n(7201);n(185),e.exports=a({},r)},7201:(e,t,n)=>{"use strict";var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=n(7294),o=n(7185),d=n(6525),l=n(8994),u=n(3632),c=n(7738),h=c.applyNodeProps,_=c.toggleStrictMode,m=function(e){function t(){return r(this,t),i(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){o.isBrowser&&(this._stage=new o.Stage({width:this.props.width,height:this.props.height,container:this._tagRef}),this._setRef(this._stage),h(this._stage,this.props),this._mountNode=p.createContainer(this._stage),p.updateContainer(this.props.children,this._mountNode,this))},t.prototype._setRef=function(e){var t=this.props.forwardedRef;t&&("function"==typeof t?t(e):t.current=e)},t.prototype.componentDidUpdate=function(e){o.isBrowser&&(this._setRef(this._stage),h(this._stage,this.props,e),p.updateContainer(this.props.children,this._mountNode,this))},t.prototype.componentWillUnmount=function(){o.isBrowser&&(this._setRef(null),p.updateContainer(null,this._mountNode,this),this._stage.destroy())},t.prototype.getStage=function(){return this._stage},t.prototype.render=function(){var e=this,t=this.props;return s.createElement("div",{ref:function(t){return e._tagRef=t},accessKey:t.accessKey,className:t.className,role:t.role,style:t.style,tabIndex:t.tabIndex,title:t.title})},t}(s.Component),f={};["Layer","FastLayer","Group","Label","Rect","Circle","Ellipse","Wedge","Line","Sprite","Image","Text","TextPath","Star","Ring","Arc","Tag","Path","RegularPolygon","Arrow","Shape","Transformer"].forEach((function(e){f[e]=e}));var p=d(u);p.injectIntoDevTools({findFiberByHostInstance:l.getClosestInstanceFromNode,bundleType:0,version:s.version,rendererPackageName:"react-konva",getInspectorDataForViewTag:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];console.log(t)}});var y=s.forwardRef((function(e,t){return s.createElement(m,a({},e,{forwardedRef:t}))}));e.exports=a({},f,{__matchRectVersion:!0,Stage:y,useStrictMode:_})},3632:(e,t,n)=>{"use strict";t.__esModule=!0,t.supportsMutation=t.isPrimaryRenderer=t.cancelPassiveEffects=t.schedulePassiveEffects=t.noTimeout=t.cancelTimeout=t.scheduleTimeout=t.cancelDeferredCallback=t.shouldYield=t.scheduleDeferredCallback=t.now=void 0;var a=n(7559);Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})}));var r=n(111);Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}));var i=n(3840);Object.defineProperty(t,"now",{enumerable:!0,get:function(){return i.unstable_now}}),Object.defineProperty(t,"scheduleDeferredCallback",{enumerable:!0,get:function(){return i.unstable_scheduleCallback}}),Object.defineProperty(t,"shouldYield",{enumerable:!0,get:function(){return i.unstable_shouldYield}}),Object.defineProperty(t,"cancelDeferredCallback",{enumerable:!0,get:function(){return i.unstable_cancelCallback}}),t.appendInitialChild=function(e,t){"string"!=typeof t?(e.add(t),(0,o.updatePicture)(e)):(0,d.default)(!1,'Don not use plain text as child of Konva.Node. You are using text: "%s"',t)},t.createInstance=function(e,t,n){var a=s.default[e];if(a){var r={},i={};for(var l in t)"on"===l.slice(0,2)?i[l]=t[l]:r[l]=t[l];var u=new a(r);return(0,o.applyNodeProps)(u,i),u}(0,d.default)(u,'Konva has no node with the type "%s". If you use minimal version of react-konva, just import required nodes into Konva: `import "konva/lib/shapes/%s"`  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html',e,e)},t.createTextInstance=function(e,t,n){(0,d.default)(!1,'Text components are not supported for now in ReactKonva. You text is: "'+e+'"')},t.finalizeInitialChildren=function(e,t,n){return!1},t.getPublicInstance=function(e){return e},t.prepareForCommit=function(){return null},t.prepareUpdate=function(e,t,n,a){return c},t.resetAfterCommit=function(){},t.resetTextContent=function(e){},t.shouldDeprioritizeSubtree=function(e,t){return!1},t.getRootHostContext=function(){return u},t.getChildHostContext=function(){return u},t.shouldSetTextContent=function(e,t){return!1},t.appendChild=function(e,t){t.parent===e?t.moveToTop():e.add(t),(0,o.updatePicture)(e)},t.appendChildToContainer=function(e,t){t.parent===e?t.moveToTop():e.add(t),(0,o.updatePicture)(e)},t.insertBefore=h,t.insertInContainerBefore=function(e,t,n){h(e,t,n)},t.removeChild=function(e,t){t.destroy(),t.off(o.EVENTS_NAMESPACE),(0,o.updatePicture)(e)},t.removeChildFromContainer=function(e,t){t.destroy(),t.off(o.EVENTS_NAMESPACE),(0,o.updatePicture)(e)},t.commitTextUpdate=function(e,t,n){(0,d.default)(!1,'Text components are not yet supported in ReactKonva. You text is: "'+n+'"')},t.commitMount=function(e,t,n){},t.commitUpdate=function(e,t,n,a,r){(0,o.applyNodeProps)(e,r,a)},t.hideInstance=function(e){e.hide(),(0,o.updatePicture)(e)},t.hideTextInstance=function(e){},t.unhideInstance=function(e,t){(null==t.visible||t.visible)&&e.show()},t.unhideTextInstance=function(e,t){},t.clearContainer=function(e){};var s=l(n(7185)),o=n(7738),d=l(n(7441));function l(e){return e&&e.__esModule?e:{default:e}}var u={},c={};function h(e,t,n){(0,d.default)(t!==n,"ReactKonva: Can not insert node before itself"),t._remove(),e.add(t),t.setZIndex(n.getZIndex()),(0,o.updatePicture)(e)}s.default.Node.prototype._applyProps=o.applyNodeProps,t.scheduleTimeout=setTimeout,t.cancelTimeout=clearTimeout,t.noTimeout=-1,t.schedulePassiveEffects=i.unstable_scheduleCallback,t.cancelPassiveEffects=i.unstable_cancelCallback,t.isPrimaryRenderer=!1,t.supportsMutation=!0},7441:e=>{"use strict";var t=function(e){if(void 0===e)throw new Error("invariant(...): Second argument must be a string.")};e.exports=function(e,n){for(var a=arguments.length,r=new Array(a>2?a-2:0),i=2;i<a;i++)r[i-2]=arguments[i];if(t(n),!e){var s;if(void 0===n)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var o=0;(s=new Error(n.replace(/%s/g,(function(){return String(r[o++])})))).name="Invariant Violation"}throw s.framesToPop=1,s}}},7738:(e,t)=>{"use strict";t.__esModule=!0,t.toggleStrictMode=function(e){s=e},t.applyNodeProps=function(e,t){var c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l;if(t===c&&console.error("same props"),!a&&"zIndex"in t&&(console.warn(d),a=!0),!r&&t.draggable){var h=void 0!==t.x||void 0!==t.y,_=t.onDragEnd||t.onDragMove;h&&!_&&(console.warn(o),r=!0)}for(var m in c)if(!n[m]){var f="on"===m.slice(0,2),p=c[m]!==t[m];f&&p&&("content"===(b=m.substr(2).toLowerCase()).substr(0,7)&&(b="content"+b.substr(7,1).toUpperCase()+b.substr(8)),e.off(b,c[m]));var y=!t.hasOwnProperty(m);y&&e.setAttr(m,void 0)}var g=s||t._useStrictMode,M={},v=!1,L={};for(var m in t)if(!n[m]){f="on"===m.slice(0,2);var Y=c[m]!==t[m];f&&Y&&("content"===(b=m.substr(2).toLowerCase()).substr(0,7)&&(b="content"+b.substr(7,1).toUpperCase()+b.substr(8)),t[m]&&(L[b]=t[m])),!f&&(t[m]!==c[m]||g&&t[m]!==e.getAttr(m))&&(v=!0,M[m]=t[m])}for(var b in v&&(e.setAttrs(M),u(e)),L)e.on(b+i,L[b])},t.updatePicture=u;var n={children:!0,ref:!0,key:!0,style:!0,forwardedRef:!0,unstable_applyCache:!0,unstable_applyDrawHitFromCache:!0},a=!1,r=!1,i=t.EVENTS_NAMESPACE=".react-konva-event",s=!1,o="ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n",d='ReactKonva: You are using "zIndex" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n',l={};function u(e){var t=e.getLayer()||e.getStage();t&&t.batchDraw()}},7287:(e,t,n)=>{(e=n.nmd(e)).exports=function(t){var a={},r=n(7418),i=n(7294),s=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,l=60103,u=60106,c=60107,h=60108,_=60114,m=60109,f=60110,p=60112,y=60113,g=60120,M=60115,v=60116,L=60121,Y=60129,b=60130,k=60131;if("function"==typeof Symbol&&Symbol.for){var w=Symbol.for;l=w("react.element"),u=w("react.portal"),c=w("react.fragment"),h=w("react.strict_mode"),_=w("react.profiler"),m=w("react.provider"),f=w("react.context"),p=w("react.forward_ref"),y=w("react.suspense"),g=w("react.suspense_list"),M=w("react.memo"),v=w("react.lazy"),L=w("react.block"),w("react.scope"),Y=w("react.debug_trace_mode"),b=w("react.offscreen"),k=w("react.legacy_hidden")}var D="function"==typeof Symbol&&Symbol.iterator;function S(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}function T(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case c:return"Fragment";case u:return"Portal";case _:return"Profiler";case h:return"StrictMode";case y:return"Suspense";case g:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case f:return(e.displayName||"Context")+".Consumer";case m:return(e._context.displayName||"Context")+".Provider";case p:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return T(e.type);case L:return T(e._render);case v:t=e._payload,e=e._init;try{return T(e(t))}catch(e){}}return null}function x(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function P(e){if(x(e)!==e)throw Error(o(188))}function H(e){var t=e.alternate;if(!t){if(null===(t=x(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,a=t;;){var r=n.return;if(null===r)break;var i=r.alternate;if(null===i){if(null!==(a=r.return)){n=a;continue}break}if(r.child===i.child){for(i=r.child;i;){if(i===n)return P(r),e;if(i===a)return P(r),t;i=i.sibling}throw Error(o(188))}if(n.return!==a.return)n=r,a=i;else{for(var s=!1,d=r.child;d;){if(d===n){s=!0,n=r,a=i;break}if(d===a){s=!0,a=r,n=i;break}d=d.sibling}if(!s){for(d=i.child;d;){if(d===n){s=!0,n=i,a=r;break}if(d===a){s=!0,a=i,n=r;break}d=d.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==a)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}function C(e){if(!(e=H(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function j(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var O,E=t.getPublicInstance,A=t.getRootHostContext,F=t.getChildHostContext,N=t.prepareForCommit,W=t.resetAfterCommit,R=t.createInstance,I=t.appendInitialChild,z=t.finalizeInitialChildren,G=t.prepareUpdate,U=t.shouldSetTextContent,B=t.createTextInstance,V=t.scheduleTimeout,J=t.cancelTimeout,K=t.noTimeout,q=t.isPrimaryRenderer,X=t.supportsMutation,Q=t.supportsPersistence,$=t.supportsHydration,Z=t.getInstanceFromNode,ee=t.makeOpaqueHydratingObject,te=t.makeClientId,ne=t.beforeActiveInstanceBlur,ae=t.afterActiveInstanceBlur,re=t.preparePortalMount,ie=t.supportsTestSelectors,se=t.findFiberRoot,oe=t.getBoundingRect,de=t.getTextContent,le=t.isHiddenSubtree,ue=t.matchAccessibilityRole,ce=t.setFocusIfFocusable,he=t.setupIntersectionObserver,_e=t.appendChild,me=t.appendChildToContainer,fe=t.commitTextUpdate,pe=t.commitMount,ye=t.commitUpdate,ge=t.insertBefore,Me=t.insertInContainerBefore,ve=t.removeChild,Le=t.removeChildFromContainer,Ye=t.resetTextContent,be=t.hideInstance,ke=t.hideTextInstance,we=t.unhideInstance,De=t.unhideTextInstance,Se=t.clearContainer,Te=t.cloneInstance,xe=t.createContainerChildSet,Pe=t.appendChildToContainerChildSet,He=t.finalizeContainerChildren,Ce=t.replaceContainerChildren,je=t.cloneHiddenInstance,Oe=t.cloneHiddenTextInstance,Ee=t.canHydrateInstance,Ae=t.canHydrateTextInstance,Fe=t.isSuspenseInstancePending,Ne=t.isSuspenseInstanceFallback,We=t.getNextHydratableSibling,Re=t.getFirstHydratableChild,Ie=t.hydrateInstance,ze=t.hydrateTextInstance,Ge=t.getNextHydratableInstanceAfterSuspenseInstance,Ue=t.commitHydratedContainer,Be=t.commitHydratedSuspenseInstance;function Ve(e){if(void 0===O)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);O=t&&t[1]||""}return"\n"+O+e}var Je=!1;function Ke(e,t){if(!e||Je)return"";Je=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var a=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){a=e}e.call(t.prototype)}else{try{throw Error()}catch(e){a=e}e()}}catch(e){if(e&&a&&"string"==typeof e.stack){for(var r=e.stack.split("\n"),i=a.stack.split("\n"),s=r.length-1,o=i.length-1;1<=s&&0<=o&&r[s]!==i[o];)o--;for(;1<=s&&0<=o;s--,o--)if(r[s]!==i[o]){if(1!==s||1!==o)do{if(s--,0>--o||r[s]!==i[o])return"\n"+r[s].replace(" at new "," at ")}while(1<=s&&0<=o);break}}}finally{Je=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Ve(e):""}var qe=[],Xe=-1;function Qe(e){return{current:e}}function $e(e){0>Xe||(e.current=qe[Xe],qe[Xe]=null,Xe--)}function Ze(e,t){Xe++,qe[Xe]=e.current,e.current=t}var et={},tt=Qe(et),nt=Qe(!1),at=et;function rt(e,t){var n=e.type.contextTypes;if(!n)return et;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===t)return a.__reactInternalMemoizedMaskedChildContext;var r,i={};for(r in n)i[r]=t[r];return a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function it(e){return null!=e.childContextTypes}function st(){$e(nt),$e(tt)}function ot(e,t,n){if(tt.current!==et)throw Error(o(168));Ze(tt,t),Ze(nt,n)}function dt(e,t,n){var a=e.stateNode;if(e=t.childContextTypes,"function"!=typeof a.getChildContext)return n;for(var i in a=a.getChildContext())if(!(i in e))throw Error(o(108,T(t)||"Unknown",i));return r({},n,a)}function lt(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||et,at=tt.current,Ze(tt,e),Ze(nt,nt.current),!0}function ut(e,t,n){var a=e.stateNode;if(!a)throw Error(o(169));n?(e=dt(e,t,at),a.__reactInternalMemoizedMergedChildContext=e,$e(nt),$e(tt),Ze(tt,e)):$e(nt),Ze(nt,n)}var ct=null,ht=null;(0,s.unstable_now)();var _t=0,mt=8;function ft(e){if(0!=(1&e))return mt=15,1;if(0!=(2&e))return mt=14,2;if(0!=(4&e))return mt=13,4;var t=24&e;return 0!==t?(mt=12,t):0!=(32&e)?(mt=11,32):0!=(t=192&e)?(mt=10,t):0!=(256&e)?(mt=9,256):0!=(t=3584&e)?(mt=8,t):0!=(4096&e)?(mt=7,4096):0!=(t=4186112&e)?(mt=6,t):0!=(t=62914560&e)?(mt=5,t):67108864&e?(mt=4,67108864):0!=(134217728&e)?(mt=3,134217728):0!=(t=805306368&e)?(mt=2,t):0!=(1073741824&e)?(mt=1,1073741824):(mt=8,e)}function pt(e,t){var n=e.pendingLanes;if(0===n)return mt=0;var a=0,r=0,i=e.expiredLanes,s=e.suspendedLanes,o=e.pingedLanes;if(0!==i)a=i,r=mt=15;else if(0!=(i=134217727&n)){var d=i&~s;0!==d?(a=ft(d),r=mt):0!=(o&=i)&&(a=ft(o),r=mt)}else 0!=(i=n&~s)?(a=ft(i),r=mt):0!==o&&(a=ft(o),r=mt);if(0===a)return 0;if(a=n&((0>(a=31-Yt(a))?0:1<<a)<<1)-1,0!==t&&t!==a&&0==(t&s)){if(ft(t),r<=mt)return t;mt=r}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=a;0<t;)r=1<<(n=31-Yt(t)),a|=e[n],t&=~r;return a}function yt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Mt(24&~t))?gt(10,t):e;case 10:return 0===(e=Mt(192&~t))?gt(8,t):e;case 8:return 0===(e=Mt(3584&~t))&&0===(e=Mt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Mt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function Mt(e){return e&-e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Lt(e,t,n){e.pendingLanes|=t;var a=t-1;e.suspendedLanes&=a,e.pingedLanes&=a,(e=e.eventTimes)[t=31-Yt(t)]=n}var Yt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(bt(e)/kt|0)|0},bt=Math.log,kt=Math.LN2,wt=s.unstable_runWithPriority,Dt=s.unstable_scheduleCallback,St=s.unstable_cancelCallback,Tt=s.unstable_shouldYield,xt=s.unstable_requestPaint,Pt=s.unstable_now,Ht=s.unstable_getCurrentPriorityLevel,Ct=s.unstable_ImmediatePriority,jt=s.unstable_UserBlockingPriority,Ot=s.unstable_NormalPriority,Et=s.unstable_LowPriority,At=s.unstable_IdlePriority,Ft={},Nt=void 0!==xt?xt:function(){},Wt=null,Rt=null,It=!1,zt=Pt(),Gt=1e4>zt?Pt:function(){return Pt()-zt};function Ut(){switch(Ht()){case Ct:return 99;case jt:return 98;case Ot:return 97;case Et:return 96;case At:return 95;default:throw Error(o(332))}}function Bt(e){switch(e){case 99:return Ct;case 98:return jt;case 97:return Ot;case 96:return Et;case 95:return At;default:throw Error(o(332))}}function Vt(e,t){return e=Bt(e),wt(e,t)}function Jt(e,t,n){return e=Bt(e),Dt(e,t,n)}function Kt(){if(null!==Rt){var e=Rt;Rt=null,St(e)}qt()}function qt(){if(!It&&null!==Wt){It=!0;var e=0;try{var t=Wt;Vt(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Wt=null}catch(t){throw null!==Wt&&(Wt=Wt.slice(e+1)),Dt(Ct,Kt),t}finally{It=!1}}}var Xt=d.ReactCurrentBatchConfig,Qt="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},$t=Object.prototype.hasOwnProperty;function Zt(e,t){if(Qt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(a=0;a<n.length;a++)if(!$t.call(t,n[a])||!Qt(e[n[a]],t[n[a]]))return!1;return!0}function en(e){switch(e.tag){case 5:return Ve(e.type);case 16:return Ve("Lazy");case 13:return Ve("Suspense");case 19:return Ve("SuspenseList");case 0:case 2:case 15:return Ke(e.type,!1);case 11:return Ke(e.type.render,!1);case 22:return Ke(e.type._render,!1);case 1:return Ke(e.type,!0);default:return""}}function tn(e,t){if(e&&e.defaultProps){for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var nn=Qe(null),an=null,rn=null,sn=null;function on(){sn=rn=an=null}function dn(e,t){e=e.type._context,q?(Ze(nn,e._currentValue),e._currentValue=t):(Ze(nn,e._currentValue2),e._currentValue2=t)}function ln(e){var t=nn.current;$e(nn),e=e.type._context,q?e._currentValue=t:e._currentValue2=t}function un(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function cn(e,t){an=e,sn=rn=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(za=!0),e.firstContext=null)}function hn(e,t){if(sn!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(sn=e,t=1073741823),t={context:e,observedBits:t,next:null},null===rn){if(null===an)throw Error(o(308));rn=t,an.dependencies={lanes:0,firstContext:t,responders:null}}else rn=rn.next=t;return q?e._currentValue:e._currentValue2}var _n=!1;function mn(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function fn(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function pn(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function yn(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function gn(e,t){var n=e.updateQueue,a=e.alternate;if(null!==a&&n===(a=a.updateQueue)){var r=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?r=i=s:i=i.next=s,n=n.next}while(null!==n);null===i?r=i=t:i=i.next=t}else r=i=t;return n={baseState:a.baseState,firstBaseUpdate:r,lastBaseUpdate:i,shared:a.shared,effects:a.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Mn(e,t,n,a){var i=e.updateQueue;_n=!1;var s=i.firstBaseUpdate,o=i.lastBaseUpdate,d=i.shared.pending;if(null!==d){i.shared.pending=null;var l=d,u=l.next;l.next=null,null===o?s=u:o.next=u,o=l;var c=e.alternate;if(null!==c){var h=(c=c.updateQueue).lastBaseUpdate;h!==o&&(null===h?c.firstBaseUpdate=u:h.next=u,c.lastBaseUpdate=l)}}if(null!==s){for(h=i.baseState,o=0,c=u=l=null;;){d=s.lane;var _=s.eventTime;if((a&d)===d){null!==c&&(c=c.next={eventTime:_,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var m=e,f=s;switch(d=t,_=n,f.tag){case 1:if("function"==typeof(m=f.payload)){h=m.call(_,h,d);break e}h=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(d="function"==typeof(m=f.payload)?m.call(_,h,d):m))break e;h=r({},h,d);break e;case 2:_n=!0}}null!==s.callback&&(e.flags|=32,null===(d=i.effects)?i.effects=[s]:d.push(s))}else _={eventTime:_,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=_,l=h):c=c.next=_,o|=d;if(null===(s=s.next)){if(null===(d=i.shared.pending))break;s=d.next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}null===c&&(l=h),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,li|=o,e.lanes=o,e.memoizedState=h}}function vn(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var a=e[t],r=a.callback;if(null!==r){if(a.callback=null,a=n,"function"!=typeof r)throw Error(o(191,r));r.call(a)}}}var Ln=(new i.Component).refs;function Yn(e,t,n,a){n=null==(n=n(a,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var bn={isMounted:function(e){return!!(e=e._reactInternals)&&x(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var a=Oi(),r=Ei(e),i=pn(a,r);i.payload=t,null!=n&&(i.callback=n),yn(e,i),Ai(e,r,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var a=Oi(),r=Ei(e),i=pn(a,r);i.tag=1,i.payload=t,null!=n&&(i.callback=n),yn(e,i),Ai(e,r,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Oi(),a=Ei(e),r=pn(n,a);r.tag=2,null!=t&&(r.callback=t),yn(e,r),Ai(e,a,n)}};function kn(e,t,n,a,r,i,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(a,i,s):!(t.prototype&&t.prototype.isPureReactComponent&&Zt(n,a)&&Zt(r,i))}function wn(e,t,n){var a=!1,r=et,i=t.contextType;return"object"==typeof i&&null!==i?i=hn(i):(r=it(t)?at:tt.current,i=(a=null!=(a=t.contextTypes))?rt(e,r):et),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=bn,e.stateNode=t,t._reactInternals=e,a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t}function Dn(e,t,n,a){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,a),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,a),t.state!==e&&bn.enqueueReplaceState(t,t.state,null)}function Sn(e,t,n,a){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=Ln,mn(e);var i=t.contextType;"object"==typeof i&&null!==i?r.context=hn(i):(i=it(t)?at:tt.current,r.context=rt(e,i)),Mn(e,n,r,a),r.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Yn(e,t,i,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&bn.enqueueReplaceState(r,r.state,null),Mn(e,n,r,a),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4)}var Tn=Array.isArray;function xn(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var a=n.stateNode}if(!a)throw Error(o(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=a.refs;t===Ln&&(t=a.refs={}),null===e?delete t[r]:t[r]=e})._stringRef=r,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Pn(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Hn(e){function t(t,n){if(e){var a=t.lastEffect;null!==a?(a.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,a){if(!e)return null;for(;null!==a;)t(n,a),a=a.sibling;return null}function a(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Ls(e,t)).index=0,e.sibling=null,e}function i(t,n,a){return t.index=a,e?null!==(a=t.alternate)?(a=a.index)<n?(t.flags=2,n):a:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function d(e,t,n,a){return null===t||6!==t.tag?((t=ws(n,e.mode,a)).return=e,t):((t=r(t,n)).return=e,t)}function h(e,t,n,a){return null!==t&&t.elementType===n.type?((a=r(t,n.props)).ref=xn(e,t,n),a.return=e,a):((a=Ys(n.type,n.key,n.props,null,e.mode,a)).ref=xn(e,t,n),a.return=e,a)}function _(e,t,n,a){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ds(n,e.mode,a)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function m(e,t,n,a,i){return null===t||7!==t.tag?((t=bs(n,e.mode,a,i)).return=e,t):((t=r(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case l:return(n=Ys(t.type,t.key,t.props,null,e.mode,n)).ref=xn(e,null,t),n.return=e,n;case u:return(t=Ds(t,e.mode,n)).return=e,t}if(Tn(t)||S(t))return(t=bs(t,e.mode,n,null)).return=e,t;Pn(e,t)}return null}function p(e,t,n,a){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:d(e,t,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case l:return n.key===r?n.type===c?m(e,t,n.props.children,a,r):h(e,t,n,a):null;case u:return n.key===r?_(e,t,n,a):null}if(Tn(n)||S(n))return null!==r?null:m(e,t,n,a,null);Pn(e,n)}return null}function y(e,t,n,a,r){if("string"==typeof a||"number"==typeof a)return d(t,e=e.get(n)||null,""+a,r);if("object"==typeof a&&null!==a){switch(a.$$typeof){case l:return e=e.get(null===a.key?n:a.key)||null,a.type===c?m(t,e,a.props.children,r,a.key):h(t,e,a,r);case u:return _(t,e=e.get(null===a.key?n:a.key)||null,a,r)}if(Tn(a)||S(a))return m(t,e=e.get(n)||null,a,r,null);Pn(t,a)}return null}function g(r,s,o,d){for(var l=null,u=null,c=s,h=s=0,_=null;null!==c&&h<o.length;h++){c.index>h?(_=c,c=null):_=c.sibling;var m=p(r,c,o[h],d);if(null===m){null===c&&(c=_);break}e&&c&&null===m.alternate&&t(r,c),s=i(m,s,h),null===u?l=m:u.sibling=m,u=m,c=_}if(h===o.length)return n(r,c),l;if(null===c){for(;h<o.length;h++)null!==(c=f(r,o[h],d))&&(s=i(c,s,h),null===u?l=c:u.sibling=c,u=c);return l}for(c=a(r,c);h<o.length;h++)null!==(_=y(c,r,h,o[h],d))&&(e&&null!==_.alternate&&c.delete(null===_.key?h:_.key),s=i(_,s,h),null===u?l=_:u.sibling=_,u=_);return e&&c.forEach((function(e){return t(r,e)})),l}function M(r,s,d,l){var u=S(d);if("function"!=typeof u)throw Error(o(150));if(null==(d=u.call(d)))throw Error(o(151));for(var c=u=null,h=s,_=s=0,m=null,g=d.next();null!==h&&!g.done;_++,g=d.next()){h.index>_?(m=h,h=null):m=h.sibling;var M=p(r,h,g.value,l);if(null===M){null===h&&(h=m);break}e&&h&&null===M.alternate&&t(r,h),s=i(M,s,_),null===c?u=M:c.sibling=M,c=M,h=m}if(g.done)return n(r,h),u;if(null===h){for(;!g.done;_++,g=d.next())null!==(g=f(r,g.value,l))&&(s=i(g,s,_),null===c?u=g:c.sibling=g,c=g);return u}for(h=a(r,h);!g.done;_++,g=d.next())null!==(g=y(h,r,_,g.value,l))&&(e&&null!==g.alternate&&h.delete(null===g.key?_:g.key),s=i(g,s,_),null===c?u=g:c.sibling=g,c=g);return e&&h.forEach((function(e){return t(r,e)})),u}return function(e,a,i,d){var h="object"==typeof i&&null!==i&&i.type===c&&null===i.key;h&&(i=i.props.children);var _="object"==typeof i&&null!==i;if(_)switch(i.$$typeof){case l:e:{for(_=i.key,h=a;null!==h;){if(h.key===_){switch(h.tag){case 7:if(i.type===c){n(e,h.sibling),(a=r(h,i.props.children)).return=e,e=a;break e}break;default:if(h.elementType===i.type){n(e,h.sibling),(a=r(h,i.props)).ref=xn(e,h,i),a.return=e,e=a;break e}}n(e,h);break}t(e,h),h=h.sibling}i.type===c?((a=bs(i.props.children,e.mode,d,i.key)).return=e,e=a):((d=Ys(i.type,i.key,i.props,null,e.mode,d)).ref=xn(e,a,i),d.return=e,e=d)}return s(e);case u:e:{for(h=i.key;null!==a;){if(a.key===h){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(e,a.sibling),(a=r(a,i.children||[])).return=e,e=a;break e}n(e,a);break}t(e,a),a=a.sibling}(a=Ds(i,e.mode,d)).return=e,e=a}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==a&&6===a.tag?(n(e,a.sibling),(a=r(a,i)).return=e,e=a):(n(e,a),(a=ws(i,e.mode,d)).return=e,e=a),s(e);if(Tn(i))return g(e,a,i,d);if(S(i))return M(e,a,i,d);if(_&&Pn(e,i),void 0===i&&!h)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,T(e.type)||"Component"))}return n(e,a)}}var Cn=Hn(!0),jn=Hn(!1),On={},En=Qe(On),An=Qe(On),Fn=Qe(On);function Nn(e){if(e===On)throw Error(o(174));return e}function Wn(e,t){Ze(Fn,t),Ze(An,e),Ze(En,On),e=A(t),$e(En),Ze(En,e)}function Rn(){$e(En),$e(An),$e(Fn)}function In(e){var t=Nn(Fn.current),n=Nn(En.current);n!==(t=F(n,e.type,t))&&(Ze(An,e),Ze(En,t))}function zn(e){An.current===e&&($e(En),$e(An))}var Gn=Qe(0);function Un(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||Fe(n)||Ne(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Bn=null,Vn=null,Jn=!1;function Kn(e,t){var n=Ms(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qn(e,t){switch(e.tag){case 5:return null!==(t=Ee(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=Ae(t,e.pendingProps))&&(e.stateNode=t,!0);case 13:default:return!1}}function Xn(e){if(Jn){var t=Vn;if(t){var n=t;if(!qn(e,t)){if(!(t=We(n))||!qn(e,t))return e.flags=-1025&e.flags|2,Jn=!1,void(Bn=e);Kn(Bn,n)}Bn=e,Vn=Re(t)}else e.flags=-1025&e.flags|2,Jn=!1,Bn=e}}function Qn(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Bn=e}function $n(e){if(!$||e!==Bn)return!1;if(!Jn)return Qn(e),Jn=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!U(t,e.memoizedProps))for(t=Vn;t;)Kn(e,t),t=We(t);if(Qn(e),13===e.tag){if(!$)throw Error(o(316));if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));Vn=Ge(e)}else Vn=Bn?We(e.stateNode):null;return!0}function Zn(){$&&(Vn=Bn=null,Jn=!1)}var ea=[];function ta(){for(var e=0;e<ea.length;e++){var t=ea[e];q?t._workInProgressVersionPrimary=null:t._workInProgressVersionSecondary=null}ea.length=0}var na=d.ReactCurrentDispatcher,aa=d.ReactCurrentBatchConfig,ra=0,ia=null,sa=null,oa=null,da=!1,la=!1;function ua(){throw Error(o(321))}function ca(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Qt(e[n],t[n]))return!1;return!0}function ha(e,t,n,a,r,i){if(ra=i,ia=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,na.current=null===e||null===e.memoizedState?Na:Wa,e=n(a,r),la){i=0;do{if(la=!1,!(25>i))throw Error(o(301));i+=1,oa=sa=null,t.updateQueue=null,na.current=Ra,e=n(a,r)}while(la)}if(na.current=Fa,t=null!==sa&&null!==sa.next,ra=0,oa=sa=ia=null,da=!1,t)throw Error(o(300));return e}function _a(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===oa?ia.memoizedState=oa=e:oa=oa.next=e,oa}function ma(){if(null===sa){var e=ia.alternate;e=null!==e?e.memoizedState:null}else e=sa.next;var t=null===oa?ia.memoizedState:oa.next;if(null!==t)oa=t,sa=e;else{if(null===e)throw Error(o(310));e={memoizedState:(sa=e).memoizedState,baseState:sa.baseState,baseQueue:sa.baseQueue,queue:sa.queue,next:null},null===oa?ia.memoizedState=oa=e:oa=oa.next=e}return oa}function fa(e,t){return"function"==typeof t?t(e):t}function pa(e){var t=ma(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var a=sa,r=a.baseQueue,i=n.pending;if(null!==i){if(null!==r){var s=r.next;r.next=i.next,i.next=s}a.baseQueue=r=i,n.pending=null}if(null!==r){r=r.next,a=a.baseState;var d=s=i=null,l=r;do{var u=l.lane;if((ra&u)===u)null!==d&&(d=d.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),a=l.eagerReducer===e?l.eagerState:e(a,l.action);else{var c={lane:u,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===d?(s=d=c,i=a):d=d.next=c,ia.lanes|=u,li|=u}l=l.next}while(null!==l&&l!==r);null===d?i=a:d.next=s,Qt(a,t.memoizedState)||(za=!0),t.memoizedState=a,t.baseState=i,t.baseQueue=d,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function ya(e){var t=ma(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var a=n.dispatch,r=n.pending,i=t.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{i=e(i,s.action),s=s.next}while(s!==r);Qt(i,t.memoizedState)||(za=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,a]}function ga(e,t,n){var a=t._getVersion;a=a(t._source);var r=q?t._workInProgressVersionPrimary:t._workInProgressVersionSecondary;if(null!==r?e=r===a:(e=e.mutableReadLanes,(e=(ra&e)===e)&&(q?t._workInProgressVersionPrimary=a:t._workInProgressVersionSecondary=a,ea.push(t))),e)return n(t._source);throw ea.push(t),Error(o(350))}function Ma(e,t,n,a){var r=ti;if(null===r)throw Error(o(349));var i=t._getVersion,s=i(t._source),d=na.current,l=d.useState((function(){return ga(r,t,n)})),u=l[1],c=l[0];l=oa;var h=e.memoizedState,_=h.refs,m=_.getSnapshot,f=h.source;h=h.subscribe;var p=ia;return e.memoizedState={refs:_,source:t,subscribe:a},d.useEffect((function(){_.getSnapshot=n,_.setSnapshot=u;var e=i(t._source);if(!Qt(s,e)){e=n(t._source),Qt(c,e)||(u(e),e=Ei(p),r.mutableReadLanes|=e&r.pendingLanes),e=r.mutableReadLanes,r.entangledLanes|=e;for(var a=r.entanglements,o=e;0<o;){var d=31-Yt(o),l=1<<d;a[d]|=e,o&=~l}}}),[n,t,a]),d.useEffect((function(){return a(t._source,(function(){var e=_.getSnapshot,n=_.setSnapshot;try{n(e(t._source));var a=Ei(p);r.mutableReadLanes|=a&r.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,a]),Qt(m,n)&&Qt(f,t)&&Qt(h,a)||((e={pending:null,dispatch:null,lastRenderedReducer:fa,lastRenderedState:c}).dispatch=u=Aa.bind(null,ia,e),l.queue=e,l.baseQueue=null,c=ga(r,t,n),l.memoizedState=l.baseState=c),c}function va(e,t,n){return Ma(ma(),e,t,n)}function La(e){var t=_a();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:fa,lastRenderedState:e}).dispatch=Aa.bind(null,ia,e),[t.memoizedState,e]}function Ya(e,t,n,a){return e={tag:e,create:t,destroy:n,deps:a,next:null},null===(t=ia.updateQueue)?(t={lastEffect:null},ia.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(a=n.next,n.next=e,e.next=a,t.lastEffect=e),e}function ba(e){return e={current:e},_a().memoizedState=e}function ka(){return ma().memoizedState}function wa(e,t,n,a){var r=_a();ia.flags|=e,r.memoizedState=Ya(1|t,n,void 0,void 0===a?null:a)}function Da(e,t,n,a){var r=ma();a=void 0===a?null:a;var i=void 0;if(null!==sa){var s=sa.memoizedState;if(i=s.destroy,null!==a&&ca(a,s.deps))return void Ya(t,n,i,a)}ia.flags|=e,r.memoizedState=Ya(1|t,n,i,a)}function Sa(e,t){return wa(516,4,e,t)}function Ta(e,t){return Da(516,4,e,t)}function xa(e,t){return Da(4,2,e,t)}function Pa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ha(e,t,n){return n=null!=n?n.concat([e]):null,Da(4,2,Pa.bind(null,t,e),n)}function Ca(){}function ja(e,t){var n=ma();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&ca(t,a[1])?a[0]:(n.memoizedState=[e,t],e)}function Oa(e,t){var n=ma();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&ca(t,a[1])?a[0]:(e=e(),n.memoizedState=[e,t],e)}function Ea(e,t){var n=Ut();Vt(98>n?98:n,(function(){e(!0)})),Vt(97<n?97:n,(function(){var n=aa.transition;aa.transition=1;try{e(!1),t()}finally{aa.transition=n}}))}function Aa(e,t,n){var a=Oi(),r=Ei(e),i={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},s=t.pending;if(null===s?i.next=i:(i.next=s.next,s.next=i),t.pending=i,s=e.alternate,e===ia||null!==s&&s===ia)la=da=!0;else{if(0===e.lanes&&(null===s||0===s.lanes)&&null!==(s=t.lastRenderedReducer))try{var o=t.lastRenderedState,d=s(o,n);if(i.eagerReducer=s,i.eagerState=d,Qt(d,o))return}catch(e){}Ai(e,r,a)}}var Fa={readContext:hn,useCallback:ua,useContext:ua,useEffect:ua,useImperativeHandle:ua,useLayoutEffect:ua,useMemo:ua,useReducer:ua,useRef:ua,useState:ua,useDebugValue:ua,useDeferredValue:ua,useTransition:ua,useMutableSource:ua,useOpaqueIdentifier:ua,unstable_isNewReconciler:!1},Na={readContext:hn,useCallback:function(e,t){return _a().memoizedState=[e,void 0===t?null:t],e},useContext:hn,useEffect:Sa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,Pa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wa(4,2,e,t)},useMemo:function(e,t){var n=_a();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var a=_a();return t=void 0!==n?n(t):t,a.memoizedState=a.baseState=t,e=(e=a.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Aa.bind(null,ia,e),[a.memoizedState,e]},useRef:ba,useState:La,useDebugValue:Ca,useDeferredValue:function(e){var t=La(e),n=t[0],a=t[1];return Sa((function(){var t=aa.transition;aa.transition=1;try{a(e)}finally{aa.transition=t}}),[e]),n},useTransition:function(){var e=La(!1),t=e[0];return ba(e=Ea.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var a=_a();return a.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},Ma(a,e,t,n)},useOpaqueIdentifier:function(){if(Jn){var e=!1,t=ee((function(){throw e||(e=!0,n(te())),Error(o(355))})),n=La(t)[1];return 0==(2&ia.mode)&&(ia.flags|=516,Ya(5,(function(){n(te())}),void 0,null)),t}return La(t=te()),t},unstable_isNewReconciler:!1},Wa={readContext:hn,useCallback:ja,useContext:hn,useEffect:Ta,useImperativeHandle:Ha,useLayoutEffect:xa,useMemo:Oa,useReducer:pa,useRef:ka,useState:function(){return pa(fa)},useDebugValue:Ca,useDeferredValue:function(e){var t=pa(fa),n=t[0],a=t[1];return Ta((function(){var t=aa.transition;aa.transition=1;try{a(e)}finally{aa.transition=t}}),[e]),n},useTransition:function(){var e=pa(fa)[0];return[ka().current,e]},useMutableSource:va,useOpaqueIdentifier:function(){return pa(fa)[0]},unstable_isNewReconciler:!1},Ra={readContext:hn,useCallback:ja,useContext:hn,useEffect:Ta,useImperativeHandle:Ha,useLayoutEffect:xa,useMemo:Oa,useReducer:ya,useRef:ka,useState:function(){return ya(fa)},useDebugValue:Ca,useDeferredValue:function(e){var t=ya(fa),n=t[0],a=t[1];return Ta((function(){var t=aa.transition;aa.transition=1;try{a(e)}finally{aa.transition=t}}),[e]),n},useTransition:function(){var e=ya(fa)[0];return[ka().current,e]},useMutableSource:va,useOpaqueIdentifier:function(){return ya(fa)[0]},unstable_isNewReconciler:!1},Ia=d.ReactCurrentOwner,za=!1;function Ga(e,t,n,a){t.child=null===e?jn(t,null,n,a):Cn(t,e.child,n,a)}function Ua(e,t,n,a,r){n=n.render;var i=t.ref;return cn(t,r),a=ha(e,t,n,a,i,r),null===e||za?(t.flags|=1,Ga(e,t,a,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,lr(e,t,r))}function Ba(e,t,n,a,r,i){if(null===e){var s=n.type;return"function"!=typeof s||vs(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ys(n.type,null,a,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,Va(e,t,s,a,r,i))}return s=e.child,0==(r&i)&&(r=s.memoizedProps,(n=null!==(n=n.compare)?n:Zt)(r,a)&&e.ref===t.ref)?lr(e,t,i):(t.flags|=1,(e=Ls(s,a)).ref=t.ref,e.return=t,t.child=e)}function Va(e,t,n,a,r,i){if(null!==e&&Zt(e.memoizedProps,a)&&e.ref===t.ref){if(za=!1,0==(i&r))return t.lanes=e.lanes,lr(e,t,i);0!=(16384&e.flags)&&(za=!0)}return qa(e,t,n,a,i)}function Ja(e,t,n){var a=t.pendingProps,r=a.children,i=null!==e?e.memoizedState:null;if("hidden"===a.mode||"unstable-defer-without-hiding"===a.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},Ui(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},Ui(0,e),null;t.memoizedState={baseLanes:0},Ui(0,null!==i?i.baseLanes:n)}else null!==i?(a=i.baseLanes|n,t.memoizedState=null):a=n,Ui(0,a);return Ga(e,t,r,n),t.child}function Ka(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qa(e,t,n,a,r){var i=it(n)?at:tt.current;return i=rt(t,i),cn(t,r),n=ha(e,t,n,a,i,r),null===e||za?(t.flags|=1,Ga(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,lr(e,t,r))}function Xa(e,t,n,a,r){if(it(n)){var i=!0;lt(t)}else i=!1;if(cn(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),wn(t,n,a),Sn(t,n,a,r),a=!0;else if(null===e){var s=t.stateNode,o=t.memoizedProps;s.props=o;var d=s.context,l=n.contextType;l="object"==typeof l&&null!==l?hn(l):rt(t,l=it(n)?at:tt.current);var u=n.getDerivedStateFromProps,c="function"==typeof u||"function"==typeof s.getSnapshotBeforeUpdate;c||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==a||d!==l)&&Dn(t,s,a,l),_n=!1;var h=t.memoizedState;s.state=h,Mn(t,a,s,r),d=t.memoizedState,o!==a||h!==d||nt.current||_n?("function"==typeof u&&(Yn(t,n,u,a),d=t.memoizedState),(o=_n||kn(t,n,o,a,h,d,l))?(c||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4)):("function"==typeof s.componentDidMount&&(t.flags|=4),t.memoizedProps=a,t.memoizedState=d),s.props=a,s.state=d,s.context=l,a=o):("function"==typeof s.componentDidMount&&(t.flags|=4),a=!1)}else{s=t.stateNode,fn(e,t),o=t.memoizedProps,l=t.type===t.elementType?o:tn(t.type,o),s.props=l,c=t.pendingProps,h=s.context,d="object"==typeof(d=n.contextType)&&null!==d?hn(d):rt(t,d=it(n)?at:tt.current);var _=n.getDerivedStateFromProps;(u="function"==typeof _||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==c||h!==d)&&Dn(t,s,a,d),_n=!1,h=t.memoizedState,s.state=h,Mn(t,a,s,r);var m=t.memoizedState;o!==c||h!==m||nt.current||_n?("function"==typeof _&&(Yn(t,n,_,a),m=t.memoizedState),(l=_n||kn(t,n,l,a,h,m,d))?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(a,m,d),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(a,m,d)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),t.memoizedProps=a,t.memoizedState=m),s.props=a,s.state=m,s.context=d,a=l):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),a=!1)}return Qa(e,t,n,a,i,r)}function Qa(e,t,n,a,r,i){Ka(e,t);var s=0!=(64&t.flags);if(!a&&!s)return r&&ut(t,n,!1),lr(e,t,i);a=t.stateNode,Ia.current=t;var o=s&&"function"!=typeof n.getDerivedStateFromError?null:a.render();return t.flags|=1,null!==e&&s?(t.child=Cn(t,e.child,null,i),t.child=Cn(t,null,o,i)):Ga(e,t,o,i),t.memoizedState=a.state,r&&ut(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?ot(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ot(0,t.context,!1),Wn(e,t.containerInfo)}var Za,er,tr,nr,ar={dehydrated:null,retryLane:0};function rr(e,t,n){var a,r=t.pendingProps,i=Gn.current,s=!1;return(a=0!=(64&t.flags))||(a=(null===e||null!==e.memoizedState)&&0!=(2&i)),a?(s=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(i|=1),Ze(Gn,1&i),null===e?(void 0!==r.fallback&&Xn(t),e=r.children,i=r.fallback,s?(e=ir(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ar,e):"number"==typeof r.unstable_expectedLoadTime?(e=ir(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ar,t.lanes=33554432,e):((n=ks({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,s?(r=function(e,t,n,a,r){var i=t.mode,s=e.child;e=s.sibling;var o={mode:"hidden",children:n};return 0==(2&i)&&t.child!==s?((n=t.child).childLanes=0,n.pendingProps=o,null!==(s=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=s,s.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ls(s,o),null!==e?a=Ls(e,a):(a=bs(a,i,r,null)).flags|=2,a.return=t,n.return=t,n.sibling=a,t.child=n,a}(e,t,r.children,r.fallback,n),s=t.child,i=e.child.memoizedState,s.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},s.childLanes=e.childLanes&~n,t.memoizedState=ar,r):(n=function(e,t,n,a){var r=e.child;return e=r.sibling,n=Ls(r,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=a),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,r.children,n),t.memoizedState=null,n))}function ir(e,t,n,a){var r=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&r)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=ks(t,r,0,null),n=bs(n,r,a,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function sr(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),un(e.return,t)}function or(e,t,n,a,r,i){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:a,tail:n,tailMode:r,lastEffect:i}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=a,s.tail=n,s.tailMode=r,s.lastEffect=i)}function dr(e,t,n){var a=t.pendingProps,r=a.revealOrder,i=a.tail;if(Ga(e,t,a.children,n),0!=(2&(a=Gn.current)))a=1&a|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&sr(e,n);else if(19===e.tag)sr(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}a&=1}if(Ze(Gn,a),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===Un(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),or(t,!1,r,n,i,t.lastEffect);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Un(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}or(t,!0,n,null,i,t.lastEffect);break;case"together":or(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function lr(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),li|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ls(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ls(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ur(e){e.flags|=4}if(X)Za=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)I(e,n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},er=function(){},tr=function(e,t,n,a,r){if((e=e.memoizedProps)!==a){var i=t.stateNode,s=Nn(En.current);n=G(i,n,e,a,r,s),(t.updateQueue=n)&&ur(t)}},nr=function(e,t,n,a){n!==a&&ur(t)};else if(Q){Za=function(e,t,n,a){for(var r=t.child;null!==r;){if(5===r.tag){var i=r.stateNode;n&&a&&(i=je(i,r.type,r.memoizedProps,r)),I(e,i)}else if(6===r.tag)i=r.stateNode,n&&a&&(i=Oe(i,r.memoizedProps,r)),I(e,i);else if(4!==r.tag){if(13===r.tag&&0!=(4&r.flags)&&(i=null!==r.memoizedState)){var s=r.child;if(null!==s&&(null!==s.child&&(s.child.return=s,Za(e,s,!0,i)),null!==(i=s.sibling))){i.return=r,r=i;continue}}if(null!==r.child){r.child.return=r,r=r.child;continue}}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}};var cr=function(e,t,n,a){for(var r=t.child;null!==r;){if(5===r.tag){var i=r.stateNode;n&&a&&(i=je(i,r.type,r.memoizedProps,r)),Pe(e,i)}else if(6===r.tag)i=r.stateNode,n&&a&&(i=Oe(i,r.memoizedProps,r)),Pe(e,i);else if(4!==r.tag){if(13===r.tag&&0!=(4&r.flags)&&(i=null!==r.memoizedState)){var s=r.child;if(null!==s&&(null!==s.child&&(s.child.return=s,cr(e,s,!0,i)),null!==(i=s.sibling))){i.return=r,r=i;continue}}if(null!==r.child){r.child.return=r,r=r.child;continue}}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}};er=function(e){var t=e.stateNode;if(null!==e.firstEffect){var n=t.containerInfo,a=xe(n);cr(a,e,!1,!1),t.pendingChildren=a,ur(e),He(n,a)}},tr=function(e,t,n,a,r){var i=e.stateNode,s=e.memoizedProps;if((e=null===t.firstEffect)&&s===a)t.stateNode=i;else{var o=t.stateNode,d=Nn(En.current),l=null;s!==a&&(l=G(o,n,s,a,r,d)),e&&null===l?t.stateNode=i:(i=Te(i,l,n,s,a,t,e,o),z(i,n,a,r,d)&&ur(t),t.stateNode=i,e?ur(t):Za(i,t,!1,!1))}},nr=function(e,t,n,a){n!==a?(e=Nn(Fn.current),n=Nn(En.current),t.stateNode=B(a,e,n,t),ur(t)):t.stateNode=e.stateNode}}else er=function(){},tr=function(){},nr=function(){};function hr(e,t){if(!Jn)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var a=null;null!==n;)null!==n.alternate&&(a=n),n=n.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function _r(e,t,n){var a=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return it(t.type)&&st(),null;case 3:return Rn(),$e(nt),$e(tt),ta(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==e&&null!==e.child||($n(t)?ur(t):a.hydrate||(t.flags|=256)),er(t),null;case 5:zn(t);var r=Nn(Fn.current);if(n=t.type,null!==e&&null!=t.stateNode)tr(e,t,n,a,r),e.ref!==t.ref&&(t.flags|=128);else{if(!a){if(null===t.stateNode)throw Error(o(166));return null}if(e=Nn(En.current),$n(t)){if(!$)throw Error(o(175));e=Ie(t.stateNode,t.type,t.memoizedProps,r,e,t),t.updateQueue=e,null!==e&&ur(t)}else{var i=R(n,a,r,e,t);Za(i,t,!1,!1),t.stateNode=i,z(i,n,a,r,e)&&ur(t)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)nr(e,t,e.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(o(166));if(e=Nn(Fn.current),r=Nn(En.current),$n(t)){if(!$)throw Error(o(176));ze(t.stateNode,t.memoizedProps,t)&&ur(t)}else t.stateNode=B(a,e,r,t)}return null;case 13:return $e(Gn),a=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(a=null!==a,r=!1,null===e?void 0!==t.memoizedProps.fallback&&$n(t):r=null!==e.memoizedState,a&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Gn.current)?0===si&&(si=3):(0!==si&&3!==si||(si=4),null===ti||0==(134217727&li)&&0==(134217727&ui)||Ri(ti,ai))),Q&&a&&(t.flags|=4),X&&(a||r)&&(t.flags|=4),null);case 4:return Rn(),er(t),null===e&&re(t.stateNode.containerInfo),null;case 10:return ln(t),null;case 17:return it(t.type)&&st(),null;case 19:if($e(Gn),null===(a=t.memoizedState))return null;if(r=0!=(64&t.flags),null===(i=a.rendering))if(r)hr(a,!1);else{if(0!==si||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(i=Un(e))){for(t.flags|=64,hr(a,!1),null!==(e=i.updateQueue)&&(t.updateQueue=e,t.flags|=4),null===a.lastEffect&&(t.firstEffect=null),t.lastEffect=a.lastEffect,e=n,a=t.child;null!==a;)n=e,(r=a).flags&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(i=r.alternate)?(r.childLanes=0,r.lanes=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null,r.stateNode=null):(r.childLanes=i.childLanes,r.lanes=i.lanes,r.child=i.child,r.memoizedProps=i.memoizedProps,r.memoizedState=i.memoizedState,r.updateQueue=i.updateQueue,r.type=i.type,n=i.dependencies,r.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),a=a.sibling;return Ze(Gn,1&Gn.current|2),t.child}e=e.sibling}null!==a.tail&&Gt()>mi&&(t.flags|=64,r=!0,hr(a,!1),t.lanes=33554432)}else{if(!r)if(null!==(e=Un(i))){if(t.flags|=64,r=!0,null!==(e=e.updateQueue)&&(t.updateQueue=e,t.flags|=4),hr(a,!0),null===a.tail&&"hidden"===a.tailMode&&!i.alternate&&!Jn)return null!==(t=t.lastEffect=a.lastEffect)&&(t.nextEffect=null),null}else 2*Gt()-a.renderingStartTime>mi&&1073741824!==n&&(t.flags|=64,r=!0,hr(a,!1),t.lanes=33554432);a.isBackwards?(i.sibling=t.child,t.child=i):(null!==(e=a.last)?e.sibling=i:t.child=i,a.last=i)}return null!==a.tail?(e=a.tail,a.rendering=e,a.tail=e.sibling,a.lastEffect=t.lastEffect,a.renderingStartTime=Gt(),e.sibling=null,t=Gn.current,Ze(Gn,r?1&t|2:1&t),e):null;case 23:case 24:return Bi(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==a.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function mr(e){switch(e.tag){case 1:it(e.type)&&st();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Rn(),$e(nt),$e(tt),ta(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return zn(e),null;case 13:return $e(Gn),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return $e(Gn),null;case 4:return Rn(),null;case 10:return ln(e),null;case 23:case 24:return Bi(),null;default:return null}}function fr(e,t){try{var n="",a=t;do{n+=en(a),a=a.return}while(a);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r}}function pr(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var yr="function"==typeof WeakMap?WeakMap:Map;function gr(e,t,n){(n=pn(-1,n)).tag=3,n.payload={element:null};var a=t.value;return n.callback=function(){gi||(gi=!0,Mi=a),pr(0,t)},n}function Mr(e,t,n){(n=pn(-1,n)).tag=3;var a=e.type.getDerivedStateFromError;if("function"==typeof a){var r=t.value;n.payload=function(){return pr(0,t),a(r)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof a&&(null===vi?vi=new Set([this]):vi.add(this),pr(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var vr="function"==typeof WeakSet?WeakSet:Set;function Lr(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ds(e,t)}else t.current=null}function Yr(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,a=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:tn(t.type,n),a),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(X&&256&t.flags&&Se(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function br(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var a=n.destroy;n.destroy=void 0,void 0!==a&&a()}n=n.next}while(n!==t)}}function kr(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var a=e.create;e.destroy=a()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var r=e;a=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(is(n,e),rs(n,e)),e=a}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(a=n.elementType===n.type?t.memoizedProps:tn(n.type,t.memoizedProps),e.componentDidUpdate(a,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&vn(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=E(n.child.stateNode);break;case 1:e=n.child.stateNode}vn(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&pe(e,n.type,n.memoizedProps,n));case 6:case 4:case 12:return;case 13:return void($&&null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Be(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function wr(e,t){if(X)for(var n=e;;){if(5===n.tag){var a=n.stateNode;t?be(a):we(n.stateNode,n.memoizedProps)}else if(6===n.tag)a=n.stateNode,t?ke(a):De(a,n.memoizedProps);else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Dr(e,t){if(ht&&"function"==typeof ht.onCommitFiberUnmount)try{ht.onCommitFiberUnmount(ct,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var a=n,r=a.destroy;if(a=a.tag,void 0!==r)if(0!=(4&a))is(t,n);else{a=t;try{r()}catch(e){ds(a,e)}}n=n.next}while(n!==e)}break;case 1:if(Lr(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ds(t,e)}break;case 5:Lr(t);break;case 4:X?jr(e,t):Q&&Q&&(t=t.stateNode.containerInfo,e=xe(t),Ce(t,e))}}function Sr(e,t){for(var n=t;;)if(Dr(e,n),null===n.child||X&&4===n.tag){if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}else n.child.return=n,n=n.child}function Tr(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function xr(e){return 5===e.tag||3===e.tag||4===e.tag}function Pr(e){if(X){e:{for(var t=e.return;null!==t;){if(xr(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var a=!1;break;case 3:case 4:t=t.containerInfo,a=!0;break;default:throw Error(o(161))}16&n.flags&&(Ye(t),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||xr(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}a?Hr(e,n,t):Cr(e,n,t)}}function Hr(e,t,n){var a=e.tag,r=5===a||6===a;if(r)e=r?e.stateNode:e.stateNode.instance,t?Me(n,e,t):me(n,e);else if(4!==a&&null!==(e=e.child))for(Hr(e,t,n),e=e.sibling;null!==e;)Hr(e,t,n),e=e.sibling}function Cr(e,t,n){var a=e.tag,r=5===a||6===a;if(r)e=r?e.stateNode:e.stateNode.instance,t?ge(n,e,t):_e(n,e);else if(4!==a&&null!==(e=e.child))for(Cr(e,t,n),e=e.sibling;null!==e;)Cr(e,t,n),e=e.sibling}function jr(e,t){for(var n,a,r=t,i=!1;;){if(!i){i=r.return;e:for(;;){if(null===i)throw Error(o(160));switch(n=i.stateNode,i.tag){case 5:a=!1;break e;case 3:case 4:n=n.containerInfo,a=!0;break e}i=i.return}i=!0}if(5===r.tag||6===r.tag)Sr(e,r),a?Le(n,r.stateNode):ve(n,r.stateNode);else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,a=!0,r.child.return=r,r=r.child;continue}}else if(Dr(e,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;4===(r=r.return).tag&&(i=!1)}r.sibling.return=r.return,r=r.sibling}}function Or(e,t){if(X){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void br(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var a=t.memoizedProps;e=null!==e?e.memoizedProps:a;var r=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&ye(n,i,r,e,a,t)}return;case 6:if(null===t.stateNode)throw Error(o(162));return n=t.memoizedProps,void fe(t.stateNode,null!==e?e.memoizedProps:n,n);case 3:return void($&&(t=t.stateNode,t.hydrate&&(t.hydrate=!1,Ue(t.containerInfo))));case 12:return;case 13:return Er(t),void Ar(t);case 19:return void Ar(t);case 17:return;case 23:case 24:return void wr(t,null!==t.memoizedState)}throw Error(o(163))}switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void br(3,t);case 12:return;case 13:return Er(t),void Ar(t);case 19:return void Ar(t);case 3:$&&(n=t.stateNode).hydrate&&(n.hydrate=!1,Ue(n.containerInfo));break;case 23:case 24:return}e:if(Q){switch(t.tag){case 1:case 5:case 6:case 20:break e;case 3:case 4:t=t.stateNode,Ce(t.containerInfo,t.pendingChildren);break e}throw Error(o(163))}}function Er(e){null!==e.memoizedState&&(_i=Gt(),X&&wr(e.child,!0))}function Ar(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new vr),t.forEach((function(t){var a=us.bind(null,e,t);n.has(t)||(n.add(t),t.then(a,a))}))}}function Fr(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Nr=0,Wr=1,Rr=2,Ir=3,zr=4;if("function"==typeof Symbol&&Symbol.for){var Gr=Symbol.for;Nr=Gr("selector.component"),Wr=Gr("selector.has_pseudo_class"),Rr=Gr("selector.role"),Ir=Gr("selector.test_id"),zr=Gr("selector.text")}function Ur(e){var t=Z(e);if(null!=t){if("string"!=typeof t.memoizedProps["data-testname"])throw Error(o(364));return t}if(null===(e=se(e)))throw Error(o(362));return e.stateNode.current}function Br(e,t){switch(t.$$typeof){case Nr:if(e.type===t.value)return!0;break;case Wr:e:{t=t.value,e=[e,0];for(var n=0;n<e.length;){var a=e[n++],r=e[n++],i=t[r];if(5!==a.tag||!le(a)){for(;null!=i&&Br(a,i);)i=t[++r];if(r===t.length){t=!0;break e}for(a=a.child;null!==a;)e.push(a,r),a=a.sibling}}t=!1}return t;case Rr:if(5===e.tag&&ue(e.stateNode,t.value))return!0;break;case zr:if((5===e.tag||6===e.tag)&&null!==(e=de(e))&&0<=e.indexOf(t.value))return!0;break;case Ir:if(5===e.tag&&"string"==typeof(e=e.memoizedProps["data-testname"])&&e.toLowerCase()===t.value.toLowerCase())return!0;break;default:throw Error(o(365,t))}return!1}function Vr(e){switch(e.$$typeof){case Nr:return"<"+(T(e.value)||"Unknown")+">";case Wr:return":has("+(Vr(e)||"")+")";case Rr:return'[role="'+e.value+'"]';case zr:return'"'+e.value+'"';case Ir:return'[data-testname="'+e.value+'"]';default:throw Error(o(365,e))}}function Jr(e,t){var n=[];e=[e,0];for(var a=0;a<e.length;){var r=e[a++],i=e[a++],s=t[i];if(5!==r.tag||!le(r)){for(;null!=s&&Br(r,s);)s=t[++i];if(i===t.length)n.push(r);else for(r=r.child;null!==r;)e.push(r,i),r=r.sibling}}return n}function Kr(e,t){if(!ie)throw Error(o(363));e=Jr(e=Ur(e),t),t=[],e=Array.from(e);for(var n=0;n<e.length;){var a=e[n++];if(5===a.tag)le(a)||t.push(a.stateNode);else for(a=a.child;null!==a;)e.push(a),a=a.sibling}return t}var qr=null,Xr=Math.ceil,Qr=d.ReactCurrentDispatcher,$r=d.ReactCurrentOwner,Zr=d.IsSomeRendererActing,ei=0,ti=null,ni=null,ai=0,ri=0,ii=Qe(0),si=0,oi=null,di=0,li=0,ui=0,ci=0,hi=null,_i=0,mi=1/0;function fi(){mi=Gt()+500}var pi,yi=null,gi=!1,Mi=null,vi=null,Li=!1,Yi=null,bi=90,ki=[],wi=[],Di=null,Si=0,Ti=null,xi=-1,Pi=0,Hi=0,Ci=null,ji=!1;function Oi(){return 0!=(48&ei)?Gt():-1!==xi?xi:xi=Gt()}function Ei(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ut()?1:2;if(0===Pi&&(Pi=di),0!==Xt.transition){0!==Hi&&(Hi=null!==hi?hi.pendingLanes:0),e=Pi;var t=4186112&~Hi;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ut(),e=gt(0!=(4&ei)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),Pi)}function Ai(e,t,n){if(50<Si)throw Si=0,Ti=null,Error(o(185));if(null===(e=Fi(e,t)))return null;Lt(e,t,n),e===ti&&(ui|=t,4===si&&Ri(e,ai));var a=Ut();1===t?0!=(8&ei)&&0==(48&ei)?Ii(e):(Ni(e,n),0===ei&&(fi(),Kt())):(0==(4&ei)||98!==a&&99!==a||(null===Di?Di=new Set([e]):Di.add(e)),Ni(e,n)),hi=e}function Fi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Ni(e,t){for(var n=e.callbackNode,a=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var d=31-Yt(s),l=1<<d,u=i[d];if(-1===u){if(0==(l&a)||0!=(l&r)){u=t,ft(l);var c=mt;i[d]=10<=c?u+250:6<=c?u+5e3:-1}}else u<=t&&(e.expiredLanes|=l);s&=~l}if(a=pt(e,e===ti?ai:0),t=mt,0===a)null!==n&&(n!==Ft&&St(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ft&&St(n)}15===t?(n=Ii.bind(null,e),null===Wt?(Wt=[n],Rt=Dt(Ct,qt)):Wt.push(n),n=Ft):n=14===t?Jt(99,Ii.bind(null,e)):Jt(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),Wi.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function Wi(e){if(xi=-1,Hi=Pi=0,0!=(48&ei))throw Error(o(327));var t=e.callbackNode;if(as()&&e.callbackNode!==t)return null;var n=pt(e,e===ti?ai:0);if(0===n)return null;var a=n,r=ei;ei|=16;var i=Ki();for(ti===e&&ai===a||(fi(),Vi(e,a));;)try{Qi();break}catch(t){Ji(e,t)}if(on(),Qr.current=i,ei=r,null!==ni?a=0:(ti=null,ai=0,a=si),0!=(di&ui))Vi(e,0);else if(0!==a){if(2===a&&(ei|=64,e.hydrate&&(e.hydrate=!1,Se(e.containerInfo)),0!==(n=yt(e))&&(a=qi(e,n))),1===a)throw t=oi,Vi(e,0),Ri(e,n),Ni(e,Gt()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,a){case 0:case 1:throw Error(o(345));case 2:es(e);break;case 3:if(Ri(e,n),(62914560&n)===n&&10<(a=_i+500-Gt())){if(0!==pt(e,0))break;if(((r=e.suspendedLanes)&n)!==n){Oi(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=V(es.bind(null,e),a);break}es(e);break;case 4:if(Ri(e,n),(4186112&n)===n)break;for(a=e.eventTimes,r=-1;0<n;){var s=31-Yt(n);i=1<<s,(s=a[s])>r&&(r=s),n&=~i}if(n=r,10<(n=(120>(n=Gt()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Xr(n/1960))-n)){e.timeoutHandle=V(es.bind(null,e),n);break}es(e);break;case 5:es(e);break;default:throw Error(o(329))}}return Ni(e,Gt()),e.callbackNode===t?Wi.bind(null,e):null}function Ri(e,t){for(t&=~ci,t&=~ui,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Yt(t),a=1<<n;e[n]=-1,t&=~a}}function Ii(e){if(0!=(48&ei))throw Error(o(327));if(as(),e===ti&&0!=(e.expiredLanes&ai)){var t=ai,n=qi(e,t);0!=(di&ui)&&(n=qi(e,t=pt(e,t)))}else n=qi(e,t=pt(e,0));if(0!==e.tag&&2===n&&(ei|=64,e.hydrate&&(e.hydrate=!1,Se(e.containerInfo)),0!==(t=yt(e))&&(n=qi(e,t))),1===n)throw n=oi,Vi(e,0),Ri(e,t),Ni(e,Gt()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,es(e),Ni(e,Gt()),null}function zi(e,t){var n=ei;ei|=1;try{return e(t)}finally{0===(ei=n)&&(fi(),Kt())}}function Gi(e,t){var n=ei;if(0!=(48&n))return e(t);ei|=1;try{if(e)return Vt(99,e.bind(null,t))}finally{ei=n,Kt()}}function Ui(e,t){Ze(ii,ri),ri|=t,di|=t}function Bi(){ri=ii.current,$e(ii)}function Vi(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==K&&(e.timeoutHandle=K,J(n)),null!==ni)for(n=ni.return;null!==n;){var a=n;switch(a.tag){case 1:null!=(a=a.type.childContextTypes)&&st();break;case 3:Rn(),$e(nt),$e(tt),ta();break;case 5:zn(a);break;case 4:Rn();break;case 13:case 19:$e(Gn);break;case 10:ln(a);break;case 23:case 24:Bi()}n=n.return}ti=e,ni=Ls(e.current,null),ai=ri=di=t,si=0,oi=null,ci=ui=li=0}function Ji(e,t){for(;;){var n=ni;try{if(on(),na.current=Fa,da){for(var a=ia.memoizedState;null!==a;){var r=a.queue;null!==r&&(r.pending=null),a=a.next}da=!1}if(ra=0,oa=sa=ia=null,la=!1,$r.current=null,null===n||null===n.return){si=1,oi=t,ni=null;break}e:{var i=e,s=n.return,o=n,d=t;if(t=ai,o.flags|=2048,o.firstEffect=o.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var l=d;if(0==(2&o.mode)){var u=o.alternate;u?(o.updateQueue=u.updateQueue,o.memoizedState=u.memoizedState,o.lanes=u.lanes):(o.updateQueue=null,o.memoizedState=null)}var c=0!=(1&Gn.current),h=s;do{var _;if(_=13===h.tag){var m=h.memoizedState;if(null!==m)_=null!==m.dehydrated;else{var f=h.memoizedProps;_=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!c)}}if(_){var p=h.updateQueue;if(null===p){var y=new Set;y.add(l),h.updateQueue=y}else p.add(l);if(0==(2&h.mode)){if(h.flags|=64,o.flags|=16384,o.flags&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var g=pn(-1,1);g.tag=2,yn(o,g)}o.lanes|=1;break e}d=void 0,o=t;var M=i.pingCache;if(null===M?(M=i.pingCache=new yr,d=new Set,M.set(l,d)):void 0===(d=M.get(l))&&(d=new Set,M.set(l,d)),!d.has(o)){d.add(o);var v=ls.bind(null,i,l,o);l.then(v,v)}h.flags|=4096,h.lanes=t;break e}h=h.return}while(null!==h);d=Error((T(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==si&&(si=2),d=fr(d,o),h=s;do{switch(h.tag){case 3:i=d,h.flags|=4096,t&=-t,h.lanes|=t,gn(h,gr(0,i,t));break e;case 1:i=d;var L=h.type,Y=h.stateNode;if(0==(64&h.flags)&&("function"==typeof L.getDerivedStateFromError||null!==Y&&"function"==typeof Y.componentDidCatch&&(null===vi||!vi.has(Y)))){h.flags|=4096,t&=-t,h.lanes|=t,gn(h,Mr(h,i,t));break e}}h=h.return}while(null!==h)}Zi(n)}catch(e){t=e,ni===n&&null!==n&&(ni=n=n.return);continue}break}}function Ki(){var e=Qr.current;return Qr.current=Fa,null===e?Fa:e}function qi(e,t){var n=ei;ei|=16;var a=Ki();for(ti===e&&ai===t||Vi(e,t);;)try{Xi();break}catch(t){Ji(e,t)}if(on(),ei=n,Qr.current=a,null!==ni)throw Error(o(261));return ti=null,ai=0,si}function Xi(){for(;null!==ni;)$i(ni)}function Qi(){for(;null!==ni&&!Tt();)$i(ni)}function $i(e){var t=pi(e.alternate,e,ri);e.memoizedProps=e.pendingProps,null===t?Zi(e):ni=t,$r.current=null}function Zi(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=_r(n,t,ri)))return void(ni=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&ri)||0==(4&n.mode)){for(var a=0,r=n.child;null!==r;)a|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=a}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=mr(t)))return n.flags&=2047,void(ni=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(ni=t);ni=t=e}while(null!==t);0===si&&(si=5)}function es(e){var t=Ut();return Vt(99,ts.bind(null,e,t)),null}function ts(e,t){do{as()}while(null!==Yi);if(0!=(48&ei))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var a=n.lanes|n.childLanes,r=a,i=e.pendingLanes&~r;e.pendingLanes=r,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=r,e.mutableReadLanes&=r,e.entangledLanes&=r,r=e.entanglements;for(var s=e.eventTimes,d=e.expirationTimes;0<i;){var l=31-Yt(i),u=1<<l;r[l]=0,s[l]=-1,d[l]=-1,i&=~u}if(null!==Di&&0==(24&a)&&Di.has(e)&&Di.delete(e),e===ti&&(ni=ti=null,ai=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){r=ei,ei|=32,$r.current=null,Ci=N(e.containerInfo),ji=!1,yi=a;do{try{ns()}catch(e){if(null===yi)throw Error(o(330));ds(yi,e),yi=yi.nextEffect}}while(null!==yi);Ci=null,yi=a;do{try{for(s=e;null!==yi;){var c=yi.flags;if(16&c&&X&&Ye(yi.stateNode),128&c){var h=yi.alternate;if(null!==h){var _=h.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&c){case 2:Pr(yi),yi.flags&=-3;break;case 6:Pr(yi),yi.flags&=-3,Or(yi.alternate,yi);break;case 1024:yi.flags&=-1025;break;case 1028:yi.flags&=-1025,Or(yi.alternate,yi);break;case 4:Or(yi.alternate,yi);break;case 8:d=s,i=yi,X?jr(d,i):Sr(d,i);var m=i.alternate;Tr(i),null!==m&&Tr(m)}yi=yi.nextEffect}}catch(e){if(null===yi)throw Error(o(330));ds(yi,e),yi=yi.nextEffect}}while(null!==yi);ji&&ae(),W(e.containerInfo),e.current=n,yi=a;do{try{for(c=e;null!==yi;){var f=yi.flags;if(36&f&&kr(c,yi.alternate,yi),128&f){h=void 0;var p=yi.ref;if(null!==p){var y=yi.stateNode;switch(yi.tag){case 5:h=E(y);break;default:h=y}"function"==typeof p?p(h):p.current=h}}yi=yi.nextEffect}}catch(e){if(null===yi)throw Error(o(330));ds(yi,e),yi=yi.nextEffect}}while(null!==yi);yi=null,Nt(),ei=r}else e.current=n;if(Li)Li=!1,Yi=e,bi=t;else for(yi=a;null!==yi;)t=yi.nextEffect,yi.nextEffect=null,8&yi.flags&&((f=yi).sibling=null,f.stateNode=null),yi=t;if(0===(a=e.pendingLanes)&&(vi=null),1===a?e===Ti?Si++:(Si=0,Ti=e):Si=0,n=n.stateNode,ht&&"function"==typeof ht.onCommitFiberRoot)try{ht.onCommitFiberRoot(ct,n,void 0,64==(64&n.current.flags))}catch(e){}if(Ni(e,Gt()),gi)throw gi=!1,e=Mi,Mi=null,e;return 0!=(8&ei)||Kt(),null}function ns(){for(;null!==yi;){var e=yi.alternate;ji||null===Ci||(0!=(8&yi.flags)?j(yi,Ci)&&(ji=!0,ne()):13===yi.tag&&Fr(e,yi)&&j(yi,Ci)&&(ji=!0,ne()));var t=yi.flags;0!=(256&t)&&Yr(e,yi),0==(512&t)||Li||(Li=!0,Jt(97,(function(){return as(),null}))),yi=yi.nextEffect}}function as(){if(90!==bi){var e=97<bi?97:bi;return bi=90,Vt(e,ss)}return!1}function rs(e,t){ki.push(t,e),Li||(Li=!0,Jt(97,(function(){return as(),null})))}function is(e,t){wi.push(t,e),Li||(Li=!0,Jt(97,(function(){return as(),null})))}function ss(){if(null===Yi)return!1;var e=Yi;if(Yi=null,0!=(48&ei))throw Error(o(331));var t=ei;ei|=32;var n=wi;wi=[];for(var a=0;a<n.length;a+=2){var r=n[a],i=n[a+1],s=r.destroy;if(r.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(o(330));ds(i,e)}}for(n=ki,ki=[],a=0;a<n.length;a+=2){r=n[a],i=n[a+1];try{var d=r.create;r.destroy=d()}catch(e){if(null===i)throw Error(o(330));ds(i,e)}}for(d=e.current.firstEffect;null!==d;)e=d.nextEffect,d.nextEffect=null,8&d.flags&&(d.sibling=null,d.stateNode=null),d=e;return ei=t,Kt(),!0}function os(e,t,n){yn(e,t=gr(0,t=fr(n,t),1)),t=Oi(),null!==(e=Fi(e,1))&&(Lt(e,1,t),Ni(e,t))}function ds(e,t){if(3===e.tag)os(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){os(n,e,t);break}if(1===n.tag){var a=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&(null===vi||!vi.has(a))){var r=Mr(n,e=fr(t,e),1);if(yn(n,r),r=Oi(),null!==(n=Fi(n,1)))Lt(n,1,r),Ni(n,r);else if("function"==typeof a.componentDidCatch&&(null===vi||!vi.has(a)))try{a.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function ls(e,t,n){var a=e.pingCache;null!==a&&a.delete(t),t=Oi(),e.pingedLanes|=e.suspendedLanes&n,ti===e&&(ai&n)===n&&(4===si||3===si&&(62914560&ai)===ai&&500>Gt()-_i?Vi(e,0):ci|=n),Ni(e,t)}function us(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ut()?1:2:(0===Pi&&(Pi=di),0===(t=Mt(62914560&~Pi))&&(t=4194304))),n=Oi(),null!==(e=Fi(e,t))&&(Lt(e,t,n),Ni(e,n))}pi=function(e,t,n){var a=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||nt.current)za=!0;else{if(0==(n&a)){switch(za=!1,t.tag){case 3:$a(t),Zn();break;case 5:In(t);break;case 1:it(t.type)&&lt(t);break;case 4:Wn(t,t.stateNode.containerInfo);break;case 10:dn(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?rr(e,t,n):(Ze(Gn,1&Gn.current),null!==(t=lr(e,t,n))?t.sibling:null);Ze(Gn,1&Gn.current);break;case 19:if(a=0!=(n&t.childLanes),0!=(64&e.flags)){if(a)return dr(e,t,n);t.flags|=64}var r=t.memoizedState;if(null!==r&&(r.rendering=null,r.tail=null,r.lastEffect=null),Ze(Gn,Gn.current),a)break;return null;case 23:case 24:return t.lanes=0,Ja(e,t,n)}return lr(e,t,n)}za=0!=(16384&e.flags)}else za=!1;switch(t.lanes=0,t.tag){case 2:if(a=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=rt(t,tt.current),cn(t,n),r=ha(null,t,a,e,r,n),t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,it(a)){var i=!0;lt(t)}else i=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,mn(t);var s=a.getDerivedStateFromProps;"function"==typeof s&&Yn(t,a,s,e),r.updater=bn,t.stateNode=r,r._reactInternals=t,Sn(t,a,e,n),t=Qa(null,t,a,!0,i,n)}else t.tag=0,Ga(null,t,r,n),t=t.child;return t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return vs(e)?1:0;if(null!=e){if((e=e.$$typeof)===p)return 11;if(e===M)return 14}return 2}(r),e=tn(r,e),i){case 0:t=qa(null,t,r,e,n);break e;case 1:t=Xa(null,t,r,e,n);break e;case 11:t=Ua(null,t,r,e,n);break e;case 14:t=Ba(null,t,r,tn(r.type,e),a,n);break e}throw Error(o(306,r,""))}return t;case 0:return a=t.type,r=t.pendingProps,qa(e,t,a,r=t.elementType===a?r:tn(a,r),n);case 1:return a=t.type,r=t.pendingProps,Xa(e,t,a,r=t.elementType===a?r:tn(a,r),n);case 3:if($a(t),a=t.updateQueue,null===e||null===a)throw Error(o(282));if(a=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,fn(e,t),Mn(t,a,null,n),(a=t.memoizedState.element)===r)Zn(),t=lr(e,t,n);else{if((i=(r=t.stateNode).hydrate)&&($?(Vn=Re(t.stateNode.containerInfo),Bn=t,i=Jn=!0):i=!1),i){if($&&null!=(e=r.mutableSourceEagerHydrationData))for(r=0;r<e.length;r+=2)i=e[r],s=e[r+1],q?i._workInProgressVersionPrimary=s:i._workInProgressVersionSecondary=s,ea.push(i);for(n=jn(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ga(e,t,a,n),Zn();t=t.child}return t;case 5:return In(t),null===e&&Xn(t),a=t.type,r=t.pendingProps,i=null!==e?e.memoizedProps:null,s=r.children,U(a,r)?s=null:null!==i&&U(a,i)&&(t.flags|=16),Ka(e,t),Ga(e,t,s,n),t.child;case 6:return null===e&&Xn(t),null;case 13:return rr(e,t,n);case 4:return Wn(t,t.stateNode.containerInfo),a=t.pendingProps,null===e?t.child=Cn(t,null,a,n):Ga(e,t,a,n),t.child;case 11:return a=t.type,r=t.pendingProps,Ua(e,t,a,r=t.elementType===a?r:tn(a,r),n);case 7:return Ga(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ga(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(a=t.type._context,r=t.pendingProps,s=t.memoizedProps,dn(t,i=r.value),null!==s){var d=s.value;if(0==(i=Qt(d,i)?0:0|("function"==typeof a._calculateChangedBits?a._calculateChangedBits(d,i):1073741823))){if(s.children===r.children&&!nt.current){t=lr(e,t,n);break e}}else for(null!==(d=t.child)&&(d.return=t);null!==d;){var l=d.dependencies;if(null!==l){s=d.child;for(var u=l.firstContext;null!==u;){if(u.context===a&&0!=(u.observedBits&i)){1===d.tag&&((u=pn(-1,n&-n)).tag=2,yn(d,u)),d.lanes|=n,null!==(u=d.alternate)&&(u.lanes|=n),un(d.return,n),l.lanes|=n;break}u=u.next}}else s=10===d.tag&&d.type===t.type?null:d.child;if(null!==s)s.return=d;else for(s=d;null!==s;){if(s===t){s=null;break}if(null!==(d=s.sibling)){d.return=s.return,s=d;break}s=s.return}d=s}}Ga(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,a=(i=t.pendingProps).children,cn(t,n),a=a(r=hn(r,i.unstable_observedBits)),t.flags|=1,Ga(e,t,a,n),t.child;case 14:return i=tn(r=t.type,t.pendingProps),Ba(e,t,r,i=tn(r.type,i),a,n);case 15:return Va(e,t,t.type,t.pendingProps,a,n);case 17:return a=t.type,r=t.pendingProps,r=t.elementType===a?r:tn(a,r),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,it(a)?(e=!0,lt(t)):e=!1,cn(t,n),wn(t,a,r),Sn(t,a,r,n),Qa(null,t,a,!0,e,n);case 19:return dr(e,t,n);case 23:case 24:return Ja(e,t,n)}throw Error(o(156,t.tag))};var cs={current:!1},hs=s.unstable_flushAllWithoutAsserting,_s="function"==typeof hs;function ms(){if(void 0!==hs)return hs();for(var e=!1;as();)e=!0;return e}function fs(t){try{ms(),function(t){if(null===qr)try{var n=("require"+Math.random()).slice(0,7);qr=(e&&e[n]).call(e,"timers").setImmediate}catch(e){qr=function(e){var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}qr(t)}((function(){ms()?fs(t):t()}))}catch(e){t(e)}}var ps=0,ys=!1;function gs(e,t,n,a){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ms(e,t,n,a){return new gs(e,t,n,a)}function vs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ls(e,t){var n=e.alternate;return null===n?((n=Ms(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ys(e,t,n,a,r,i){var s=2;if(a=e,"function"==typeof e)vs(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case c:return bs(n.children,r,i,t);case Y:s=8,r|=16;break;case h:s=8,r|=1;break;case _:return(e=Ms(12,n,t,8|r)).elementType=_,e.type=_,e.lanes=i,e;case y:return(e=Ms(13,n,t,r)).type=y,e.elementType=y,e.lanes=i,e;case g:return(e=Ms(19,n,t,r)).elementType=g,e.lanes=i,e;case b:return ks(n,r,i,t);case k:return(e=Ms(24,n,t,r)).elementType=k,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case m:s=10;break e;case f:s=9;break e;case p:s=11;break e;case M:s=14;break e;case v:s=16,a=null;break e;case L:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ms(s,n,t,r)).elementType=e,t.type=a,t.lanes=i,t}function bs(e,t,n,a){return(e=Ms(7,e,a,t)).lanes=n,e}function ks(e,t,n,a){return(e=Ms(23,e,a,t)).elementType=b,e.lanes=n,e}function ws(e,t,n){return(e=Ms(6,e,null,t)).lanes=n,e}function Ds(e,t,n){return(t=Ms(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ss(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=K,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),$&&(this.mutableSourceEagerHydrationData=null)}function Ts(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=C(t))?null:e.stateNode}function xs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ps(e,t){xs(e,t),(e=e.alternate)&&xs(e,t)}function Hs(e){return null===(e=C(e))?null:e.stateNode}function Cs(){return null}return a.IsThisRendererActing=cs,a.act=function(e){function t(){ps--,Zr.current=n,cs.current=a}!1===ys&&(ys=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),ps++;var n=Zr.current,a=cs.current;Zr.current=!0,cs.current=!0;try{var r=zi(e)}catch(e){throw t(),e}if(null!==r&&"object"==typeof r&&"function"==typeof r.then)return{then:function(e,a){r.then((function(){1<ps||!0===_s&&!0===n?(t(),e()):fs((function(n){t(),n?a(n):e()}))}),(function(e){t(),a(e)}))}};try{1!==ps||!1!==_s&&!1!==n||ms(),t()}catch(e){throw t(),e}return{then:function(e){e()}}},a.attemptContinuousHydration=function(e){13===e.tag&&(Ai(e,67108864,Oi()),Ps(e,67108864))},a.attemptHydrationAtCurrentPriority=function(e){if(13===e.tag){var t=Oi(),n=Ei(e);Ai(e,n,t),Ps(e,n)}},a.attemptSynchronousHydration=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.hydrate){var n=ft(t.pendingLanes);t.expiredLanes|=n&t.pendingLanes,Ni(t,Gt()),0==(48&ei)&&(fi(),Kt())}break;case 13:var a=Oi();Gi((function(){return Ai(e,1,a)})),Ps(e,4)}},a.attemptUserBlockingHydration=function(e){13===e.tag&&(Ai(e,4,Oi()),Ps(e,4))},a.batchedEventUpdates=function(e,t){var n=ei;ei|=2;try{return e(t)}finally{0===(ei=n)&&(fi(),Kt())}},a.batchedUpdates=zi,a.createComponentSelector=function(e){return{$$typeof:Nr,value:e}},a.createContainer=function(e,t,n){return e=new Ss(e,t,n),t=Ms(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e,mn(t),e},a.createHasPsuedoClassSelector=function(e){return{$$typeof:Wr,value:e}},a.createPortal=function(e,t,n){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:u,key:null==a?null:""+a,children:e,containerInfo:t,implementation:n}},a.createRoleSelector=function(e){return{$$typeof:Rr,value:e}},a.createTestNameSelector=function(e){return{$$typeof:Ir,value:e}},a.createTextSelector=function(e){return{$$typeof:zr,value:e}},a.deferredUpdates=function(e){return Vt(97,e)},a.discreteUpdates=function(e,t,n,a,r){var i=ei;ei|=4;try{return Vt(98,e.bind(null,t,n,a,r))}finally{0===(ei=i)&&(fi(),Kt())}},a.findAllNodes=Kr,a.findBoundingRects=function(e,t){if(!ie)throw Error(o(363));t=Kr(e,t),e=[];for(var n=0;n<t.length;n++)e.push(oe(t[n]));for(t=e.length-1;0<t;t--)for(var a=(n=e[t]).x,r=a+n.width,i=n.y,s=i+n.height,d=t-1;0<=d;d--)if(t!==d){var l=e[d],u=l.x,c=u+l.width,h=l.y,_=h+l.height;if(a>=u&&i>=h&&r<=c&&s<=_){e.splice(t,1);break}if(!(a!==u||n.width!==l.width||_<i||h>s)){h>i&&(l.height+=h-i,l.y=i),_<s&&(l.height=s-h),e.splice(t,1);break}if(!(i!==h||n.height!==l.height||c<a||u>r)){u>a&&(l.width+=u-a,l.x=a),c<r&&(l.width=r-u),e.splice(t,1);break}}return e},a.findHostInstance=Ts,a.findHostInstanceWithNoPortals=function(e){return null===(e=function(e){if(!(e=H(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:20===e.tag?e.stateNode.instance:e.stateNode},a.findHostInstanceWithWarning=function(e){return Ts(e)},a.flushControlled=function(e){var t=ei;ei|=1;try{Vt(99,e)}finally{0===(ei=t)&&(fi(),Kt())}},a.flushDiscreteUpdates=function(){0==(49&ei)&&(function(){if(null!==Di){var e=Di;Di=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,Ni(e,Gt())}))}Kt()}(),as())},a.flushPassiveEffects=as,a.flushSync=Gi,a.focusWithin=function(e,t){if(!ie)throw Error(o(363));for(t=Jr(e=Ur(e),t),t=Array.from(t),e=0;e<t.length;){var n=t[e++];if(!le(n)){if(5===n.tag&&ce(n.stateNode))return!0;for(n=n.child;null!==n;)t.push(n),n=n.sibling}}return!1},a.getCurrentUpdateLanePriority=function(){return _t},a.getFindAllNodesFailureDescription=function(e,t){if(!ie)throw Error(o(363));var n=0,a=[];e=[Ur(e),0];for(var r=0;r<e.length;){var i=e[r++],s=e[r++],d=t[s];if((5!==i.tag||!le(i))&&(Br(i,d)&&(a.push(Vr(d)),++s>n&&(n=s)),s<t.length))for(i=i.child;null!==i;)e.push(i,s),i=i.sibling}if(n<t.length){for(e=[];n<t.length;n++)e.push(Vr(t[n]));return"findAllNodes was able to match part of the selector:\n  "+a.join(" > ")+"\n\nNo matching component was found for:\n  "+e.join(" > ")}return null},a.getPublicRootInstance=function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return E(e.child.stateNode);default:return e.child.stateNode}},a.injectIntoDevTools=function(e){if(e={bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:d.ReactCurrentDispatcher,findHostInstanceByFiber:Hs,findFiberByHostInstance:e.findFiberByHostInstance||Cs,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)e=!1;else{var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!t.isDisabled&&t.supportsFiber)try{ct=t.inject(e),ht=t}catch(e){}e=!0}return e},a.observeVisibleRects=function(e,t,n,a){if(!ie)throw Error(o(363));e=Kr(e,t);var r=he(e,n,a).disconnect;return{disconnect:function(){r()}}},a.registerMutableSourceForHydration=function(e,t){var n=t._getVersion;n=n(t._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)},a.runWithPriority=function(e,t){var n=_t;try{return _t=e,t()}finally{_t=n}},a.shouldSuspend=function(){return!1},a.unbatchedUpdates=function(e,t){var n=ei;ei&=-2,ei|=8;try{return e(t)}finally{0===(ei=n)&&(fi(),Kt())}},a.updateContainer=function(e,t,n,a){var r=t.current,i=Oi(),s=Ei(r);e:if(n){t:{if(x(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var d=n;do{switch(d.tag){case 3:d=d.stateNode.context;break t;case 1:if(it(d.type)){d=d.stateNode.__reactInternalMemoizedMergedChildContext;break t}}d=d.return}while(null!==d);throw Error(o(171))}if(1===n.tag){var l=n.type;if(it(l)){n=dt(n,l,d);break e}}n=d}else n=et;return null===t.context?t.context=n:t.pendingContext=n,(t=pn(i,s)).payload={element:e},null!==(a=void 0===a?null:a)&&(t.callback=a),yn(r,t),Ai(r,s,i),s},a}},6525:(e,t,n)=>{"use strict";e.exports=n(7287)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,