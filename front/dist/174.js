/*! For license information please see 174.js.LICENSE.txt */
(self.webpackChunk_42board_front=self.webpackChunk_42board_front||[]).push([[174],{3379:t=>{var e={animationIterationCount:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,stopOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0};t.exports=function(t,n){return"number"!=typeof n||e[t]?n:n+"px"}},3010:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},3704:(t,e)=>{!function(t){"use strict";e.encode=function(e){var n,r=new Uint8Array(e),i=r.length,o="";for(n=0;n<i;n+=3)o+=t[r[n]>>2],o+=t[(3&r[n])<<4|r[n+1]>>4],o+=t[(15&r[n+1])<<2|r[n+2]>>6],o+=t[63&r[n+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(e){var n,r,i,o,a,s=.75*e.length,l=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var u=new ArrayBuffer(s),h=new Uint8Array(u);for(n=0;n<l;n+=4)r=t.indexOf(e[n]),i=t.indexOf(e[n+1]),o=t.indexOf(e[n+2]),a=t.indexOf(e[n+3]),h[c++]=r<<2|i>>4,h[c++]=(15&i)<<4|o>>2,h[c++]=(3&o)<<6|63&a;return u}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},6077:t=>{var e=[].slice;t.exports=function(t,n){if("string"==typeof n&&(n=t[n]),"function"!=typeof n)throw new Error("bind() requires a function");var r=e.call(arguments,2);return function(){return n.apply(t,r.concat(e.call(arguments)))}}},8767:t=>{function e(t){if(t)return function(t){for(var n in e.prototype)t[n]=e.prototype[n];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((n=r[i])===e||n.fn===e){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),n=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(n){r=0;for(var i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},3879:(t,e,n)=>{var r=n(7236),i=n(6189),o={float:"cssFloat"},a=n(3379);function s(t,e,n){var s=o[e];if(void 0===s&&(s=function(t){var e=i(t),n=r(e);return o[e]=o[t]=o[n]=n,n}(e)),s){if(void 0===n)return t.style[s];t.style[s]=a(s,n)}}function l(t,e){for(var n in e)e.hasOwnProperty(n)&&s(t,n,e[n])}function c(){2===arguments.length?"string"==typeof arguments[1]?arguments[0].style.cssText=arguments[1]:l(arguments[0],arguments[1]):s(arguments[0],arguments[1],arguments[2])}t.exports=c,t.exports.set=c,t.exports.get=function(t,e){return Array.isArray(e)?e.reduce((function(e,n){return e[n]=s(t,n||""),e}),{}):s(t,e||"")}},3549:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},5983:(t,e,n)=>{const r=n(2192);t.exports=(t,e)=>new r(t,e),t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=n(6496),t.exports.transports=n(3352),t.exports.parser=n(9743)},2192:(t,e,n)=>{const r=n(3352),i=n(8767),o=n(4802)("engine.io-client:socket"),a=n(9743),s=n(4187),l=n(1830);class c extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=s(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=s(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,upgrade:!0,jsonp:!0,timestampParam:"t",policyPort:843,rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},e),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=l.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,this.open()}createTransport(t){o('creating transport "%s"',t);const e=function(t){const e={};for(let n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.opts.query);e.EIO=a.protocol,e.transport=t,this.id&&(e.sid=this.id);const n=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return o("options: %j",n),new r[t](n)}open(){let t;if(this.opts.rememberUpgrade&&c.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){const t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return o("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){o("setting transport %s",t.name);const e=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))}probe(t){o('probing transport "%s"',t);let e=this.createTransport(t,{probe:1}),n=!1;const r=this;function i(){if(r.onlyBinaryUpgrades){const t=!this.supportsBinary&&r.transport.supportsBinary;n=n||t}n||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;c.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(o("changing transport and sending upgrade packet"),d(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{o('probe transport "%s" failed',t);const n=new Error("probe error");n.transport=e.name,r.emit("upgradeError",n)}})))}function a(){n||(n=!0,d(),e.close(),e=null)}function s(n){const i=new Error("probe error: "+n);i.transport=e.name,a(),o('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",i)}function l(){s("transport closed")}function u(){s("socket closed")}function h(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),a())}function d(){e.removeListener("open",i),e.removeListener("error",s),e.removeListener("close",l),r.removeListener("close",u),r.removeListener("upgrading",h)}c.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",s),e.once("close",l),this.once("close",u),this.once("upgrading",h),e.open()}onOpen(){if(o("socket open"),this.readyState="open",c.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){o("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout)}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,n){return this.sendPacket("message",t,e,n),this}send(t,e,n){return this.sendPacket("message",t,e,n),this}sendPacket(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const i={type:t,data:e,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const t=this;function e(){t.onClose("forced close"),o("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()),this}onError(t){o("socket error %j",t),c.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',t);const n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),n.writeBuffer=[],n.prevBufferLen=0}}filterUpgrades(t){const e=[];let n=0;const r=t.length;for(;n<r;n++)~this.transports.indexOf(t[n])&&e.push(t[n]);return e}}c.priorWebsocketSuccess=!1,c.protocol=a.protocol,t.exports=c},6496:(t,e,n)=>{const r=n(9743),i=n(8767);t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},3352:(t,e,n)=>{const r=n(2777),i=n(3416),o=n(9785),a=n(4442);e.polling=function(t){let e,n=!1,a=!1;const s=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),n=t.hostname!==location.hostname||r!==t.port,a=t.secure!==e}if(t.xdomain=n,t.xscheme=a,e=new r(t),"open"in e&&!t.forceJSONP)return new i(t);if(!s)throw new Error("JSONP disabled");return new o(t)},e.websocket=a},9785:(t,e,n)=>{const r=n(9015),i=n(3549),o=/\n/g,a=/\\n/g;let s;function l(){}t.exports=class extends r{constructor(t){super(t),this.query=this.query||{},s||(s=i.___eio=i.___eio||[]),this.index=s.length;const e=this;s.push((function(t){e.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.script&&(e.script.onerror=l)}),!1)}get supportsBinary(){return!1}doClose(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};const n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){const n=this;let r;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=n,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function i(){s(),e()}function s(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{const t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){r=document.createElement("iframe"),r.name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),s(),t=t.replace(a,"\\\n"),this.area.value=t.replace(o,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&i()}:this.iframe.onload=i}}},3416:(t,e,n)=>{const r=n(2777),i=n(9015),o=n(8767),{pick:a}=n(6839),s=n(3549),l=n(4802)("engine.io-client:polling-xhr");function c(){}const u=null!=new(n(2777))({xdomain:!1}).responseType;class h extends o{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.create()}create(){const t=a(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new r(t),n=this;try{l("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){console.log(t)}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{const t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof e.status?e.status:0)}),0))},l("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){n.onError(t)}),0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function d(){for(let t in h.requests)h.requests.hasOwnProperty(t)&&h.requests[t].abort()}h.requestsCount=0,h.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",d):"function"==typeof addEventListener&&addEventListener("onpagehide"in s?"pagehide":"unload",d,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=u&&!e}request(t={}){return Object.assign(t,{supportsBinary:this.supportsBinary,xd:this.xd,xs:this.xs},this.opts),new h(this.uri(),t)}doWrite(t,e){const n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),i=this;r.on("success",e),r.on("error",(function(t){i.onError("xhr post error",t)}))}doPoll(){l("xhr poll");const t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=h},9015:(t,e,n)=>{const r=n(6496),i=n(1830),o=n(9743),a=n(2281),s=n(4802)("engine.io-client:polling");t.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(t){const e=this;function n(){s("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){let t=0;this.polling&&(s("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){s("pre-pause polling complete"),--t||n()}))),this.writable||(s("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){s("pre-pause writing complete"),--t||n()})))}else n()}poll(){s("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){const e=this;s("polling got data %s",t),o.decodePayload(t,this.socket.binaryType).forEach((function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():s('ignoring poll - transport state "%s"',this.readyState))}doClose(){const t=this;function e(){s("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(s("transport open - closing"),e()):(s("transport not open - deferring close"),this.once("open",e))}write(t){this.writable=!1,o.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}}},866:(t,e,n)=>{const r=n(3549);t.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},4442:(t,e,n)=>{const r=n(6496),i=n(9743),o=n(1830),a=n(2281),{pick:s}=n(6839),{WebSocket:l,usingBrowserWebSocket:c,defaultBinaryType:u}=n(866),h=n(4802)("engine.io-client:websocket"),d="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends r{constructor(t){super(t),t&&t.forceBase64&&(this.supportsBinary=!1),this.supportsBinary=!0}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols;let n;n=d?s(this.opts,"localAddress"):s(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress"),this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=c&&!d?e?new l(t,e):new l(t):new l(t,e,n)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||u,this.addEventListeners()}addEventListeners(){const t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}}write(t){const e=this;this.writable=!1;let n=t.length,r=0;const o=n;for(;r<o;r++)!function(t){i.encodePacket(t,e.supportsBinary,(function(r){const i={};!c&&(t.options&&(i.compress=t.options.compress),e.opts.perMessageDeflate)&&("string"==typeof r?Buffer.byteLength(r):r.length)<e.opts.perMessageDeflate.threshold&&(i.compress=!1);try{c?e.ws.send(r):e.ws.send(r,i)}catch(t){h("websocket closed before onclose event")}--n||(e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0))}))}(t[r])}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&this.ws.close()}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=a()),this.supportsBinary||(t.b64=1),t=o.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}check(){return!(!l||"__initialize"in l&&this.name===f.prototype.name)}}t.exports=f},6839:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,n)=>(e[n]=t[n],e)),{})},2777:(t,e,n)=>{const r=n(8058),i=n(3549);t.exports=function(t){const e=t.xdomain,n=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},4802:(t,e,n)=>{e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t={}.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(804)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},804:(t,e,n)=>{t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function a(...t){if(!a.enabled)return;const e=a,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return n;s++;const o=r.formatters[i];if("function"==typeof o){const r=t[s];n=o.call(e,r),t.splice(s,1),s--}return n})),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return a.namespace=t,a.enabled=r.enabled(t),a.useColors=r.useColors(),a.color=e(t),a.destroy=i,a.extend=o,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function a(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(a),...r.skips.map(a).map((t=>"-"+t))].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(7824),Object.keys(t).forEach((e=>{r[e]=t[e]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},1712:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const n=Object.create(null);Object.keys(e).forEach((t=>{n[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},4965:(t,e,n)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:i}=n(1712);let o;"function"==typeof ArrayBuffer&&(o=n(3704));const a=(t,e)=>{if(o){const n=o.decode(t);return s(n,e)}return{base64:!0,data:t}},s=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:s(t,e)};const n=t.charAt(0);return"b"===n?{type:"message",data:a(t.substring(1),e)}:r[n]?t.length>1?{type:r[n],data:t.substring(1)}:{type:r[n]}:i}},2929:(t,e,n)=>{const{PACKET_TYPES:r}=n(1712),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,a=(t,e)=>{const n=new FileReader;return n.onload=function(){const t=n.result.split(",")[1];e("b"+t)},n.readAsDataURL(t)};t.exports=({type:t,data:e},n,s)=>{return i&&e instanceof Blob?n?s(e):a(e,s):o&&(e instanceof ArrayBuffer||(l=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(l):l&&l.buffer instanceof ArrayBuffer))?n?s(e instanceof ArrayBuffer?e:e.buffer):a(new Blob([e]),s):s(r[t]+(e||""));var l}},9743:(t,e,n)=>{const r=n(2929),i=n(4965),o=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:(t,e)=>{const n=t.length,i=new Array(n);let a=0;t.forEach(((t,s)=>{r(t,!1,(t=>{i[s]=t,++a===n&&e(i.join(o))}))}))},decodePacket:i,decodePayload:(t,e)=>{const n=t.split(o),r=[];for(let t=0;t<n.length;t++){const o=i(n[t],e);if(r.push(o),"error"===o.type)break}return r}}},8058:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},6745:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4417),i=r.glob.performance&&r.glob.performance.now?function(){return r.glob.performance.now()}:function(){return(new Date).getTime()},o=function(){function t(e,n){this.id=t.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:i(),frameRate:0},this.func=e,this.setLayers(n)}return t.prototype.setLayers=function(t){var e;return e=t?t.length>0?t:[t]:[],this.layers=e,this},t.prototype.getLayers=function(){return this.layers},t.prototype.addLayer=function(t){var e,n=this.layers,r=n.length;for(e=0;e<r;e++)if(n[e]._id===t._id)return!1;return this.layers.push(t),!0},t.prototype.isRunning=function(){var e,n=t.animations,r=n.length;for(e=0;e<r;e++)if(n[e].id===this.id)return!0;return!1},t.prototype.start=function(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=i(),t._addAnimation(this),this},t.prototype.stop=function(){return t._removeAnimation(this),this},t.prototype._updateFrameObject=function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff},t._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},t._removeAnimation=function(t){var e,n=t.id,r=this.animations,i=r.length;for(e=0;e<i;e++)if(r[e].id===n){this.animations.splice(e,1);break}},t._runFrames=function(){var t,e,n,r,o,a,s,l,c={},u=this.animations;for(r=0;r<u.length;r++)if(e=(t=u[r]).layers,n=t.func,t._updateFrameObject(i()),a=e.length,!n||!1!==n.call(t,t.frame))for(o=0;o<a;o++)void 0!==(s=e[o])._id&&(c[s._id]=s);for(l in c)c.hasOwnProperty(l)&&c[l].draw()},t._animationLoop=function(){var e=t;e.animations.length?(e._runFrames(),requestAnimationFrame(e._animationLoop)):e.animRunning=!1},t._handleAnimation=function(){this.animRunning||(this.animRunning=!0,requestAnimationFrame(this._animationLoop))},t.animations=[],t.animIdCounter=0,t.animRunning=!1,t}();e.Animation=o},4842:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o,a=n(8588),s=n(3442),l=n(4417),c=n(1455),u=n(3774),h=function(){function t(t){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var e=(t||{}).pixelRatio||l.Konva.pixelRatio||function(){if(o)return o;var t=a.Util.createCanvasElement().getContext("2d");return o=(l.Konva._global.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}();this.pixelRatio=e,this._canvas=a.Util.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}return t.prototype.getContext=function(){return this.context},t.prototype.getPixelRatio=function(){return this.pixelRatio},t.prototype.setPixelRatio=function(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)},t.prototype.setWidth=function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},t.prototype.setHeight=function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},t.prototype.getWidth=function(){return this.width},t.prototype.getHeight=function(){return this.height},t.prototype.setSize=function(t,e){this.setWidth(t||0),this.setHeight(e||0)},t.prototype.toDataURL=function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return a.Util.error("Unable to get data URL. "+t.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}},t}();e.Canvas=h,c.Factory.addGetterSetter(h,"pixelRatio",void 0,u.getNumberValidator());var d=function(t){function e(e){void 0===e&&(e={width:0,height:0});var n=t.call(this,e)||this;return n.context=new s.SceneContext(n),n.setSize(e.width,e.height),n}return i(e,t),e}(h);e.SceneCanvas=d;var f=function(t){function e(e){void 0===e&&(e={width:0,height:0});var n=t.call(this,e)||this;return n.hitCanvas=!0,n.context=new s.HitContext(n),n.setSize(e.width,e.height),n}return i(e,t),e}(h);e.HitCanvas=f},8783:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7939),l=n(3774),c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.children=new o.Collection,e}return i(e,t),e.prototype.getChildren=function(t){if(!t)return this.children;var e=new o.Collection;return this.children.each((function(n){t(n)&&e.push(n)})),e},e.prototype.hasChildren=function(){return this.getChildren().length>0},e.prototype.removeChildren=function(){for(var t,e=0;e<this.children.length;e++)(t=this.children[e]).parent=null,t.index=0,t.remove();return this.children=new o.Collection,this},e.prototype.destroyChildren=function(){for(var t,e=0;e<this.children.length;e++)(t=this.children[e]).parent=null,t.index=0,t.destroy();return this.children=new o.Collection,this},e.prototype.add=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}var r=t[0];if(r.getParent())return r.moveTo(this),this;var i=this.children;return this._validateAdd(r),r._clearCaches(),r.index=i.length,r.parent=this,i.push(r),this._fire("add",{child:r}),this},e.prototype.destroy=function(){return this.hasChildren()&&this.destroyChildren(),t.prototype.destroy.call(this),this},e.prototype.find=function(t){return this._generalFind(t,!1)},e.prototype.get=function(t){return o.Util.warn("collection.get() method is deprecated. Please use collection.find() instead."),this.find(t)},e.prototype.findOne=function(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0},e.prototype._generalFind=function(t,e){var n=[];return this._descendants((function(r){var i=r._isMatch(t);return i&&n.push(r),!(!i||!e)})),o.Collection.toCollection(n)},e.prototype._descendants=function(t){for(var e=0;e<this.children.length;e++){var n=this.children[e];if(t(n))return!0;if(n.hasChildren()&&n._descendants(t))return!0}return!1},e.prototype.toObject=function(){var t=s.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),n=e.length,r=0;r<n;r++){var i=e[r];t.children.push(i.toObject())}return t},e.prototype.isAncestorOf=function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},e.prototype.clone=function(t){var e=s.Node.prototype.clone.call(this,t);return this.getChildren().each((function(t){e.add(t.clone())})),e},e.prototype.getAllIntersections=function(t){var e=[];return this.find("Shape").each((function(n){n.isVisible()&&n.intersects(t)&&e.push(n)})),e},e.prototype._setChildrenIndices=function(){this.children.each((function(t,e){t.index=e}))},e.prototype.drawScene=function(t,e){var n=this.getLayer(),r=t||n&&n.getCanvas(),i=r&&r.getContext(),o=this._getCanvasCache(),a=o&&o.scene,s=r&&r.isCache;if(!this.isVisible()&&!s)return this;if(a){i.save();var l=this.getAbsoluteTransform(e).getMatrix();i.transform(l[0],l[1],l[2],l[3],l[4],l[5]),this._drawCachedSceneCanvas(i),i.restore()}else this._drawChildren("drawScene",r,e);return this},e.prototype.drawHit=function(t,e){if(!this.shouldDrawHit(e))return this;var n=this.getLayer(),r=t||n&&n.hitCanvas,i=r&&r.getContext(),o=this._getCanvasCache();if(o&&o.hit){i.save();var a=this.getAbsoluteTransform(e).getMatrix();i.transform(a[0],a[1],a[2],a[3],a[4],a[5]),this._drawCachedHitCanvas(i),i.restore()}else this._drawChildren("drawHit",r,e);return this},e.prototype._drawChildren=function(t,e,n){var r=e&&e.getContext(),i=this.clipWidth(),o=this.clipHeight(),a=this.clipFunc(),s=i&&o||a,l=n===this;if(s){r.save();var c=this.getAbsoluteTransform(n),u=c.getMatrix();if(r.transform(u[0],u[1],u[2],u[3],u[4],u[5]),r.beginPath(),a)a.call(this,r,this);else{var h=this.clipX(),d=this.clipY();r.rect(h,d,i,o)}r.clip(),u=c.copy().invert().getMatrix(),r.transform(u[0],u[1],u[2],u[3],u[4],u[5])}var f=!l&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===t;f&&(r.save(),r._applyGlobalCompositeOperation(this)),this.children.each((function(r){r[t](e,n)})),f&&r.restore(),s&&r.restore()},e.prototype.getClientRect=function(t){var e,n,r,i,o,a=(t=t||{}).skipTransform,s=t.relativeTo,l=this;this.children.each((function(o){if(o.visible()){var a=o.getClientRect({relativeTo:l,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===a.width&&0===a.height||(void 0===e?(e=a.x,n=a.y,r=a.x+a.width,i=a.y+a.height):(e=Math.min(e,a.x),n=Math.min(n,a.y),r=Math.max(r,a.x+a.width),i=Math.max(i,a.y+a.height)))}}));for(var c=this.find("Shape"),u=!1,h=0;h<c.length;h++)if(c[h]._isVisible(this)){u=!0;break}return o=u&&void 0!==e?{x:e,y:n,width:r-e,height:i-n}:{x:0,y:0,width:0,height:0},a?o:this._transformedRect(o,s)},e}(s.Node);e.Container=c,a.Factory.addComponentsGetterSetter(c,"clip",["x","y","width","height"]),a.Factory.addGetterSetter(c,"clipX",void 0,l.getNumberValidator()),a.Factory.addGetterSetter(c,"clipY",void 0,l.getNumberValidator()),a.Factory.addGetterSetter(c,"clipWidth",void 0,l.getNumberValidator()),a.Factory.addGetterSetter(c,"clipHeight",void 0,l.getNumberValidator()),a.Factory.addGetterSetter(c,"clipFunc"),o.Collection.mapMethods(c)},3442:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(4417),s=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],l=function(){function t(t){this.canvas=t,this._context=t._canvas.getContext("2d"),a.Konva.enableTrace&&(this.traceArr=[],this._enableTrace())}return t.prototype.fillShape=function(t){t.fillEnabled()&&this._fill(t)},t.prototype._fill=function(t){},t.prototype.strokeShape=function(t){t.hasStroke()&&this._stroke(t)},t.prototype._stroke=function(t){},t.prototype.fillStrokeShape=function(t){this.fillShape(t),this.strokeShape(t)},t.prototype.getTrace=function(t){var e,n,r,i,a=this.traceArr,s=a.length,l="";for(e=0;e<s;e++)(r=(n=a[e]).method)?(i=n.args,l+=r,t?l+="()":o.Util._isArray(i[0])?l+="(["+i.join(",")+"])":l+="("+i.join(",")+")"):(l+=n.property,t||(l+="="+n.val)),l+=";";return l},t.prototype.clearTrace=function(){this.traceArr=[]},t.prototype._trace=function(t){var e=this.traceArr;e.push(t),e.length>=100&&e.shift()},t.prototype.reset=function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},t.prototype.getCanvas=function(){return this.canvas},t.prototype.clear=function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)},t.prototype._applyLineCap=function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},t.prototype._applyOpacity=function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},t.prototype._applyLineJoin=function(t){var e=t.attrs.lineJoin;e&&this.setAttr("lineJoin",e)},t.prototype.setAttr=function(t,e){this._context[t]=e},t.prototype.arc=function(t,e,n,r,i,o){this._context.arc(t,e,n,r,i,o)},t.prototype.arcTo=function(t,e,n,r,i){this._context.arcTo(t,e,n,r,i)},t.prototype.beginPath=function(){this._context.beginPath()},t.prototype.bezierCurveTo=function(t,e,n,r,i,o){this._context.bezierCurveTo(t,e,n,r,i,o)},t.prototype.clearRect=function(t,e,n,r){this._context.clearRect(t,e,n,r)},t.prototype.clip=function(){this._context.clip()},t.prototype.closePath=function(){this._context.closePath()},t.prototype.createImageData=function(t,e){var n=arguments;return 2===n.length?this._context.createImageData(t,e):1===n.length?this._context.createImageData(t):void 0},t.prototype.createLinearGradient=function(t,e,n,r){return this._context.createLinearGradient(t,e,n,r)},t.prototype.createPattern=function(t,e){return this._context.createPattern(t,e)},t.prototype.createRadialGradient=function(t,e,n,r,i,o){return this._context.createRadialGradient(t,e,n,r,i,o)},t.prototype.drawImage=function(t,e,n,r,i,o,a,s,l){var c=arguments,u=this._context;3===c.length?u.drawImage(t,e,n):5===c.length?u.drawImage(t,e,n,r,i):9===c.length&&u.drawImage(t,e,n,r,i,o,a,s,l)},t.prototype.ellipse=function(t,e,n,r,i,o,a,s){this._context.ellipse(t,e,n,r,i,o,a,s)},t.prototype.isPointInPath=function(t,e){return this._context.isPointInPath(t,e)},t.prototype.fill=function(){this._context.fill()},t.prototype.fillRect=function(t,e,n,r){this._context.fillRect(t,e,n,r)},t.prototype.strokeRect=function(t,e,n,r){this._context.strokeRect(t,e,n,r)},t.prototype.fillText=function(t,e,n){this._context.fillText(t,e,n)},t.prototype.measureText=function(t){return this._context.measureText(t)},t.prototype.getImageData=function(t,e,n,r){return this._context.getImageData(t,e,n,r)},t.prototype.lineTo=function(t,e){this._context.lineTo(t,e)},t.prototype.moveTo=function(t,e){this._context.moveTo(t,e)},t.prototype.rect=function(t,e,n,r){this._context.rect(t,e,n,r)},t.prototype.putImageData=function(t,e,n){this._context.putImageData(t,e,n)},t.prototype.quadraticCurveTo=function(t,e,n,r){this._context.quadraticCurveTo(t,e,n,r)},t.prototype.restore=function(){this._context.restore()},t.prototype.rotate=function(t){this._context.rotate(t)},t.prototype.save=function(){this._context.save()},t.prototype.scale=function(t,e){this._context.scale(t,e)},t.prototype.setLineDash=function(t){this._context.setLineDash?this._context.setLineDash(t):"mozDash"in this._context?this._context.mozDash=t:"webkitLineDash"in this._context&&(this._context.webkitLineDash=t)},t.prototype.getLineDash=function(){return this._context.getLineDash()},t.prototype.setTransform=function(t,e,n,r,i,o){this._context.setTransform(t,e,n,r,i,o)},t.prototype.stroke=function(){this._context.stroke()},t.prototype.strokeText=function(t,e,n,r){this._context.strokeText(t,e,n,r)},t.prototype.transform=function(t,e,n,r,i,o){this._context.transform(t,e,n,r,i,o)},t.prototype.translate=function(t,e){this._context.translate(t,e)},t.prototype._enableTrace=function(){var t,e,n=this,r=s.length,i=o.Util._simplifyArray,a=this.setAttr,l=function(t){var r,o=n[t];n[t]=function(){return e=i(Array.prototype.slice.call(arguments,0)),r=o.apply(n,arguments),n._trace({method:t,args:e}),r}};for(t=0;t<r;t++)l(s[t]);n.setAttr=function(){a.apply(n,arguments);var t=arguments[0],e=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(e/=this.canvas.getPixelRatio()),n._trace({property:t,val:e})}},t.prototype._applyGlobalCompositeOperation=function(t){var e=t.getGlobalCompositeOperation();"source-over"!==e&&this.setAttr("globalCompositeOperation",e)},t}();e.Context=l,["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(t){Object.defineProperty(l.prototype,t,{get:function(){return this._context[t]},set:function(e){this._context[t]=e}})}));var c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._fillColor=function(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)},e.prototype._fillPattern=function(t){var e=t.getFillPatternX(),n=t.getFillPatternY(),r=a.Konva.getAngle(t.getFillPatternRotation()),i=t.getFillPatternOffsetX(),o=t.getFillPatternOffsetY();t.getFillPatternScaleX(),t.getFillPatternScaleY(),(e||n)&&this.translate(e||0,n||0),r&&this.rotate(r),(i||o)&&this.translate(-1*i,-1*o),this.setAttr("fillStyle",t._getFillPattern()),t._fillFunc(this)},e.prototype._fillLinearGradient=function(t){var e=t._getLinearGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))},e.prototype._fillRadialGradient=function(t){var e=t._getRadialGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))},e.prototype._fill=function(t){var e=t.fill(),n=t.getFillPriority();if(e&&"color"===n)this._fillColor(t);else{var r=t.getFillPatternImage();if(r&&"pattern"===n)this._fillPattern(t);else{var i=t.getFillLinearGradientColorStops();if(i&&"linear-gradient"===n)this._fillLinearGradient(t);else{var o=t.getFillRadialGradientColorStops();o&&"radial-gradient"===n?this._fillRadialGradient(t):e?this._fillColor(t):r?this._fillPattern(t):i?this._fillLinearGradient(t):o&&this._fillRadialGradient(t)}}}},e.prototype._strokeLinearGradient=function(t){var e=t.getStrokeLinearGradientStartPoint(),n=t.getStrokeLinearGradientEndPoint(),r=t.getStrokeLinearGradientColorStops(),i=this.createLinearGradient(e.x,e.y,n.x,n.y);if(r){for(var o=0;o<r.length;o+=2)i.addColorStop(r[o],r[o+1]);this.setAttr("strokeStyle",i)}},e.prototype._stroke=function(t){var e=t.dash(),n=t.getStrokeScaleEnabled();if(t.hasStroke()){if(!n){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),n||this.restore()}},e.prototype._applyShadow=function(t){var e=o.Util,n=e.get(t.getShadowRGBA(),"black"),r=e.get(t.getShadowBlur(),5),i=e.get(t.getShadowOffset(),{x:0,y:0}),a=t.getAbsoluteScale(),s=this.canvas.getPixelRatio(),l=a.x*s,c=a.y*s;this.setAttr("shadowColor",n),this.setAttr("shadowBlur",r*Math.min(Math.abs(l),Math.abs(c))),this.setAttr("shadowOffsetX",i.x*l),this.setAttr("shadowOffsetY",i.y*c)},e}(l);e.SceneContext=c;var u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._fill=function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},e.prototype.strokeShape=function(t){t.hasHitStroke()&&this._stroke(t)},e.prototype._stroke=function(t){if(t.hasHitStroke()){var e=t.getStrokeScaleEnabled();if(!e){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(t);var r=t.hitStrokeWidth(),i="auto"===r?t.strokeWidth():r;this.setAttr("lineWidth",i),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}},e}(l);e.HitContext=u},7185:(t,e,n)=>{var r=n(3986).Konva;r._injectGlobal(r),e.default=r,r.default=r,t.exports=e.default},210:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4417),i=n(8588);e.DD={get isDragging(){var t=!1;return e.DD._dragElements.forEach((function(e){"dragging"===e.dragStatus&&(t=!0)})),t},justDragged:!1,get node(){var t;return e.DD._dragElements.forEach((function(e){t=e.node})),t},_dragElements:new Map,_drag:function(t){var n=[];e.DD._dragElements.forEach((function(e,r){var o=e.node,a=o.getStage();a.setPointersPositions(t),void 0===e.pointerId&&(e.pointerId=i.Util._getFirstPointerId(t));var s=a._changedPointerPositions.find((function(t){return t.id===e.pointerId}));if(s){if("dragging"!==e.dragStatus){var l=o.dragDistance();if(Math.max(Math.abs(s.x-e.startPointerPos.x),Math.abs(s.y-e.startPointerPos.y))<l)return;if(o.startDrag({evt:t}),!o.isDragging())return}o._setDragPosition(t,e),n.push(o)}})),n.forEach((function(e){e.fire("dragmove",{type:"dragmove",target:e,evt:t},!0)}))},_endDragBefore:function(t){e.DD._dragElements.forEach((function(n,i){var o=n.node.getStage();if(t&&o.setPointersPositions(t),o._changedPointerPositions.find((function(t){return t.id===n.pointerId}))){"dragging"!==n.dragStatus&&"stopped"!==n.dragStatus||(e.DD.justDragged=!0,r.Konva.listenClickTap=!1,n.dragStatus="stopped");var a=n.node.getLayer()||n.node instanceof r.Konva.Stage&&n.node;a&&a.batchDraw()}}))},_endDragAfter:function(t){e.DD._dragElements.forEach((function(n,r){"stopped"===n.dragStatus&&n.node.fire("dragend",{type:"dragend",target:n.node,evt:t},!0),"dragging"!==n.dragStatus&&e.DD._dragElements.delete(r)}))}},r.Konva.isBrowser&&(window.addEventListener("mouseup",e.DD._endDragBefore,!0),window.addEventListener("touchend",e.DD._endDragBefore,!0),window.addEventListener("mousemove",e.DD._drag),window.addEventListener("touchmove",e.DD._drag),window.addEventListener("mouseup",e.DD._endDragAfter,!1),window.addEventListener("touchend",e.DD._endDragAfter,!1))},1455:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(8588),i=n(3774),o="get",a="set";e.Factory={addGetterSetter:function(t,n,r,i,o){e.Factory.addGetter(t,n,r),e.Factory.addSetter(t,n,i,o),e.Factory.addOverloadedGetterSetter(t,n)},addGetter:function(t,e,n){var i=o+r.Util._capitalize(e);t.prototype[i]=t.prototype[i]||function(){var t=this.attrs[e];return void 0===t?n:t}},addSetter:function(t,n,i,o){var s=a+r.Util._capitalize(n);t.prototype[s]||e.Factory.overWriteSetter(t,n,i,o)},overWriteSetter:function(t,e,n,i){var o=a+r.Util._capitalize(e);t.prototype[o]=function(t){return n&&null!=t&&(t=n.call(this,t,e)),this._setAttr(e,t),i&&i.call(this),this}},addComponentsGetterSetter:function(t,n,s,l,c){var u,h,d=s.length,f=r.Util._capitalize,p=o+f(n),g=a+f(n);t.prototype[p]=function(){var t={};for(u=0;u<d;u++)t[h=s[u]]=this.getAttr(n+f(h));return t};var y=i.getComponentValidator(s);t.prototype[g]=function(t){var e,r=this.attrs[n];for(e in l&&(t=l.call(this,t)),y&&y.call(this,t,n),t)t.hasOwnProperty(e)&&this._setAttr(n+f(e),t[e]);return this._fireChangeEvent(n,r,t),c&&c.call(this),this},e.Factory.addOverloadedGetterSetter(t,n)},addOverloadedGetterSetter:function(t,e){var n=r.Util._capitalize(e),i=a+n,s=o+n;t.prototype[e]=function(){return arguments.length?(this[i](arguments[0]),this):this[s]()}},addDeprecatedGetterSetter:function(t,n,i,a){r.Util.error("Adding deprecated "+n);var s=o+r.Util._capitalize(n),l=n+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[s]=function(){r.Util.error(l);var t=this.attrs[n];return void 0===t?i:t},e.Factory.addSetter(t,n,a,(function(){r.Util.error(l)})),e.Factory.addOverloadedGetterSetter(t,n)},backCompat:function(t,e){r.Util.each(e,(function(e,n){var i=t.prototype[n],s=o+r.Util._capitalize(e),l=a+r.Util._capitalize(e);function c(){i.apply(this,arguments),r.Util.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}t.prototype[e]=c,t.prototype[s]=c,t.prototype[l]=c}))},afterSetFilter:function(){this._filterUpToDate=!1}}},3980:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(4415),s=n(4417),l=function(t){function e(e){var n=t.call(this,e)||this;return n.listening(!1),o.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.'),n}return i(e,t),e}(a.Layer);e.FastLayer=l,l.prototype.nodeType="FastLayer",s._registerNode(l),o.Collection.mapMethods(l)},4417:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Math.PI/180,i=function(t){var e=t.indexOf("msie ");if(e>0)return parseInt(t.substring(e+5,t.indexOf(".",e)),10);if(t.indexOf("trident/")>0){var n=t.indexOf("rv:");return parseInt(t.substring(n+3,t.indexOf(".",n)),10)}var r=t.indexOf("edge/");return r>0&&parseInt(t.substring(r+5,t.indexOf(".",r)),10)};e._parseUA=function(t){var e=t.toLowerCase(),n=/(chrome)[ /]([\w.]+)/.exec(e)||/(webkit)[ /]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ /]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],r=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),o=!!t.match(/IEMobile/i);return{browser:n[1]||"",version:n[2]||"0",isIE:i(e),mobile:r,ieMobile:o}},e.glob=void 0!==n.g?n.g:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},e.Konva={_global:e.glob,version:"7.1.7",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(t){}.toString()),dblClickWindow:400,getAngle:function(t){return e.Konva.angleDeg?t*r:t},enableTrace:!1,_pointerEventsEnabled:!1,hitOnDragEnabled:!1,captureTouchEventsEnabled:!1,listenClickTap:!1,inDblClickWindow:!1,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:function(){return e.Konva.DD.isDragging},isDragReady:function(){return!!e.Konva.DD.node},UA:e._parseUA(e.glob.navigator&&e.glob.navigator.userAgent||""),document:e.glob.document,_injectGlobal:function(t){e.glob.Konva=t},_parseUA:e._parseUA},e._NODES_REGISTRY={},e._registerNode=function(t){e._NODES_REGISTRY[t.prototype.getClassName()]=t,e.Konva[t.prototype.getClassName()]=t}},8985:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(8783),s=n(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._validateAdd=function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&o.Util.throw("You may only add groups and shapes to groups.")},e}(a.Container);e.Group=l,l.prototype.nodeType="Group",s._registerNode(l),o.Collection.mapMethods(l)},4415:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(8783),s=n(7939),l=n(1455),c=n(4842),u=n(3774),h=n(7955),d=n(4417),f=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],p=f.length,g=function(t){function e(e){var n=t.call(this,e)||this;return n.canvas=new c.SceneCanvas,n.hitCanvas=new c.HitCanvas({pixelRatio:1}),n._waitingForDraw=!1,n.on("visibleChange.konva",n._checkVisibility),n._checkVisibility(),n.on("imageSmoothingEnabledChange.konva",n._setSmoothEnabled),n._setSmoothEnabled(),n}return i(e,t),e.prototype.createPNGStream=function(){return this.canvas._canvas.createPNGStream()},e.prototype.getCanvas=function(){return this.canvas},e.prototype.getHitCanvas=function(){return this.hitCanvas},e.prototype.getContext=function(){return this.getCanvas().getContext()},e.prototype.clear=function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this},e.prototype.setZIndex=function(e){t.prototype.setZIndex.call(this,e);var n=this.getStage();return n&&(n.content.removeChild(this.getCanvas()._canvas),e<n.children.length-1?n.content.insertBefore(this.getCanvas()._canvas,n.children[e+1].getCanvas()._canvas):n.content.appendChild(this.getCanvas()._canvas)),this},e.prototype.moveToTop=function(){s.Node.prototype.moveToTop.call(this);var t=this.getStage();return t&&(t.content.removeChild(this.getCanvas()._canvas),t.content.appendChild(this.getCanvas()._canvas)),!0},e.prototype.moveUp=function(){if(!s.Node.prototype.moveUp.call(this))return!1;var t=this.getStage();return!!t&&(t.content.removeChild(this.getCanvas()._canvas),this.index<t.children.length-1?t.content.insertBefore(this.getCanvas()._canvas,t.children[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getCanvas()._canvas),!0)},e.prototype.moveDown=function(){if(s.Node.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.children;t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}return!0}return!1},e.prototype.moveToBottom=function(){if(s.Node.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.children;t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}return!0}return!1},e.prototype.getLayer=function(){return this},e.prototype.remove=function(){var t=this.getCanvas()._canvas;return s.Node.prototype.remove.call(this),t&&t.parentNode&&o.Util._isInDocument(t)&&t.parentNode.removeChild(t),this},e.prototype.getStage=function(){return this.parent},e.prototype.setSize=function(t){var e=t.width,n=t.height;return this.canvas.setSize(e,n),this.hitCanvas.setSize(e,n),this._setSmoothEnabled(),this},e.prototype._validateAdd=function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&o.Util.throw("You may only add groups and shapes to a layer.")},e.prototype._toKonvaCanvas=function(t){return(t=t||{}).width=t.width||this.getWidth(),t.height=t.height||this.getHeight(),t.x=void 0!==t.x?t.x:this.x(),t.y=void 0!==t.y?t.y:this.y(),s.Node.prototype._toKonvaCanvas.call(this,t)},e.prototype._checkVisibility=function(){var t=this.visible();this.canvas._canvas.style.display=t?"block":"none"},e.prototype._setSmoothEnabled=function(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()},e.prototype.getWidth=function(){if(this.parent)return this.parent.width()},e.prototype.setWidth=function(){o.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},e.prototype.getHeight=function(){if(this.parent)return this.parent.height()},e.prototype.setHeight=function(){o.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},e.prototype.batchDraw=function(){var t=this;return this._waitingForDraw||(this._waitingForDraw=!0,o.Util.requestAnimFrame((function(){t.draw(),t._waitingForDraw=!1}))),this},e.prototype.getIntersection=function(t,e){if(!this.isListening()||!this.isVisible())return null;for(var n=1,r=!1;;){for(var i=0;i<p;i++){var o=f[i],a=this._getIntersection({x:t.x+o.x*n,y:t.y+o.y*n}),s=a.shape;if(s&&e)return s.findAncestor(e,!0);if(s)return s;if(r=!!a.antialiased,!a.antialiased)break}if(!r)return null;n+=1}},e.prototype._getIntersection=function(t){var e=this.hitCanvas.pixelRatio,n=this.hitCanvas.context.getImageData(Math.round(t.x*e),Math.round(t.y*e),1,1).data,r=n[3];if(255===r){var i=o.Util._rgbToHex(n[0],n[1],n[2]),a=h.shapes["#"+i];return a?{shape:a}:{antialiased:!0}}return r>0?{antialiased:!0}:{}},e.prototype.drawScene=function(t,e){var n=this.getLayer(),r=t||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&r.getContext().clear(),a.Container.prototype.drawScene.call(this,r,e),this._fire("draw",{node:this}),this},e.prototype.drawHit=function(t,e){var n=this.getLayer(),r=t||n&&n.hitCanvas;return n&&n.clearBeforeDraw()&&n.getHitCanvas().getContext().clear(),a.Container.prototype.drawHit.call(this,r,e),this},e.prototype.enableHitGraph=function(){return this.hitGraphEnabled(!0),this},e.prototype.disableHitGraph=function(){return this.hitGraphEnabled(!1),this},e.prototype.setHitGraphEnabled=function(t){o.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(t)},e.prototype.getHitGraphEnabled=function(t){return o.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()},e.prototype.toggleHitCanvas=function(){if(this.parent){var t=this.parent;this.hitCanvas._canvas.parentNode?t.content.removeChild(this.hitCanvas._canvas):t.content.appendChild(this.hitCanvas._canvas)}},e}(a.Container);e.Layer=g,g.prototype.nodeType="Layer",d._registerNode(g),l.Factory.addGetterSetter(g,"imageSmoothingEnabled",!0),l.Factory.addGetterSetter(g,"clearBeforeDraw",!0),l.Factory.addGetterSetter(g,"hitGraphEnabled",!0,u.getBooleanValidator()),o.Collection.mapMethods(g)},7939:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(8588),i=n(1455),o=n(4842),a=n(4417),s=n(210),l=n(3774);e.ids={},e.names={},e._removeId=function(t,n){t&&e.ids[t]===n&&delete e.ids[t]},e._addName=function(t,n){n&&(e.names[n]||(e.names[n]=[]),e.names[n].push(t))},e._removeName=function(t,n){if(t){var r=e.names[t];if(r){for(var i=0;i<r.length;i++)r[i]._id===n&&r.splice(i,1);0===r.length&&delete e.names[t]}}};var c="absoluteOpacity",u="allEventListeners",h="absoluteTransform",d="absoluteScale",f="canvas",p="listening",g="mouseenter",y="mouseleave",v="Shape",m=" ",b="stage",_="transform",C="visible",w=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(m),S=(["scaleXChange.konva","scaleYChange.konva"].join(m),new r.Collection),x=1,k=function(){function t(t){this._id=x++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this.children=S,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(t),this._shouldFireChangeEvents=!0}return t.prototype.hasChildren=function(){return!1},t.prototype.getChildren=function(){return S},t.prototype._clearCache=function(t){t!==_&&t!==h||!this._cache.get(t)?t?this._cache.delete(t):this._cache.clear():this._cache.get(t).dirty=!0},t.prototype._getCache=function(t,e){var n=this._cache.get(t);return(void 0===n||(t===_||t===h)&&!0===n.dirty)&&(n=e.call(this),this._cache.set(t,n)),n},t.prototype._calculate=function(t,e,n){var r=this;if(!this._attachedDepsListeners.get(t)){var i=e.map((function(t){return t+"Change.konva"})).join(m);this.on(i,(function(){r._clearCache(t)})),this._attachedDepsListeners.set(t,!0)}return this._getCache(t,n)},t.prototype._getCanvasCache=function(){return this._cache.get(f)},t.prototype._clearSelfAndDescendantCache=function(t,e){this._clearCache(t),e&&t===h&&this.fire("_clearTransformCache"),this.isCached()||this.children&&this.children.each((function(e){e._clearSelfAndDescendantCache(t,!0)}))},t.prototype.clearCache=function(){return this._cache.delete(f),this._clearSelfAndDescendantCache(),this},t.prototype.cache=function(t){var e=t||{},n={};void 0!==e.x&&void 0!==e.y&&void 0!==e.width&&void 0!==e.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var i=Math.ceil(e.width||n.width),a=Math.ceil(e.height||n.height),s=e.pixelRatio,l=void 0===e.x?n.x:e.x,u=void 0===e.y?n.y:e.y,h=e.offset||0,p=e.drawBorder||!1;if(i&&a){i+=2*h,a+=2*h,l-=h,u-=h;var g=new o.SceneCanvas({pixelRatio:s,width:i,height:a}),y=new o.SceneCanvas({pixelRatio:s,width:0,height:0}),v=new o.HitCanvas({pixelRatio:1,width:i,height:a}),m=g.getContext(),b=v.getContext();return v.isCache=!0,g.isCache=!0,this._cache.delete("canvas"),this._filterUpToDate=!1,!1===e.imageSmoothingEnabled&&(g.getContext()._context.imageSmoothingEnabled=!1,y.getContext()._context.imageSmoothingEnabled=!1),m.save(),b.save(),m.translate(-l,-u),b.translate(-l,-u),this._isUnderCache=!0,this._clearSelfAndDescendantCache(c),this._clearSelfAndDescendantCache(d),this.drawScene(g,this),this.drawHit(v,this),this._isUnderCache=!1,m.restore(),b.restore(),p&&(m.save(),m.beginPath(),m.rect(0,0,i,a),m.closePath(),m.setAttr("strokeStyle","red"),m.setAttr("lineWidth",5),m.stroke(),m.restore()),this._cache.set(f,{scene:g,filter:y,hit:v,x:l,y:u}),this}r.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},t.prototype.isCached=function(){return this._cache.has("canvas")},t.prototype.getClientRect=function(t){throw new Error('abstract "getClientRect" method call')},t.prototype._transformedRect=function(t,e){var n,r,i,o,a=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],s=this.getAbsoluteTransform(e);return a.forEach((function(t){var e=s.point(t);void 0===n&&(n=i=e.x,r=o=e.y),n=Math.min(n,e.x),r=Math.min(r,e.y),i=Math.max(i,e.x),o=Math.max(o,e.y)})),{x:n,y:r,width:i-n,height:o-r}},t.prototype._drawCachedSceneCanvas=function(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this);var e=this._getCanvasCache();t.translate(e.x,e.y);var n=this._getCachedSceneCanvas(),r=n.pixelRatio;t.drawImage(n._canvas,0,0,n.width/r,n.height/r),t.restore()},t.prototype._drawCachedHitCanvas=function(t){var e=this._getCanvasCache(),n=e.hit;t.save(),t.translate(e.x,e.y),t.drawImage(n._canvas,0,0),t.restore()},t.prototype._getCachedSceneCanvas=function(){var t,e,n,i,o=this.filters(),a=this._getCanvasCache(),s=a.scene,l=a.filter,c=l.getContext();if(o){if(!this._filterUpToDate){var u=s.pixelRatio;l.setSize(s.width/s.pixelRatio,s.height/s.pixelRatio);try{for(t=o.length,c.clear(),c.drawImage(s._canvas,0,0,s.getWidth()/u,s.getHeight()/u),e=c.getImageData(0,0,l.getWidth(),l.getHeight()),n=0;n<t;n++)"function"==typeof(i=o[n])?(i.call(this,e),c.putImageData(e,0,0)):r.Util.error("Filter should be type of function, but got "+typeof i+" instead. Please check correct filters")}catch(t){r.Util.error("Unable to apply filter. "+t.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return l}return s},t.prototype.on=function(t,e){if(this._cache&&this._cache.delete(u),3===arguments.length)return this._delegate.apply(this,arguments);var n,r,i,o,a=t.split(m),s=a.length;for(n=0;n<s;n++)i=(r=a[n].split("."))[0],o=r[1]||"",this.eventListeners[i]||(this.eventListeners[i]=[]),this.eventListeners[i].push({name:o,handler:e});return this},t.prototype.off=function(t,e){var n,r,i,o,a,s=(t||"").split(m),l=s.length;if(this._cache&&this._cache.delete(u),!t)for(r in this.eventListeners)this._off(r);for(n=0;n<l;n++)if(o=(i=s[n].split("."))[0],a=i[1],o)this.eventListeners[o]&&this._off(o,a,e);else for(r in this.eventListeners)this._off(r,a,e);return this},t.prototype.dispatchEvent=function(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this},t.prototype.addEventListener=function(t,e){return this.on(t,(function(t){e.call(this,t.evt)})),this},t.prototype.removeEventListener=function(t){return this.off(t),this},t.prototype._delegate=function(t,e,n){var i=this;this.on(t,(function(t){for(var o=t.target.findAncestors(e,!0,i),a=0;a<o.length;a++)(t=r.Util.cloneObject(t)).currentTarget=o[a],n.call(o[a],t)}))},t.prototype.remove=function(){return this.isDragging()&&this.stopDrag(),s.DD._dragElements.delete(this._id),this._remove(),this},t.prototype._clearCaches=function(){this._clearSelfAndDescendantCache(h),this._clearSelfAndDescendantCache(c),this._clearSelfAndDescendantCache(d),this._clearSelfAndDescendantCache(b),this._clearSelfAndDescendantCache(C),this._clearSelfAndDescendantCache(p)},t.prototype._remove=function(){this._clearCaches();var t=this.getParent();t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),this.parent=null)},t.prototype.destroy=function(){e._removeId(this.id(),this);for(var t=(this.name()||"").split(/\s/g),n=0;n<t.length;n++){var r=t[n];e._removeName(r,this._id)}return this.remove(),this},t.prototype.getAttr=function(t){var e="get"+r.Util._capitalize(t);return r.Util._isFunction(this[e])?this[e]():this.attrs[t]},t.prototype.getAncestors=function(){for(var t=this.getParent(),e=new r.Collection;t;)e.push(t),t=t.getParent();return e},t.prototype.getAttrs=function(){return this.attrs||{}},t.prototype.setAttrs=function(t){var e=this;return this._batchTransformChanges((function(){var n,i;if(!t)return e;for(n in t)"children"!==n&&(i="set"+r.Util._capitalize(n),r.Util._isFunction(e[i])?e[i](t[n]):e._setAttr(n,t[n]))})),this},t.prototype.isListening=function(){return this._getCache(p,this._isListening)},t.prototype._isListening=function(t){if(!this.listening())return!1;var e=this.getParent();return!e||e===t||this===t||e._isListening(t)},t.prototype.isVisible=function(){return this._getCache(C,this._isVisible)},t.prototype._isVisible=function(t){if(!this.visible())return!1;var e=this.getParent();return!e||e===t||this===t||e._isVisible(t)},t.prototype.shouldDrawHit=function(t){if(t)return this._isVisible(t)&&this._isListening(t);var e=this.getLayer(),n=!1;s.DD._dragElements.forEach((function(t){"dragging"===t.dragStatus&&("Stage"===t.node.nodeType||t.node.getLayer()===e)&&(n=!0)}));var r=!a.Konva.hitOnDragEnabled&&n;return this.isListening()&&this.isVisible()&&!r},t.prototype.show=function(){return this.visible(!0),this},t.prototype.hide=function(){return this.visible(!1),this},t.prototype.getZIndex=function(){return this.index||0},t.prototype.getAbsoluteZIndex=function(){var t,e,n,r,i=this.getDepth(),o=this,a=0;return"Stage"!==o.nodeType&&function s(l){for(t=[],e=l.length,n=0;n<e;n++)r=l[n],a++,r.nodeType!==v&&(t=t.concat(r.getChildren().toArray())),r._id===o._id&&(n=e);t.length>0&&t[0].getDepth()<=i&&s(t)}(o.getStage().getChildren()),a},t.prototype.getDepth=function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},t.prototype._batchTransformChanges=function(t){this._batchingTransformChange=!0,t(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache(_),this._clearSelfAndDescendantCache(h,!0)),this._needClearTransformCache=!1},t.prototype.setPosition=function(t){var e=this;return this._batchTransformChanges((function(){e.x(t.x),e.y(t.y)})),this},t.prototype.getPosition=function(){return{x:this.x(),y:this.y()}},t.prototype.getAbsolutePosition=function(t){for(var e=!1,n=this.parent;n;){if(n.isCached()){e=!0;break}n=n.parent}e&&!t&&(t=!0);var i=this.getAbsoluteTransform(t).getMatrix(),o=new r.Transform,a=this.offset();return o.m=i.slice(),o.translate(a.x,a.y),o.getTranslation()},t.prototype.setAbsolutePosition=function(t){var e=this._clearTransform();this.attrs.x=e.x,this.attrs.y=e.y,delete e.x,delete e.y,this._clearCache(_);var n=this._getAbsoluteTransform().copy();return n.invert(),n.translate(t.x,t.y),t={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this._setTransform(e),this.setPosition({x:t.x,y:t.y}),this._clearCache(_),this._clearSelfAndDescendantCache(h),this},t.prototype._setTransform=function(t){var e;for(e in t)this.attrs[e]=t[e]},t.prototype._clearTransform=function(){var t={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,t},t.prototype.move=function(t){var e=t.x,n=t.y,r=this.x(),i=this.y();return void 0!==e&&(r+=e),void 0!==n&&(i+=n),this.setPosition({x:r,y:i}),this},t.prototype._eachAncestorReverse=function(t,e){var n,r,i=[],o=this.getParent();if(!e||e._id!==this._id){for(i.unshift(this);o&&(!e||o._id!==e._id);)i.unshift(o),o=o.parent;for(n=i.length,r=0;r<n;r++)t(i[r])}},t.prototype.rotate=function(t){return this.rotation(this.rotation()+t),this},t.prototype.moveToTop=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},t.prototype.moveUp=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveUp function is ignored."),!1;var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)},t.prototype.moveDown=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveDown function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)},t.prototype.moveToBottom=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},t.prototype.setZIndex=function(t){if(!this.parent)return r.Util.warn("Node has no parent. zIndex parameter is ignored."),this;(t<0||t>=this.parent.children.length)&&r.Util.warn("Unexpected value "+t+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this},t.prototype.getAbsoluteOpacity=function(){return this._getCache(c,this._getAbsoluteOpacity)},t.prototype._getAbsoluteOpacity=function(){var t=this.opacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=e.getAbsoluteOpacity()),t},t.prototype.moveTo=function(t){return this.getParent()!==t&&(this._remove(),t.add(this)),this},t.prototype.toObject=function(){var t,e,n,i,o={},a=this.getAttrs();for(t in o.attrs={},a)e=a[t],r.Util.isObject(e)&&!r.Util._isPlainObject(e)&&!r.Util._isArray(e)||(n="function"==typeof this[t]&&this[t],delete a[t],i=n?n.call(this):null,a[t]=e,i!==e&&(o.attrs[t]=e));return o.className=this.getClassName(),r.Util._prepareToStringify(o)},t.prototype.toJSON=function(){return JSON.stringify(this.toObject())},t.prototype.getParent=function(){return this.parent},t.prototype.findAncestors=function(t,e,n){var r=[];e&&this._isMatch(t)&&r.push(this);for(var i=this.parent;i;){if(i===n)return r;i._isMatch(t)&&r.push(i),i=i.parent}return r},t.prototype.isAncestorOf=function(t){return!1},t.prototype.findAncestor=function(t,e,n){return this.findAncestors(t,e,n)[0]},t.prototype._isMatch=function(t){if(!t)return!1;if("function"==typeof t)return t(this);var e,n,i=t.replace(/ /g,"").split(","),o=i.length;for(e=0;e<o;e++)if(n=i[e],r.Util.isValidSelector(n)||(r.Util.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),r.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),r.Util.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(this.className===n||this.nodeType===n)return!0;return!1},t.prototype.getLayer=function(){var t=this.getParent();return t?t.getLayer():null},t.prototype.getStage=function(){return this._getCache(b,this._getStage)},t.prototype._getStage=function(){var t=this.getParent();return t?t.getStage():void 0},t.prototype.fire=function(t,e,n){return void 0===e&&(e={}),e.target=e.target||this,n?this._fireAndBubble(t,e):this._fire(t,e),this},t.prototype.getAbsoluteTransform=function(t){return t?this._getAbsoluteTransform(t):this._getCache(h,this._getAbsoluteTransform)},t.prototype._getAbsoluteTransform=function(t){var e;if(t)return e=new r.Transform,this._eachAncestorReverse((function(t){var n=t.transformsEnabled();"all"===n?e.multiply(t.getTransform()):"position"===n&&e.translate(t.x()-t.offsetX(),t.y()-t.offsetY())}),t),e;e=this._cache.get(h)||new r.Transform,this.parent?this.parent.getAbsoluteTransform().copyInto(e):e.reset();var n=this.transformsEnabled();if("all"===n)e.multiply(this.getTransform());else if("position"===n){var i=this.attrs.x||0,o=this.attrs.y||0,a=this.attrs.offsetX||0,s=this.attrs.offsetY||0;e.translate(i-a,o-s)}return e.dirty=!1,e},t.prototype.getAbsoluteScale=function(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();var n=this.getAbsoluteTransform(t).decompose();return{x:n.scaleX,y:n.scaleY}},t.prototype.getAbsoluteRotation=function(){return this.getAbsoluteTransform().decompose().rotation},t.prototype.getTransform=function(){return this._getCache(_,this._getTransform)},t.prototype._getTransform=function(){var t,e,n=this._cache.get(_)||new r.Transform;n.reset();var i=this.x(),o=this.y(),s=a.Konva.getAngle(this.rotation()),l=null!==(t=this.attrs.scaleX)&&void 0!==t?t:1,c=null!==(e=this.attrs.scaleY)&&void 0!==e?e:1,u=this.attrs.skewX||0,h=this.attrs.skewY||0,d=this.attrs.offsetX||0,f=this.attrs.offsetY||0;return 0===i&&0===o||n.translate(i,o),0!==s&&n.rotate(s),0===u&&0===h||n.skew(u,h),1===l&&1===c||n.scale(l,c),0===d&&0===f||n.translate(-1*d,-1*f),n.dirty=!1,n},t.prototype.clone=function(t){var e,n,i,o,a,s=r.Util.cloneObject(this.attrs);for(e in t)s[e]=t[e];var l=new this.constructor(s);for(e in this.eventListeners)for(i=(n=this.eventListeners[e]).length,o=0;o<i;o++)(a=n[o]).name.indexOf("konva")<0&&(l.eventListeners[e]||(l.eventListeners[e]=[]),l.eventListeners[e].push(a));return l},t.prototype._toKonvaCanvas=function(t){t=t||{};var e=this.getClientRect(),n=this.getStage(),r=void 0!==t.x?t.x:e.x,i=void 0!==t.y?t.y:e.y,a=t.pixelRatio||1,s=new o.SceneCanvas({width:t.width||e.width||(n?n.width():0),height:t.height||e.height||(n?n.height():0),pixelRatio:a}),l=s.getContext();return l.save(),(r||i)&&l.translate(-1*r,-1*i),this.drawScene(s),l.restore(),s},t.prototype.toCanvas=function(t){return this._toKonvaCanvas(t)._canvas},t.prototype.toDataURL=function(t){var e=(t=t||{}).mimeType||null,n=t.quality||null,r=this._toKonvaCanvas(t).toDataURL(e,n);return t.callback&&t.callback(r),r},t.prototype.toImage=function(t){if(!t||!t.callback)throw"callback required for toImage method config argument";var e=t.callback;delete t.callback,r.Util._urlToImage(this.toDataURL(t),(function(t){e(t)}))},t.prototype.setSize=function(t){return this.width(t.width),this.height(t.height),this},t.prototype.getSize=function(){return{width:this.width(),height:this.height()}},t.prototype.getClassName=function(){return this.className||this.nodeType},t.prototype.getType=function(){return this.nodeType},t.prototype.getDragDistance=function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():a.Konva.dragDistance},t.prototype._off=function(t,e,n){var r,i,o,a=this.eventListeners[t];for(r=0;r<a.length;r++)if(i=a[r].name,o=a[r].handler,!("konva"===i&&"konva"!==e||e&&i!==e||n&&n!==o)){if(a.splice(r,1),0===a.length){delete this.eventListeners[t];break}r--}},t.prototype._fireChangeEvent=function(t,e,n){this._fire(t+"Change",{oldVal:e,newVal:n})},t.prototype.setId=function(t){var n=this.id();return e._removeId(n,this),function(t,n){n&&(e.ids[n]=t)}(this,t),this._setAttr("id",t),this},t.prototype.setName=function(t){var n,r,i=(this.name()||"").split(/\s/g),o=(t||"").split(/\s/g);for(r=0;r<i.length;r++)n=i[r],-1===o.indexOf(n)&&n&&e._removeName(n,this._id);for(r=0;r<o.length;r++)n=o[r],-1===i.indexOf(n)&&n&&e._addName(this,n);return this._setAttr("name",t),this},t.prototype.addName=function(t){if(!this.hasName(t)){var e=this.name(),n=e?e+" "+t:t;this.setName(n)}return this},t.prototype.hasName=function(t){if(!t)return!1;var e=this.name();return!!e&&-1!==(e||"").split(/\s/g).indexOf(t)},t.prototype.removeName=function(t){var e=(this.name()||"").split(/\s/g),n=e.indexOf(t);return-1!==n&&(e.splice(n,1),this.setName(e.join(" "))),this},t.prototype.setAttr=function(t,e){var n=this["set"+r.Util._capitalize(t)];return r.Util._isFunction(n)?n.call(this,e):this._setAttr(t,e),this},t.prototype._setAttr=function(t,e,n){void 0===n&&(n=!1);var i=this.attrs[t];(i!==e||r.Util.isObject(e))&&(null==e?delete this.attrs[t]:this.attrs[t]=e,this._shouldFireChangeEvents&&this._fireChangeEvent(t,i,e))},t.prototype._setComponentAttr=function(t,e,n){var r;void 0!==n&&((r=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=n,this._fireChangeEvent(t,r,n))},t.prototype._fireAndBubble=function(t,e,n){if(e&&this.nodeType===v&&(e.target=this),t!==g&&t!==y||!(n&&(this===n||this.isAncestorOf&&this.isAncestorOf(n))||"Stage"===this.nodeType&&!n)){this._fire(t,e);var r=(t===g||t===y)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(e&&!e.cancelBubble||!e)&&this.parent&&this.parent.isListening()&&!r&&(n&&n.parent?this._fireAndBubble.call(this.parent,t,e,n):this._fireAndBubble.call(this.parent,t,e))}},t.prototype._getProtoListeners=function(t){var e=this._cache.get(u);if(!e){e={};for(var n=Object.getPrototypeOf(this);n;)if(n.eventListeners){for(var r in n.eventListeners){var i=n.eventListeners[r],o=e[r]||[];e[r]=i.concat(o)}n=Object.getPrototypeOf(n)}else n=Object.getPrototypeOf(n);this._cache.set(u,e)}return e[t]},t.prototype._fire=function(t,e){(e=e||{}).currentTarget=this,e.type=t;var n=this._getProtoListeners(t);if(n)for(var r=0;r<n.length;r++)n[r].handler.call(this,e);var i=this.eventListeners[t];if(i)for(r=0;r<i.length;r++)i[r].handler.call(this,e)},t.prototype.draw=function(){return this.drawScene(),this.drawHit(),this},t.prototype._createDragElement=function(t){var e=t?t.pointerId:void 0,n=this.getStage(),r=this.getAbsolutePosition(),i=n._getPointerById(e)||n._changedPointerPositions[0]||r;s.DD._dragElements.set(this._id,{node:this,startPointerPos:i,offset:{x:i.x-r.x,y:i.y-r.y},dragStatus:"ready",pointerId:e})},t.prototype.startDrag=function(t,e){void 0===e&&(e=!0),s.DD._dragElements.has(this._id)||this._createDragElement(t),s.DD._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:t&&t.evt},e)},t.prototype._setDragPosition=function(t,e){var n=this.getStage()._getPointerById(e.pointerId);if(n){var i={x:n.x-e.offset.x,y:n.y-e.offset.y},o=this.dragBoundFunc();if(void 0!==o){var a=o.call(this,i,t);a?i=a:r.Util.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===i.x&&this._lastPos.y===i.y||(this.setAbsolutePosition(i),this.getLayer()?this.getLayer().batchDraw():this.getStage()&&this.getStage().batchDraw()),this._lastPos=i}},t.prototype.stopDrag=function(t){var e=s.DD._dragElements.get(this._id);e&&(e.dragStatus="stopped"),s.DD._endDragBefore(t),s.DD._endDragAfter(t)},t.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()},t.prototype.isDragging=function(){var t=s.DD._dragElements.get(this._id);return!!t&&"dragging"===t.dragStatus},t.prototype._listenDrag=function(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(t){var e=this;if((void 0===t.evt.button||a.Konva.dragButtons.indexOf(t.evt.button)>=0)&&!this.isDragging()){var n=!1;s.DD._dragElements.forEach((function(t){e.isAncestorOf(t.node)&&(n=!0)})),n||this._createDragElement(t)}}))},t.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;var t=s.DD._dragElements.get(this._id),e=t&&"dragging"===t.dragStatus,n=t&&"ready"===t.dragStatus;e?this.stopDrag():n&&s.DD._dragElements.delete(this._id)}},t.prototype._dragCleanup=function(){this.off("mousedown.konva"),this.off("touchstart.konva")},t.create=function(t,e){return r.Util._isString(t)&&(t=JSON.parse(t)),this._createNode(t,e)},t._createNode=function(e,n){var i,o,s,l=t.prototype.getClassName.call(e),c=e.children;if(n&&(e.attrs.container=n),a._NODES_REGISTRY[l]||(r.Util.warn('Can not find a node with class name "'+l+'". Fallback to "Shape".'),l="Shape"),i=new(0,a._NODES_REGISTRY[l])(e.attrs),c)for(o=c.length,s=0;s<o;s++)i.add(t._createNode(c[s]));return i},t}();e.Node=k,k.prototype.nodeType="Node",k.prototype._attrsAffectingSize=[],k.prototype.eventListeners={},k.prototype.on.call(k.prototype,w,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache(_),this._clearSelfAndDescendantCache(h))})),k.prototype.on.call(k.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(C)})),k.prototype.on.call(k.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(p)})),k.prototype.on.call(k.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(c)}));var P=i.Factory.addGetterSetter;P(k,"zIndex"),P(k,"absolutePosition"),P(k,"position"),P(k,"x",0,l.getNumberValidator()),P(k,"y",0,l.getNumberValidator()),P(k,"globalCompositeOperation","source-over",l.getStringValidator()),P(k,"opacity",1,l.getNumberValidator()),P(k,"name","",l.getStringValidator()),P(k,"id","",l.getStringValidator()),P(k,"rotation",0,l.getNumberValidator()),i.Factory.addComponentsGetterSetter(k,"scale",["x","y"]),P(k,"scaleX",1,l.getNumberValidator()),P(k,"scaleY",1,l.getNumberValidator()),i.Factory.addComponentsGetterSetter(k,"skew",["x","y"]),P(k,"skewX",0,l.getNumberValidator()),P(k,"skewY",0,l.getNumberValidator()),i.Factory.addComponentsGetterSetter(k,"offset",["x","y"]),P(k,"offsetX",0,l.getNumberValidator()),P(k,"offsetY",0,l.getNumberValidator()),P(k,"dragDistance",null,l.getNumberValidator()),P(k,"width",0,l.getNumberValidator()),P(k,"height",0,l.getNumberValidator()),P(k,"listening",!0,l.getBooleanValidator()),P(k,"preventDefault",!0,l.getBooleanValidator()),P(k,"filters",null,(function(t){return this._filterUpToDate=!1,t})),P(k,"visible",!0,l.getBooleanValidator()),P(k,"transformsEnabled","all",l.getStringValidator()),P(k,"size"),P(k,"dragBoundFunc"),P(k,"draggable",!1,l.getBooleanValidator()),i.Factory.backCompat(k,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),r.Collection.mapMethods(k)},8479:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4417),i=new Map,o=void 0!==r.Konva._global.PointerEvent;function a(t){return{evt:t,pointerId:t.pointerId}}function s(t,e){var n=i.get(t);if(n){var r=n.getStage();r&&r.content,i.delete(t),o&&n._fire("lostpointercapture",a(new PointerEvent("lostpointercapture")))}}e.getCapturedShape=function(t){return i.get(t)},e.createEvent=a,e.hasPointerCapture=function(t,e){return i.get(t)===e},e.setPointerCapture=function(t,e){s(t),e.getStage()&&(i.set(t,e),o&&e._fire("gotpointercapture",a(new PointerEvent("gotpointercapture"))))},e.releaseCapture=s},7955:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o,a=n(8588),s=n(1455),l=n(7939),c=n(3774),u=n(4417),h=n(8479),d="hasShadow",f="shadowRGBA",p="patternImage",g="linearGradient",y="radialGradient";function v(){return o||(o=a.Util.createCanvasElement().getContext("2d"))}e.shapes={};var m=function(t){function n(n){for(var r,i=t.call(this,n)||this;!(r=a.Util.getRandomColor())||r in e.shapes;);return i.colorKey=r,e.shapes[r]=i,i}return i(n,t),n.prototype.getContext=function(){return this.getLayer().getContext()},n.prototype.getCanvas=function(){return this.getLayer().getCanvas()},n.prototype.getSceneFunc=function(){return this.attrs.sceneFunc||this._sceneFunc},n.prototype.getHitFunc=function(){return this.attrs.hitFunc||this._hitFunc},n.prototype.hasShadow=function(){return this._getCache(d,this._hasShadow)},n.prototype._hasShadow=function(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())},n.prototype._getFillPattern=function(){return this._getCache(p,this.__getFillPattern)},n.prototype.__getFillPattern=function(){if(this.fillPatternImage()){var t=v().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");return t&&t.setTransform&&t.setTransform({a:this.fillPatternScaleX(),b:0,c:0,d:this.fillPatternScaleY(),e:0,f:0}),t}},n.prototype._getLinearGradient=function(){return this._getCache(g,this.__getLinearGradient)},n.prototype.__getLinearGradient=function(){var t=this.fillLinearGradientColorStops();if(t){for(var e=v(),n=this.fillLinearGradientStartPoint(),r=this.fillLinearGradientEndPoint(),i=e.createLinearGradient(n.x,n.y,r.x,r.y),o=0;o<t.length;o+=2)i.addColorStop(t[o],t[o+1]);return i}},n.prototype._getRadialGradient=function(){return this._getCache(y,this.__getRadialGradient)},n.prototype.__getRadialGradient=function(){var t=this.fillRadialGradientColorStops();if(t){for(var e=v(),n=this.fillRadialGradientStartPoint(),r=this.fillRadialGradientEndPoint(),i=e.createRadialGradient(n.x,n.y,this.fillRadialGradientStartRadius(),r.x,r.y,this.fillRadialGradientEndRadius()),o=0;o<t.length;o+=2)i.addColorStop(t[o],t[o+1]);return i}},n.prototype.getShadowRGBA=function(){return this._getCache(f,this._getShadowRGBA)},n.prototype._getShadowRGBA=function(){if(this.hasShadow()){var t=a.Util.colorToRGBA(this.shadowColor());return"rgba("+t.r+","+t.g+","+t.b+","+t.a*(this.shadowOpacity()||1)+")"}},n.prototype.hasFill=function(){var t=this;return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(function(){return t.fillEnabled()&&!!(t.fill()||t.fillPatternImage()||t.fillLinearGradientColorStops()||t.fillRadialGradientColorStops())}))},n.prototype.hasStroke=function(){var t=this;return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(function(){return t.strokeEnabled()&&t.strokeWidth()&&!(!t.stroke()&&!t.strokeLinearGradientColorStops())}))},n.prototype.hasHitStroke=function(){var t=this.hitStrokeWidth();return"auto"===t?this.hasStroke():this.strokeEnabled()&&!!t},n.prototype.intersects=function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawHit(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},n.prototype.destroy=function(){return l.Node.prototype.destroy.call(this),delete e.shapes[this.colorKey],delete this.colorKey,this},n.prototype._useBufferCanvas=function(t){var e;if(!this.getStage())return!1;if(null!==(e=this.attrs.perfectDrawEnabled)&&void 0!==e&&!e)return!1;var n=t||this.hasFill(),r=this.hasStroke(),i=1!==this.getAbsoluteOpacity();if(n&&r&&i)return!0;var o=this.hasShadow(),a=this.shadowForStrokeEnabled();return!!(n&&r&&o&&a)},n.prototype.setStrokeHitEnabled=function(t){a.Util.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),t?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)},n.prototype.getStrokeHitEnabled=function(){return 0!==this.hitStrokeWidth()},n.prototype.getSelfRect=function(){var t=this.size();return{x:this._centroid?-t.width/2:0,y:this._centroid?-t.height/2:0,width:t.width,height:t.height}},n.prototype.getClientRect=function(t){void 0===t&&(t={});var e=t.skipTransform,n=t.relativeTo,r=this.getSelfRect(),i=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,o=r.width+i,a=r.height+i,s=!t.skipShadow&&this.hasShadow(),l=s?this.shadowOffsetX():0,c=s?this.shadowOffsetY():0,u=o+Math.abs(l),h=a+Math.abs(c),d=s&&this.shadowBlur()||0,f=u+2*d,p=h+2*d,g=0;Math.round(i/2)!==i/2&&(g=1);var y={width:f+g,height:p+g,x:-Math.round(i/2+d)+Math.min(l,0)+r.x,y:-Math.round(i/2+d)+Math.min(c,0)+r.y};return e?y:this._transformedRect(y,n)},n.prototype.drawScene=function(t,e){var n,r,i=this.getLayer(),o=t||i.getCanvas(),a=o.getContext(),s=this._getCanvasCache(),l=this.getSceneFunc(),c=this.hasShadow(),u=o.isCache,h=o.isCache,d=e===this;if(!this.isVisible()&&!u)return this;if(s){a.save();var f=this.getAbsoluteTransform(e).getMatrix();return a.transform(f[0],f[1],f[2],f[3],f[4],f[5]),this._drawCachedSceneCanvas(a),a.restore(),this}if(!l)return this;if(a.save(),this._useBufferCanvas()&&!h){(r=(n=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this);var p=this.getAbsoluteTransform(e).getMatrix();r.transform(p[0],p[1],p[2],p[3],p[4],p[5]),l.call(this,r,this),r.restore();var g=n.pixelRatio;c&&a._applyShadow(this),a._applyOpacity(this),a._applyGlobalCompositeOperation(this),a.drawImage(n._canvas,0,0,n.width/g,n.height/g)}else a._applyLineJoin(this),d||(p=this.getAbsoluteTransform(e).getMatrix(),a.transform(p[0],p[1],p[2],p[3],p[4],p[5]),a._applyOpacity(this),a._applyGlobalCompositeOperation(this)),c&&a._applyShadow(this),l.call(this,a,this);return a.restore(),this},n.prototype.drawHit=function(t,e){if(!this.shouldDrawHit(e))return this;var n=this.getLayer(),r=t||n.hitCanvas,i=r&&r.getContext(),o=this.hitFunc()||this.sceneFunc(),s=this._getCanvasCache(),l=s&&s.hit;if(this.colorKey||(console.log(this),a.Util.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()")),l){i.save();var c=this.getAbsoluteTransform(e).getMatrix();return i.transform(c[0],c[1],c[2],c[3],c[4],c[5]),this._drawCachedHitCanvas(i),i.restore(),this}if(!o)return this;if(i.save(),i._applyLineJoin(this),this!==e){var u=this.getAbsoluteTransform(e).getMatrix();i.transform(u[0],u[1],u[2],u[3],u[4],u[5])}return o.call(this,i,this),i.restore(),this},n.prototype.drawHitFromCache=function(t){void 0===t&&(t=0);var e,n,r,i,o,s=this._getCanvasCache(),l=this._getCachedSceneCanvas(),c=s.hit,u=c.getContext(),h=c.getWidth(),d=c.getHeight();u.clear(),u.drawImage(l._canvas,0,0,h,d);try{for(r=(n=(e=u.getImageData(0,0,h,d)).data).length,i=a.Util._hexToRgb(this.colorKey),o=0;o<r;o+=4)n[o+3]>t?(n[o]=i.r,n[o+1]=i.g,n[o+2]=i.b,n[o+3]=255):n[o+3]=0;u.putImageData(e,0,0)}catch(t){a.Util.error("Unable to draw hit graph from cached scene canvas. "+t.message)}return this},n.prototype.hasPointerCapture=function(t){return h.hasPointerCapture(t,this)},n.prototype.setPointerCapture=function(t){h.setPointerCapture(t,this)},n.prototype.releaseCapture=function(t){h.releaseCapture(t,this)},n}(l.Node);e.Shape=m,m.prototype._fillFunc=function(t){t.fill()},m.prototype._strokeFunc=function(t){t.stroke()},m.prototype._fillFuncHit=function(t){t.fill()},m.prototype._strokeFuncHit=function(t){t.stroke()},m.prototype._centroid=!1,m.prototype.nodeType="Shape",u._registerNode(m),m.prototype.eventListeners={},m.prototype.on.call(m.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(d)})),m.prototype.on.call(m.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(f)})),m.prototype.on.call(m.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva",(function(){this._clearCache(p)})),m.prototype.on.call(m.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(g)})),m.prototype.on.call(m.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(y)})),s.Factory.addGetterSetter(m,"stroke",void 0,c.getStringOrGradientValidator()),s.Factory.addGetterSetter(m,"strokeWidth",2,c.getNumberValidator()),s.Factory.addGetterSetter(m,"hitStrokeWidth","auto",c.getNumberOrAutoValidator()),s.Factory.addGetterSetter(m,"strokeHitEnabled",!0,c.getBooleanValidator()),s.Factory.addGetterSetter(m,"perfectDrawEnabled",!0,c.getBooleanValidator()),s.Factory.addGetterSetter(m,"shadowForStrokeEnabled",!0,c.getBooleanValidator()),s.Factory.addGetterSetter(m,"lineJoin"),s.Factory.addGetterSetter(m,"lineCap"),s.Factory.addGetterSetter(m,"sceneFunc"),s.Factory.addGetterSetter(m,"hitFunc"),s.Factory.addGetterSetter(m,"dash"),s.Factory.addGetterSetter(m,"dashOffset",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"shadowColor",void 0,c.getStringValidator()),s.Factory.addGetterSetter(m,"shadowBlur",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"shadowOpacity",1,c.getNumberValidator()),s.Factory.addComponentsGetterSetter(m,"shadowOffset",["x","y"]),s.Factory.addGetterSetter(m,"shadowOffsetX",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"shadowOffsetY",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"fillPatternImage"),s.Factory.addGetterSetter(m,"fill",void 0,c.getStringOrGradientValidator()),s.Factory.addGetterSetter(m,"fillPatternX",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"fillPatternY",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"fillLinearGradientColorStops"),s.Factory.addGetterSetter(m,"strokeLinearGradientColorStops"),s.Factory.addGetterSetter(m,"fillRadialGradientStartRadius",0),s.Factory.addGetterSetter(m,"fillRadialGradientEndRadius",0),s.Factory.addGetterSetter(m,"fillRadialGradientColorStops"),s.Factory.addGetterSetter(m,"fillPatternRepeat","repeat"),s.Factory.addGetterSetter(m,"fillEnabled",!0),s.Factory.addGetterSetter(m,"strokeEnabled",!0),s.Factory.addGetterSetter(m,"shadowEnabled",!0),s.Factory.addGetterSetter(m,"dashEnabled",!0),s.Factory.addGetterSetter(m,"strokeScaleEnabled",!0),s.Factory.addGetterSetter(m,"fillPriority","color"),s.Factory.addComponentsGetterSetter(m,"fillPatternOffset",["x","y"]),s.Factory.addGetterSetter(m,"fillPatternOffsetX",0,c.getNumberValidator()),s.Factory.addGetterSetter(m,"fillPatternOffsetY",0,c.getNumberValidator()),s.Factory.addComponentsGetterSetter(m,"fillPatternScale",["x","y"]),s.Factory.addGetterSetter(m,"fillPatternScaleX",1,c.getNumberValidator()),s.Factory.addGetterSetter(m,"fillPatternScaleY",1,c.getNumberValidator()),s.Factory.addComponentsGetterSetter(m,"fillLinearGradientStartPoint",["x","y"]),s.Factory.addComponentsGetterSetter(m,"strokeLinearGradientStartPoint",["x","y"]),s.Factory.addGetterSetter(m,"fillLinearGradientStartPointX",0),s.Factory.addGetterSetter(m,"strokeLinearGradientStartPointX",0),s.Factory.addGetterSetter(m,"fillLinearGradientStartPointY",0),s.Factory.addGetterSetter(m,"strokeLinearGradientStartPointY",0),s.Factory.addComponentsGetterSetter(m,"fillLinearGradientEndPoint",["x","y"]),s.Factory.addComponentsGetterSetter(m,"strokeLinearGradientEndPoint",["x","y"]),s.Factory.addGetterSetter(m,"fillLinearGradientEndPointX",0),s.Factory.addGetterSetter(m,"strokeLinearGradientEndPointX",0),s.Factory.addGetterSetter(m,"fillLinearGradientEndPointY",0),s.Factory.addGetterSetter(m,"strokeLinearGradientEndPointY",0),s.Factory.addComponentsGetterSetter(m,"fillRadialGradientStartPoint",["x","y"]),s.Factory.addGetterSetter(m,"fillRadialGradientStartPointX",0),s.Factory.addGetterSetter(m,"fillRadialGradientStartPointY",0),s.Factory.addComponentsGetterSetter(m,"fillRadialGradientEndPoint",["x","y"]),s.Factory.addGetterSetter(m,"fillRadialGradientEndPointX",0),s.Factory.addGetterSetter(m,"fillRadialGradientEndPointY",0),s.Factory.addGetterSetter(m,"fillPatternRotation",0),s.Factory.backCompat(m,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),a.Collection.mapMethods(m)},8342:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(8783),l=n(4417),c=n(4842),u=n(210),h=n(4417),d=n(8479),f="mouseout",p="mouseleave",g="mouseover",y="mouseenter",v="mousemove",m="mousedown",b="mouseup",_="pointermove",C="pointerdown",w="pointerup",S="contextmenu",x="click",k="dblclick",P="touchstart",T="touchend",E="dbltap",F="touchmove",A="wheel",M=[y,m,v,b,f,P,F,T,g,A,S,C,_,w,"pointercancel","lostpointercapture"],O=M.length;function N(t,e){t.content.addEventListener(e,(function(n){t["_"+e](n)}),!1)}function D(t){return void 0===t&&(t={}),(t.clipFunc||t.clipWidth||t.clipHeight)&&o.Util.warn("Stage does not support clipping. Please use clip for Layers or Groups."),t}e.stages=[];var L=function(t){function n(n){var r=t.call(this,D(n))||this;return r._pointerPositions=[],r._changedPointerPositions=[],r._buildDOM(),r._bindContentEvents(),e.stages.push(r),r.on("widthChange.konva heightChange.konva",r._resizeDOM),r.on("visibleChange.konva",r._checkVisibility),r.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(function(){D(r.attrs)})),r._checkVisibility(),r}return i(n,t),n.prototype._validateAdd=function(t){var e="Layer"===t.getType(),n="FastLayer"===t.getType();e||n||o.Util.throw("You may only add layers to the stage.")},n.prototype._checkVisibility=function(){if(this.content){var t=this.visible()?"":"none";this.content.style.display=t}},n.prototype.setContainer=function(t){if("string"==typeof t){if("."===t.charAt(0)){var e=t.slice(1);t=document.getElementsByClassName(e)[0]}else{var n;n="#"!==t.charAt(0)?t:t.slice(1),t=document.getElementById(n)}if(!t)throw"Can not find container in document with id "+n}return this._setAttr("container",t),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),t.appendChild(this.content)),this},n.prototype.shouldDrawHit=function(){return!0},n.prototype.clear=function(){var t,e=this.children,n=e.length;for(t=0;t<n;t++)e[t].clear();return this},n.prototype.clone=function(t){return t||(t={}),t.container=document.createElement("div"),s.Container.prototype.clone.call(this,t)},n.prototype.destroy=function(){t.prototype.destroy.call(this);var n=this.content;n&&o.Util._isInDocument(n)&&this.container().removeChild(n);var r=e.stages.indexOf(this);return r>-1&&e.stages.splice(r,1),this},n.prototype.getPointerPosition=function(){var t=this._pointerPositions[0]||this._changedPointerPositions[0];return t?{x:t.x,y:t.y}:(o.Util.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)},n.prototype._getPointerById=function(t){return this._pointerPositions.find((function(e){return e.id===t}))},n.prototype.getPointersPositions=function(){return this._pointerPositions},n.prototype.getStage=function(){return this},n.prototype.getContent=function(){return this.content},n.prototype._toKonvaCanvas=function(t){(t=t||{}).x=t.x||0,t.y=t.y||0,t.width=t.width||this.width(),t.height=t.height||this.height();var e=new c.SceneCanvas({width:t.width,height:t.height,pixelRatio:t.pixelRatio||1}),n=e.getContext()._context,r=this.children;return(t.x||t.y)&&n.translate(-1*t.x,-1*t.y),r.each((function(e){if(e.isVisible()){var r=e._toKonvaCanvas(t);n.drawImage(r._canvas,t.x,t.y,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}})),e},n.prototype.getIntersection=function(t,e){if(!t)return null;var n,r,i=this.children;for(n=i.length-1;n>=0;n--)if(r=i[n].getIntersection(t,e))return r;return null},n.prototype._resizeDOM=function(){var t=this.width(),e=this.height();this.content&&(this.content.style.width=t+"px",this.content.style.height=e+"px"),this.bufferCanvas.setSize(t,e),this.bufferHitCanvas.setSize(t,e),this.children.each((function(n){n.setSize({width:t,height:e}),n.draw()}))},n.prototype.add=function(e){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}t.prototype.add.call(this,e);var r=this.children.length;return r>5&&o.Util.warn("The stage has "+r+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),e.setSize({width:this.width(),height:this.height()}),e.draw(),l.Konva.isBrowser&&this.content.appendChild(e.canvas._canvas),this},n.prototype.getParent=function(){return null},n.prototype.getLayer=function(){return null},n.prototype.hasPointerCapture=function(t){return d.hasPointerCapture(t,this)},n.prototype.setPointerCapture=function(t){d.setPointerCapture(t,this)},n.prototype.releaseCapture=function(t){d.releaseCapture(t,this)},n.prototype.getLayers=function(){return this.getChildren()},n.prototype._bindContentEvents=function(){if(l.Konva.isBrowser)for(var t=0;t<O;t++)N(this,M[t])},n.prototype._mouseenter=function(t){this.setPointersPositions(t),this._fire(y,{evt:t,target:this,currentTarget:this})},n.prototype._mouseover=function(t){this.setPointersPositions(t),this._fire("contentMouseover",{evt:t}),this._fire(g,{evt:t,target:this,currentTarget:this})},n.prototype._mouseout=function(t){var e;this.setPointersPositions(t);var n=(null===(e=this.targetShape)||void 0===e?void 0:e.getStage())?this.targetShape:null,r=!u.DD.isDragging||l.Konva.hitOnDragEnabled;n&&r?(n._fireAndBubble(f,{evt:t}),n._fireAndBubble(p,{evt:t}),this._fire(p,{evt:t,target:this,currentTarget:this}),this.targetShape=null):r&&(this._fire(p,{evt:t,target:this,currentTarget:this}),this._fire(f,{evt:t,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[],this._fire("contentMouseout",{evt:t})},n.prototype._mousemove=function(t){var e;if(l.Konva.UA.ieMobile)return this._touchmove(t);this.setPointersPositions(t);var n,r=o.Util._getFirstPointerId(t),i=(null===(e=this.targetShape)||void 0===e?void 0:e.getStage())?this.targetShape:null,a=!u.DD.isDragging||l.Konva.hitOnDragEnabled;a&&((n=this.getIntersection(this.getPointerPosition()))&&n.isListening()?a&&i!==n?(i&&(i._fireAndBubble(f,{evt:t,pointerId:r},n),i._fireAndBubble(p,{evt:t,pointerId:r},n)),n._fireAndBubble(g,{evt:t,pointerId:r},i),n._fireAndBubble(y,{evt:t,pointerId:r},i),n._fireAndBubble(v,{evt:t,pointerId:r}),this.targetShape=n):n._fireAndBubble(v,{evt:t,pointerId:r}):(i&&a&&(i._fireAndBubble(f,{evt:t,pointerId:r}),i._fireAndBubble(p,{evt:t,pointerId:r}),this._fire(g,{evt:t,target:this,currentTarget:this,pointerId:r}),this.targetShape=null),this._fire(v,{evt:t,target:this,currentTarget:this,pointerId:r})),this._fire("contentMousemove",{evt:t})),t.cancelable&&t.preventDefault()},n.prototype._mousedown=function(t){if(l.Konva.UA.ieMobile)return this._touchstart(t);this.setPointersPositions(t);var e=o.Util._getFirstPointerId(t),n=this.getIntersection(this.getPointerPosition());u.DD.justDragged=!1,l.Konva.listenClickTap=!0,n&&n.isListening()?(this.clickStartShape=n,n._fireAndBubble(m,{evt:t,pointerId:e})):this._fire(m,{evt:t,target:this,currentTarget:this,pointerId:e}),this._fire("contentMousedown",{evt:t})},n.prototype._mouseup=function(t){if(l.Konva.UA.ieMobile)return this._touchend(t);this.setPointersPositions(t);var e=o.Util._getFirstPointerId(t),n=this.getIntersection(this.getPointerPosition()),r=this.clickStartShape,i=this.clickEndShape,a=!1;l.Konva.inDblClickWindow?(a=!0,clearTimeout(this.dblTimeout)):u.DD.justDragged||(l.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){l.Konva.inDblClickWindow=!1}),l.Konva.dblClickWindow),n&&n.isListening()?(this.clickEndShape=n,n._fireAndBubble(b,{evt:t,pointerId:e}),l.Konva.listenClickTap&&r&&r._id===n._id&&(n._fireAndBubble(x,{evt:t,pointerId:e}),a&&i&&i===n&&n._fireAndBubble(k,{evt:t,pointerId:e}))):(this.clickEndShape=null,this._fire(b,{evt:t,target:this,currentTarget:this,pointerId:e}),l.Konva.listenClickTap&&this._fire(x,{evt:t,target:this,currentTarget:this,pointerId:e}),a&&this._fire(k,{evt:t,target:this,currentTarget:this,pointerId:e})),this._fire("contentMouseup",{evt:t}),l.Konva.listenClickTap&&(this._fire("contentClick",{evt:t}),a&&this._fire("contentDblclick",{evt:t})),l.Konva.listenClickTap=!1,t.cancelable&&t.preventDefault()},n.prototype._contextmenu=function(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(S,{evt:t}):this._fire(S,{evt:t,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:t})},n.prototype._touchstart=function(t){var e=this;this.setPointersPositions(t);var n=!1;this._changedPointerPositions.forEach((function(r){var i=e.getIntersection(r);l.Konva.listenClickTap=!0,u.DD.justDragged=!1,i&&i.isListening()&&(l.Konva.captureTouchEventsEnabled&&i.setPointerCapture(r.id),e.tapStartShape=i,i._fireAndBubble(P,{evt:t,pointerId:r.id},e),n=!0,i.isListening()&&i.preventDefault()&&t.cancelable&&t.preventDefault())})),n||this._fire(P,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchstart",{evt:t})},n.prototype._touchmove=function(t){var e=this;if(this.setPointersPositions(t),!u.DD.isDragging||l.Konva.hitOnDragEnabled){var n=!1,r={};this._changedPointerPositions.forEach((function(i){var o=d.getCapturedShape(i.id)||e.getIntersection(i);o&&o.isListening()&&(r[o._id]||(r[o._id]=!0,o._fireAndBubble(F,{evt:t,pointerId:i.id}),n=!0,o.isListening()&&o.preventDefault()&&t.cancelable&&t.preventDefault()))})),n||this._fire(F,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchmove",{evt:t})}u.DD.isDragging&&u.DD.node.preventDefault()&&t.cancelable&&t.preventDefault()},n.prototype._touchend=function(t){var e=this;this.setPointersPositions(t);var n=this.tapEndShape,r=!1;l.Konva.inDblClickWindow?(r=!0,clearTimeout(this.dblTimeout)):u.DD.justDragged||(l.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){l.Konva.inDblClickWindow=!1}),l.Konva.dblClickWindow);var i=!1,o={},a=!1,s=!1;this._changedPointerPositions.forEach((function(c){var u=d.getCapturedShape(c.id)||e.getIntersection(c);u&&u.releaseCapture(c.id),u&&u.isListening()&&(o[u._id]||(o[u._id]=!0,e.tapEndShape=u,u._fireAndBubble(T,{evt:t,pointerId:c.id}),i=!0,l.Konva.listenClickTap&&u===e.tapStartShape&&(a=!0,u._fireAndBubble("tap",{evt:t,pointerId:c.id}),r&&n&&n===u&&(s=!0,u._fireAndBubble(E,{evt:t,pointerId:c.id}))),u.isListening()&&u.preventDefault()&&t.cancelable&&t.preventDefault()))})),i||this._fire(T,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),l.Konva.listenClickTap&&!a&&(this.tapEndShape=null,this._fire("tap",{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})),r&&!s&&this._fire(E,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchend",{evt:t}),l.Konva.listenClickTap&&(this._fire("contentTap",{evt:t}),r&&this._fire("contentDbltap",{evt:t})),this.preventDefault()&&t.cancelable&&t.preventDefault(),l.Konva.listenClickTap=!1},n.prototype._wheel=function(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(A,{evt:t}):this._fire(A,{evt:t,target:this,currentTarget:this}),this._fire("contentWheel",{evt:t})},n.prototype._pointerdown=function(t){if(l.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=d.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(C,d.createEvent(t))}},n.prototype._pointermove=function(t){if(l.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=d.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(_,d.createEvent(t))}},n.prototype._pointerup=function(t){if(l.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=d.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(w,d.createEvent(t)),d.releaseCapture(t.pointerId)}},n.prototype._pointercancel=function(t){if(l.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=d.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(w,d.createEvent(t)),d.releaseCapture(t.pointerId)}},n.prototype._lostpointercapture=function(t){d.releaseCapture(t.pointerId)},n.prototype.setPointersPositions=function(t){var e=this,n=this._getContentPosition(),r=null,i=null;void 0!==(t=t||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],o.Collection.prototype.each.call(t.touches,(function(t){e._pointerPositions.push({id:t.identifier,x:(t.clientX-n.left)/n.scaleX,y:(t.clientY-n.top)/n.scaleY})})),o.Collection.prototype.each.call(t.changedTouches||t.touches,(function(t){e._changedPointerPositions.push({id:t.identifier,x:(t.clientX-n.left)/n.scaleX,y:(t.clientY-n.top)/n.scaleY})}))):(r=(t.clientX-n.left)/n.scaleX,i=(t.clientY-n.top)/n.scaleY,this.pointerPos={x:r,y:i},this._pointerPositions=[{x:r,y:i,id:o.Util._getFirstPointerId(t)}],this._changedPointerPositions=[{x:r,y:i,id:o.Util._getFirstPointerId(t)}])},n.prototype._setPointerPosition=function(t){o.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(t)},n.prototype._getContentPosition=function(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var t=this.content.getBoundingClientRect();return{top:t.top,left:t.left,scaleX:t.width/this.content.clientWidth||1,scaleY:t.height/this.content.clientHeight||1}},n.prototype._buildDOM=function(){if(this.bufferCanvas=new c.SceneCanvas({width:this.width(),height:this.height()}),this.bufferHitCanvas=new c.HitCanvas({pixelRatio:1,width:this.width(),height:this.height()}),l.Konva.isBrowser){var t=this.container();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}},n.prototype.cache=function(){return o.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this},n.prototype.clearCache=function(){return this},n.prototype.batchDraw=function(){return this.children.each((function(t){t.batchDraw()})),this},n}(s.Container);e.Stage=L,L.prototype.nodeType="Stage",h._registerNode(L),a.Factory.addGetterSetter(L,"container")},8017:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(8588),i=n(6745),o=n(7939),a=n(4417),s={node:1,duration:1,easing:1,onFinish:1,yoyo:1},l=0,c=["fill","stroke","shadowColor"],u=function(){function t(t,e,n,r,i,o,a){this.prop=t,this.propFunc=e,this.begin=r,this._pos=r,this.duration=o,this._change=0,this.prevPos=0,this.yoyo=a,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=i-this.begin,this.pause()}return t.prototype.fire=function(t){var e=this[t];e&&e()},t.prototype.setTime=function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},t.prototype.getTime=function(){return this._time},t.prototype.setPosition=function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},t.prototype.getPosition=function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},t.prototype.play=function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},t.prototype.reverse=function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},t.prototype.seek=function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},t.prototype.reset=function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},t.prototype.finish=function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},t.prototype.update=function(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")},t.prototype.onEnterFrame=function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},t.prototype.pause=function(){this.state=1,this.fire("onPause")},t.prototype.getTimer=function(){return(new Date).getTime()},t}(),h=function(){function t(n){var o,c,h=this,d=n.node,f=d._id,p=n.easing||e.Easings.Linear,g=!!n.yoyo;o=void 0===n.duration?.3:0===n.duration?.001:n.duration,this.node=d,this._id=l++;var y=d.getLayer()||(d instanceof a.Konva.Stage?d.getLayers():null);for(c in y||r.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new i.Animation((function(){h.tween.onEnterFrame()}),y),this.tween=new u(c,(function(t){h._tweenFunc(t)}),p,0,1,1e3*o,g),this._addListeners(),t.attrs[f]||(t.attrs[f]={}),t.attrs[f][this._id]||(t.attrs[f][this._id]={}),t.tweens[f]||(t.tweens[f]={}),n)void 0===s[c]&&this._addAttr(c,n[c]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset,this.onUpdate=n.onUpdate}return t.prototype._addAttr=function(e,n){var i,o,a,s,l,u,h,d,f=this.node,p=f._id;if((a=t.tweens[p][e])&&delete t.attrs[p][a][e],i=f.getAttr(e),r.Util._isArray(n))if(o=[],l=Math.max(n.length,i.length),"points"===e&&n.length!==i.length&&(n.length>i.length?(h=i,i=r.Util._prepareArrayForTween(i,n,f.closed())):(u=n,n=r.Util._prepareArrayForTween(n,i,f.closed()))),0===e.indexOf("fill"))for(s=0;s<l;s++)if(s%2==0)o.push(n[s]-i[s]);else{var g=r.Util.colorToRGBA(i[s]);d=r.Util.colorToRGBA(n[s]),i[s]=g,o.push({r:d.r-g.r,g:d.g-g.g,b:d.b-g.b,a:d.a-g.a})}else for(s=0;s<l;s++)o.push(n[s]-i[s]);else-1!==c.indexOf(e)?(i=r.Util.colorToRGBA(i),o={r:(d=r.Util.colorToRGBA(n)).r-i.r,g:d.g-i.g,b:d.b-i.b,a:d.a-i.a}):o=n-i;t.attrs[p][this._id][e]={start:i,diff:o,end:n,trueEnd:u,trueStart:h},t.tweens[p][e]=this._id},t.prototype._tweenFunc=function(e){var n,i,o,a,s,l,u,h,d=this.node,f=t.attrs[d._id][this._id];for(n in f){if(o=(i=f[n]).start,a=i.diff,h=i.end,r.Util._isArray(o))if(s=[],u=Math.max(o.length,h.length),0===n.indexOf("fill"))for(l=0;l<u;l++)l%2==0?s.push((o[l]||0)+a[l]*e):s.push("rgba("+Math.round(o[l].r+a[l].r*e)+","+Math.round(o[l].g+a[l].g*e)+","+Math.round(o[l].b+a[l].b*e)+","+(o[l].a+a[l].a*e)+")");else for(l=0;l<u;l++)s.push((o[l]||0)+a[l]*e);else s=-1!==c.indexOf(n)?"rgba("+Math.round(o.r+a.r*e)+","+Math.round(o.g+a.g*e)+","+Math.round(o.b+a.b*e)+","+(o.a+a.a*e)+")":o+a*e;d.setAttr(n,s)}},t.prototype._addListeners=function(){var e=this;this.tween.onPlay=function(){e.anim.start()},this.tween.onReverse=function(){e.anim.start()},this.tween.onPause=function(){e.anim.stop()},this.tween.onFinish=function(){var n=e.node,r=t.attrs[n._id][e._id];r.points&&r.points.trueEnd&&n.setAttr("points",r.points.trueEnd),e.onFinish&&e.onFinish.call(e)},this.tween.onReset=function(){var n=e.node,r=t.attrs[n._id][e._id];r.points&&r.points.trueStart&&n.points(r.points.trueStart),e.onReset&&e.onReset()},this.tween.onUpdate=function(){e.onUpdate&&e.onUpdate.call(e)}},t.prototype.play=function(){return this.tween.play(),this},t.prototype.reverse=function(){return this.tween.reverse(),this},t.prototype.reset=function(){return this.tween.reset(),this},t.prototype.seek=function(t){return this.tween.seek(1e3*t),this},t.prototype.pause=function(){return this.tween.pause(),this},t.prototype.finish=function(){return this.tween.finish(),this},t.prototype.destroy=function(){var e,n=this.node._id,r=this._id,i=t.tweens[n];for(e in this.pause(),i)delete t.tweens[n][e];delete t.attrs[n][r]},t.attrs={},t.tweens={},t}();e.Tween=h,o.Node.prototype.to=function(t){var e=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),e&&e()},new h(t).play()},e.Easings={BackEaseIn:function(t,e,n,r){var i=1.70158;return n*(t/=r)*t*((i+1)*t-i)+e},BackEaseOut:function(t,e,n,r){var i=1.70158;return n*((t=t/r-1)*t*((i+1)*t+i)+1)+e},BackEaseInOut:function(t,e,n,r){var i=1.70158;return(t/=r/2)<1?n/2*(t*t*((1+(i*=1.525))*t-i))+e:n/2*((t-=2)*t*((1+(i*=1.525))*t+i)+2)+e},ElasticEaseIn:function(t,e,n,r,i,o){var a=0;return 0===t?e:1==(t/=r)?e+n:(o||(o=.3*r),!i||i<Math.abs(n)?(i=n,a=o/4):a=o/(2*Math.PI)*Math.asin(n/i),-i*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/o)+e)},ElasticEaseOut:function(t,e,n,r,i,o){var a=0;return 0===t?e:1==(t/=r)?e+n:(o||(o=.3*r),!i||i<Math.abs(n)?(i=n,a=o/4):a=o/(2*Math.PI)*Math.asin(n/i),i*Math.pow(2,-10*t)*Math.sin((t*r-a)*(2*Math.PI)/o)+n+e)},ElasticEaseInOut:function(t,e,n,r,i,o){var a=0;return 0===t?e:2==(t/=r/2)?e+n:(o||(o=r*(.3*1.5)),!i||i<Math.abs(n)?(i=n,a=o/4):a=o/(2*Math.PI)*Math.asin(n/i),t<1?i*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/o)*-.5+e:i*Math.pow(2,-10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/o)*.5+n+e)},BounceEaseOut:function(t,e,n,r){return(t/=r)<1/2.75?n*(7.5625*t*t)+e:t<2/2.75?n*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?n*(7.5625*(t-=2.25/2.75)*t+.9375)+e:n*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,n,r,i){return r-e.Easings.BounceEaseOut(i-t,0,r,i)+n},BounceEaseInOut:function(t,n,r,i){return t<i/2?.5*e.Easings.BounceEaseIn(2*t,0,r,i)+n:.5*e.Easings.BounceEaseOut(2*t-i,0,r,i)+.5*r+n},EaseIn:function(t,e,n,r){return n*(t/=r)*t+e},EaseOut:function(t,e,n,r){return-n*(t/=r)*(t-2)+e},EaseInOut:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,n,r){return n*(t/=r)*t*t*t*t+e},StrongEaseOut:function(t,e,n,r){return n*((t=t/r-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t*t*t*t+e:n/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,n,r){return n*t/r+e}}},8588:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4417),i=function(){function t(){}return t.toCollection=function(e){var n,r=new t,i=e.length;for(n=0;n<i;n++)r.push(e[n]);return r},t._mapMethod=function(e){t.prototype[e]=function(){var t,n=this.length,r=[].slice.call(arguments);for(t=0;t<n;t++)this[t][e].apply(this[t],r);return this}},t.mapMethods=function(e){var n=e.prototype;for(var r in n)t._mapMethod(r)},t}();e.Collection=i,i.prototype=[],i.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},i.prototype.toArray=function(){var t,e=[],n=this.length;for(t=0;t<n;t++)e.push(this[t]);return e};var o=function(){function t(t){void 0===t&&(t=[1,0,0,1,0,0]),this.dirty=!1,this.m=t&&t.slice()||[1,0,0,1,0,0]}return t.prototype.reset=function(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0},t.prototype.copy=function(){return new t(this.m)},t.prototype.copyInto=function(t){t.m[0]=this.m[0],t.m[1]=this.m[1],t.m[2]=this.m[2],t.m[3]=this.m[3],t.m[4]=this.m[4],t.m[5]=this.m[5]},t.prototype.point=function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},t.prototype.translate=function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},t.prototype.scale=function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),r=this.m[0]*e+this.m[2]*n,i=this.m[1]*e+this.m[3]*n,o=this.m[0]*-n+this.m[2]*e,a=this.m[1]*-n+this.m[3]*e;return this.m[0]=r,this.m[1]=i,this.m[2]=o,this.m[3]=a,this},t.prototype.getTranslation=function(){return{x:this.m[4],y:this.m[5]}},t.prototype.skew=function(t,e){var n=this.m[0]+this.m[2]*e,r=this.m[1]+this.m[3]*e,i=this.m[2]+this.m[0]*t,o=this.m[3]+this.m[1]*t;return this.m[0]=n,this.m[1]=r,this.m[2]=i,this.m[3]=o,this},t.prototype.multiply=function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],n=this.m[1]*t.m[0]+this.m[3]*t.m[1],r=this.m[0]*t.m[2]+this.m[2]*t.m[3],i=this.m[1]*t.m[2]+this.m[3]*t.m[3],o=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],a=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=n,this.m[2]=r,this.m[3]=i,this.m[4]=o,this.m[5]=a,this},t.prototype.invert=function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,n=-this.m[1]*t,r=-this.m[2]*t,i=this.m[0]*t,o=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),a=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=n,this.m[2]=r,this.m[3]=i,this.m[4]=o,this.m[5]=a,this},t.prototype.getMatrix=function(){return this.m},t.prototype.setAbsolutePosition=function(t,e){var n=this.m[0],r=this.m[1],i=this.m[2],o=this.m[3],a=this.m[4],s=(n*(e-this.m[5])-r*(t-a))/(n*o-r*i),l=(t-a-i*s)/n;return this.translate(l,s)},t.prototype.decompose=function(){var t=this.m[0],n=this.m[1],r=this.m[2],i=this.m[3],o=t*i-n*r,a={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=t||0!=n){var s=Math.sqrt(t*t+n*n);a.rotation=n>0?Math.acos(t/s):-Math.acos(t/s),a.scaleX=s,a.scaleY=o/s,a.skewX=(t*r+n*i)/o,a.skewY=0}else if(0!=r||0!=i){var l=Math.sqrt(r*r+i*i);a.rotation=Math.PI/2-(i>0?Math.acos(-r/l):-Math.acos(r/l)),a.scaleX=o/l,a.scaleY=l,a.skewX=0,a.skewY=(t*r+n*i)/o}return a.rotation=e.Util._getRotation(a.rotation),a},t}();e.Transform=o;var a=Math.PI/180,s=180/Math.PI,l="Konva error: ",c={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},u=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,h=[];e.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isPlainObject:function(t){return!!t&&t.constructor===Object},_isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t)},_isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},_isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},isObject:function(t){return t instanceof Object},isValidSelector:function(t){if("string"!=typeof t)return!1;var e=t[0];return"#"===e||"."===e||e===e.toUpperCase()},_sign:function(t){return 0===t?0:t>0?1:-1},requestAnimFrame:function(t){h.push(t),1===h.length&&requestAnimationFrame((function(){var t=h;h=[],t.forEach((function(t){t()}))}))},createCanvasElement:function(){var t=document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},createImageElement:function(){return document.createElement("img")},_isInDocument:function(t){for(;t=t.parentNode;)if(t==document)return!0;return!1},_simplifyArray:function(t){var n,r,i=[],o=t.length,a=e.Util;for(n=0;n<o;n++)r=t[n],a._isNumber(r)?r=Math.round(1e3*r)/1e3:a._isString(r)||(r=r.toString()),i.push(r);return i},_urlToImage:function(t,e){var n=new r.glob.Image;n.onload=function(){e(n)},n.src=t},_rgbToHex:function(t,e,n){return((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in c?{r:(e=c[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=u.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(t){return t=t||"black",e.Util._namedColorToRBA(t)||e.Util._hex3ColorToRGBA(t)||e.Util._hex6ColorToRGBA(t)||e.Util._rgbColorToRGBA(t)||e.Util._rgbaColorToRGBA(t)||e.Util._hslColorToRGBA(t)},_namedColorToRBA:function(t){var e=c[t.toLowerCase()];return e?{r:e[0],g:e[1],b:e[2],a:1}:null},_rgbColorToRGBA:function(t){if(0===t.indexOf("rgb(")){var e=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:1}}},_rgbaColorToRGBA:function(t){if(0===t.indexOf("rgba(")){var e=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:e[3]}}},_hex6ColorToRGBA:function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_hslColorToRGBA:function(t){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(t)){var e,n=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t),r=(n[0],n.slice(1)),i=Number(r[0])/360,o=Number(r[1])/100,a=Number(r[2])/100,s=void 0,l=void 0;if(0===o)return l=255*a,{r:Math.round(l),g:Math.round(l),b:Math.round(l),a:1};for(var c=2*a-(e=a<.5?a*(1+o):a+o-a*o),u=[0,0,0],h=0;h<3;h++)(s=i+1/3*-(h-1))<0&&s++,s>1&&s--,l=6*s<1?c+6*(e-c)*s:2*s<1?e:3*s<2?c+(e-c)*(2/3-s)*6:c,u[h]=255*l;return{r:Math.round(u[0]),g:Math.round(u[1]),b:Math.round(u[2]),a:1}}},haveIntersection:function(t,e){return!(e.x>t.x+t.width||e.x+e.width<t.x||e.y>t.y+t.height||e.y+e.height<t.y)},cloneObject:function(t){var e={};for(var n in t)this._isPlainObject(t[n])?e[n]=this.cloneObject(t[n]):this._isArray(t[n])?e[n]=this.cloneArray(t[n]):e[n]=t[n];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(t){return t*a},_radToDeg:function(t){return t*s},_getRotation:function(t){return r.Konva.angleDeg?e.Util._radToDeg(t):t},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},throw:function(t){throw new Error(l+t)},error:function(t){console.error(l+t)},warn:function(t){r.Konva.showWarnings&&console.warn("Konva warning: "+t)},extend:function(t,e){function n(){this.constructor=t}n.prototype=e.prototype;var r=t.prototype;for(var i in t.prototype=new n,r)r.hasOwnProperty(i)&&(t.prototype[i]=r[i]);t.__super__=e.prototype,t.super=e},_getControlPoints:function(t,e,n,r,i,o,a){var s=Math.sqrt(Math.pow(n-t,2)+Math.pow(r-e,2)),l=Math.sqrt(Math.pow(i-n,2)+Math.pow(o-r,2)),c=a*s/(s+l),u=a*l/(s+l);return[n-c*(i-t),r-c*(o-e),n+u*(i-t),r+u*(o-e)]},_expandPoints:function(t,n){var r,i,o=t.length,a=[];for(r=2;r<o-2;r+=2)i=e.Util._getControlPoints(t[r-2],t[r-1],t[r],t[r+1],t[r+2],t[r+3],n),a.push(i[0]),a.push(i[1]),a.push(t[r]),a.push(t[r+1]),a.push(i[2]),a.push(i[3]);return a},each:function(t,e){for(var n in t)e(n,t[n])},_inRange:function(t,e,n){return e<=t&&t<n},_getProjectionToSegment:function(t,e,n,r,i,o){var a,s,l,c=(t-n)*(t-n)+(e-r)*(e-r);if(0==c)a=t,s=e,l=(i-n)*(i-n)+(o-r)*(o-r);else{var u=((i-t)*(n-t)+(o-e)*(r-e))/c;u<0?(a=t,s=e,l=(t-i)*(t-i)+(e-o)*(e-o)):u>1?(a=n,s=r,l=(n-i)*(n-i)+(r-o)*(r-o)):l=((a=t+u*(n-t))-i)*(a-i)+((s=e+u*(r-e))-o)*(s-o)}return[a,s,l]},_getProjectionToLine:function(t,n,r){var i=e.Util.cloneObject(t),o=Number.MAX_VALUE;return n.forEach((function(a,s){if(r||s!==n.length-1){var l=n[(s+1)%n.length],c=e.Util._getProjectionToSegment(a.x,a.y,l.x,l.y,t.x,t.y),u=c[0],h=c[1],d=c[2];d<o&&(i.x=u,i.y=h,o=d)}})),i},_prepareArrayForTween:function(t,n,r){var i,o=[],a=[];if(t.length>n.length){var s=n;n=t,t=s}for(i=0;i<t.length;i+=2)o.push({x:t[i],y:t[i+1]});for(i=0;i<n.length;i+=2)a.push({x:n[i],y:n[i+1]});var l=[];return a.forEach((function(t){var n=e.Util._getProjectionToLine(t,o,r);l.push(n.x),l.push(n.y)})),l},_prepareToStringify:function(t){var n;for(var r in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(r)&&t[r]&&"object"==typeof t[r])if(n=Object.getOwnPropertyDescriptor(t,r),t[r].visitedByCircularReferenceRemoval||e.Util._isElement(t[r])){if(!n.configurable)return null;delete t[r]}else if(null===e.Util._prepareToStringify(t[r])){if(!n.configurable)return null;delete t[r]}return delete t.visitedByCircularReferenceRemoval,t},_assign:function(t,e){for(var n in e)t[n]=e[n];return t},_getFirstPointerId:function(t){return t.touches?t.changedTouches[0].identifier:999}}},3774:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4417),i=n(8588);function o(t){return i.Util._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)||i.Util._isBoolean(t)?t:Object.prototype.toString.call(t)}e.RGBComponent=function(t){return t>255?255:t<0?0:Math.round(t)},e.alphaComponent=function(t){return t>1?1:t<1e-4?1e-4:t},e.getNumberValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isNumber(t)||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a number.'),t}},e.getNumberOrArrayOfNumbersValidator=function(t){if(r.Konva.isUnminified)return function(e,n){var r=i.Util._isNumber(e),a=i.Util._isArray(e)&&e.length==t;return r||a||i.Util.warn(o(e)+' is a not valid value for "'+n+'" attribute. The value should be a number or Array<number>('+t+")"),e}},e.getNumberOrAutoValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isNumber(t)||"auto"===t||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or "auto".'),t}},e.getStringValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isString(t)||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a string.'),t}},e.getStringOrGradientValidator=function(){if(r.Konva.isUnminified)return function(t,e){var n=i.Util._isString(t),r="[object CanvasGradient]"===Object.prototype.toString.call(t);return n||r||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a string or a native gradient.'),t}},e.getFunctionValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isFunction(t)||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a function.'),t}},e.getNumberArrayValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isArray(t)?t.forEach((function(t){i.Util._isNumber(t)||i.Util.warn('"'+e+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")})):i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a array of numbers.'),t}},e.getBooleanValidator=function(){if(r.Konva.isUnminified)return function(t,e){return!0===t||!1===t||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a boolean.'),t}},e.getComponentValidator=function(t){if(r.Konva.isUnminified)return function(e,n){return i.Util.isObject(e)||i.Util.warn(o(e)+' is a not valid value for "'+n+'" attribute. The value should be an object with properties '+t),e}}},3986:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4417),i=n(8588),o=n(7939),a=n(8783),s=n(8342),l=n(4415),c=n(3980),u=n(8985),h=n(210),d=n(7955),f=n(6745),p=n(8017),g=n(3442),y=n(4842);e.Konva=i.Util._assign(r.Konva,{Collection:i.Collection,Util:i.Util,Transform:i.Transform,Node:o.Node,ids:o.ids,names:o.names,Container:a.Container,Stage:s.Stage,stages:s.stages,Layer:l.Layer,FastLayer:c.FastLayer,Group:u.Group,DD:h.DD,Shape:d.Shape,shapes:d.shapes,Animation:f.Animation,Tween:p.Tween,Easings:p.Easings,Context:g.Context,Canvas:y.Canvas})},2076:(t,e,n)=>{"use strict";var r=n(3986),i=n(119),o=n(2064),a=n(7643),s=n(535),l=n(8006),c=n(6067),u=n(7149),h=n(7339),d=n(5244),f=n(1785),p=n(657),g=n(8986),y=n(1964),v=n(3787),m=n(2831),b=n(9516),_=n(9846),C=n(2527),w=n(6672),S=n(5309),x=n(1695),k=n(9621),P=n(1179),T=n(7194),E=n(3925),F=n(5751),A=n(6588),M=n(3565),O=n(5929),N=n(7233),D=n(8590),L=n(8280),R=n(3438),I=n(6703),z=n(1665),U=n(1863);e.S=r.Konva.Util._assign(r.Konva,{Arc:i.Arc,Arrow:o.Arrow,Circle:a.Circle,Ellipse:s.Ellipse,Image:l.Image,Label:c.Label,Tag:c.Tag,Line:u.Line,Path:h.Path,Rect:d.Rect,RegularPolygon:f.RegularPolygon,Ring:p.Ring,Sprite:g.Sprite,Star:y.Star,Text:v.Text,TextPath:m.TextPath,Transformer:b.Transformer,Wedge:_.Wedge,Filters:{Blur:C.Blur,Brighten:w.Brighten,Contrast:S.Contrast,Emboss:x.Emboss,Enhance:k.Enhance,Grayscale:P.Grayscale,HSL:T.HSL,HSV:E.HSV,Invert:F.Invert,Kaleidoscope:A.Kaleidoscope,Mask:M.Mask,Noise:O.Noise,Pixelate:N.Pixelate,Posterize:D.Posterize,RGB:L.RGB,RGBA:R.RGBA,Sepia:I.Sepia,Solarize:z.Solarize,Threshold:U.Threshold}})},2527:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);function a(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var s=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],l=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];e.Blur=function(t){var e=Math.round(this.blurRadius());e>0&&function(t,e){var n,r,i,o,c,u,h,d,f,p,g,y,v,m,b,_,C,w,S,x,k,P,T,E,F=t.data,A=t.width,M=t.height,O=e+e+1,N=A-1,D=M-1,L=e+1,R=L*(L+1)/2,I=new a,z=null,U=I,G=null,B=null,H=s[e],j=l[e];for(i=1;i<O;i++)U=U.next=new a,i===L&&(z=U);for(U.next=I,h=u=0,r=0;r<M;r++){for(_=C=w=S=d=f=p=g=0,y=L*(x=F[u]),v=L*(k=F[u+1]),m=L*(P=F[u+2]),b=L*(T=F[u+3]),d+=R*x,f+=R*k,p+=R*P,g+=R*T,U=I,i=0;i<L;i++)U.r=x,U.g=k,U.b=P,U.a=T,U=U.next;for(i=1;i<L;i++)o=u+((N<i?N:i)<<2),d+=(U.r=x=F[o])*(E=L-i),f+=(U.g=k=F[o+1])*E,p+=(U.b=P=F[o+2])*E,g+=(U.a=T=F[o+3])*E,_+=x,C+=k,w+=P,S+=T,U=U.next;for(G=I,B=z,n=0;n<A;n++)F[u+3]=T=g*H>>j,0!==T?(T=255/T,F[u]=(d*H>>j)*T,F[u+1]=(f*H>>j)*T,F[u+2]=(p*H>>j)*T):F[u]=F[u+1]=F[u+2]=0,d-=y,f-=v,p-=m,g-=b,y-=G.r,v-=G.g,m-=G.b,b-=G.a,o=h+((o=n+e+1)<N?o:N)<<2,d+=_+=G.r=F[o],f+=C+=G.g=F[o+1],p+=w+=G.b=F[o+2],g+=S+=G.a=F[o+3],G=G.next,y+=x=B.r,v+=k=B.g,m+=P=B.b,b+=T=B.a,_-=x,C-=k,w-=P,S-=T,B=B.next,u+=4;h+=A}for(n=0;n<A;n++){for(C=w=S=_=f=p=g=d=0,y=L*(x=F[u=n<<2]),v=L*(k=F[u+1]),m=L*(P=F[u+2]),b=L*(T=F[u+3]),d+=R*x,f+=R*k,p+=R*P,g+=R*T,U=I,i=0;i<L;i++)U.r=x,U.g=k,U.b=P,U.a=T,U=U.next;for(c=A,i=1;i<=e;i++)u=c+n<<2,d+=(U.r=x=F[u])*(E=L-i),f+=(U.g=k=F[u+1])*E,p+=(U.b=P=F[u+2])*E,g+=(U.a=T=F[u+3])*E,_+=x,C+=k,w+=P,S+=T,U=U.next,i<D&&(c+=A);for(u=n,G=I,B=z,r=0;r<M;r++)F[3+(o=u<<2)]=T=g*H>>j,T>0?(T=255/T,F[o]=(d*H>>j)*T,F[o+1]=(f*H>>j)*T,F[o+2]=(p*H>>j)*T):F[o]=F[o+1]=F[o+2]=0,d-=y,f-=v,p-=m,g-=b,y-=G.r,v-=G.g,m-=G.b,b-=G.a,o=n+((o=r+L)<D?o:D)*A<<2,d+=_+=G.r=F[o],f+=C+=G.g=F[o+1],p+=w+=G.b=F[o+2],g+=S+=G.a=F[o+3],G=G.next,y+=x=B.r,v+=k=B.g,m+=P=B.b,b+=T=B.a,_-=x,C-=k,w-=P,S-=T,B=B.next,u+=A}}(t,e)},r.Factory.addGetterSetter(i.Node,"blurRadius",0,o.getNumberValidator(),r.Factory.afterSetFilter)},6672:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.Brighten=function(t){var e,n=255*this.brightness(),r=t.data,i=r.length;for(e=0;e<i;e+=4)r[e]+=n,r[e+1]+=n,r[e+2]+=n},r.Factory.addGetterSetter(i.Node,"brightness",0,o.getNumberValidator(),r.Factory.afterSetFilter)},5309:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.Contrast=function(t){var e,n=Math.pow((this.contrast()+100)/100,2),r=t.data,i=r.length,o=150,a=150,s=150;for(e=0;e<i;e+=4)o=r[e],a=r[e+1],s=r[e+2],o/=255,o-=.5,o*=n,o+=.5,a/=255,a-=.5,a*=n,a+=.5,s/=255,s-=.5,s*=n,s+=.5,o=(o*=255)<0?0:o>255?255:o,a=(a*=255)<0?0:a>255?255:a,s=(s*=255)<0?0:s>255?255:s,r[e]=o,r[e+1]=a,r[e+2]=s},r.Factory.addGetterSetter(i.Node,"contrast",0,o.getNumberValidator(),r.Factory.afterSetFilter)},1695:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(8588),a=n(3774);e.Emboss=function(t){var e=10*this.embossStrength(),n=255*this.embossWhiteLevel(),r=this.embossDirection(),i=this.embossBlend(),a=0,s=0,l=t.data,c=t.width,u=t.height,h=4*c,d=u;switch(r){case"top-left":a=-1,s=-1;break;case"top":a=-1,s=0;break;case"top-right":a=-1,s=1;break;case"right":a=0,s=1;break;case"bottom-right":a=1,s=1;break;case"bottom":a=1,s=0;break;case"bottom-left":a=1,s=-1;break;case"left":a=0,s=-1;break;default:o.Util.error("Unknown emboss direction: "+r)}do{var f=(d-1)*h,p=a;d+p<1&&(p=0),d+p>u&&(p=0);var g=(d-1+p)*c*4,y=c;do{var v=f+4*(y-1),m=s;y+m<1&&(m=0),y+m>c&&(m=0);var b=g+4*(y-1+m),_=l[v]-l[b],C=l[v+1]-l[b+1],w=l[v+2]-l[b+2],S=_,x=S>0?S:-S;if((C>0?C:-C)>x&&(S=C),(w>0?w:-w)>x&&(S=w),S*=e,i){var k=l[v]+S,P=l[v+1]+S,T=l[v+2]+S;l[v]=k>255?255:k<0?0:k,l[v+1]=P>255?255:P<0?0:P,l[v+2]=T>255?255:T<0?0:T}else{var E=n-S;E<0?E=0:E>255&&(E=255),l[v]=l[v+1]=l[v+2]=E}}while(--y)}while(--d)},r.Factory.addGetterSetter(i.Node,"embossStrength",.5,a.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"embossWhiteLevel",.5,a.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"embossDirection","top-left",null,r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"embossBlend",!1,null,r.Factory.afterSetFilter)},9621:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);function a(t,e,n,r,i){var o=n-e,a=i-r;return 0===o?r+a/2:0===a?r:a*((t-e)/o)+r}e.Enhance=function(t){var e,n,r,i,o=t.data,s=o.length,l=o[0],c=l,u=o[1],h=u,d=o[2],f=d,p=this.enhance();if(0!==p){for(i=0;i<s;i+=4)(e=o[i+0])<l?l=e:e>c&&(c=e),(n=o[i+1])<u?u=n:n>h&&(h=n),(r=o[i+2])<d?d=r:r>f&&(f=r);var g,y,v,m,b,_,C,w,S;for(c===l&&(c=255,l=0),h===u&&(h=255,u=0),f===d&&(f=255,d=0),p>0?(y=c+p*(255-c),v=l-p*(l-0),b=h+p*(255-h),_=u-p*(u-0),w=f+p*(255-f),S=d-p*(d-0)):(y=c+p*(c-(g=.5*(c+l))),v=l+p*(l-g),b=h+p*(h-(m=.5*(h+u))),_=u+p*(u-m),w=f+p*(f-(C=.5*(f+d))),S=d+p*(d-C)),i=0;i<s;i+=4)o[i+0]=a(o[i+0],l,c,v,y),o[i+1]=a(o[i+1],u,h,_,b),o[i+2]=a(o[i+2],d,f,S,w)}},r.Factory.addGetterSetter(i.Node,"enhance",0,o.getNumberValidator(),r.Factory.afterSetFilter)},1179:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Grayscale=function(t){var e,n,r=t.data,i=r.length;for(e=0;e<i;e+=4)n=.34*r[e]+.5*r[e+1]+.16*r[e+2],r[e]=n,r[e+1]=n,r[e+2]=n}},7194:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);r.Factory.addGetterSetter(i.Node,"hue",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"saturation",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"luminance",0,o.getNumberValidator(),r.Factory.afterSetFilter),e.HSL=function(t){var e,n,r,i,o,a=t.data,s=a.length,l=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,u=127*this.luminance(),h=1*l*Math.cos(c*Math.PI/180),d=1*l*Math.sin(c*Math.PI/180),f=.299+.701*h+.167*d,p=.587-.587*h+.33*d,g=.114-.114*h-.497*d,y=.299-.299*h-.328*d,v=.587+.413*h+.035*d,m=.114-.114*h+.293*d,b=.299-.3*h+1.25*d,_=.587-.586*h-1.05*d,C=.114+.886*h-.2*d;for(e=0;e<s;e+=4)n=a[e+0],r=a[e+1],i=a[e+2],o=a[e+3],a[e+0]=f*n+p*r+g*i+u,a[e+1]=y*n+v*r+m*i+u,a[e+2]=b*n+_*r+C*i+u,a[e+3]=o}},3925:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.HSV=function(t){var e,n,r,i,o,a=t.data,s=a.length,l=Math.pow(2,this.value()),c=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,h=l*c*Math.cos(u*Math.PI/180),d=l*c*Math.sin(u*Math.PI/180),f=.299*l+.701*h+.167*d,p=.587*l-.587*h+.33*d,g=.114*l-.114*h-.497*d,y=.299*l-.299*h-.328*d,v=.587*l+.413*h+.035*d,m=.114*l-.114*h+.293*d,b=.299*l-.3*h+1.25*d,_=.587*l-.586*h-1.05*d,C=.114*l+.886*h-.2*d;for(e=0;e<s;e+=4)n=a[e+0],r=a[e+1],i=a[e+2],o=a[e+3],a[e+0]=f*n+p*r+g*i,a[e+1]=y*n+v*r+m*i,a[e+2]=b*n+_*r+C*i,a[e+3]=o},r.Factory.addGetterSetter(i.Node,"hue",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"saturation",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"value",0,o.getNumberValidator(),r.Factory.afterSetFilter)},5751:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Invert=function(t){var e,n=t.data,r=n.length;for(e=0;e<r;e+=4)n[e]=255-n[e],n[e+1]=255-n[e+1],n[e+2]=255-n[e+2]}},6588:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(8588),a=n(3774);e.Kaleidoscope=function(t){var e,n,r,i,a,s,l,c,u,h=t.width,d=t.height,f=Math.round(this.kaleidoscopePower()),p=Math.round(this.kaleidoscopeAngle()),g=Math.floor(h*(p%360)/360);if(!(f<1)){var y=o.Util.createCanvasElement();y.width=h,y.height=d;var v=y.getContext("2d").getImageData(0,0,h,d);!function(t,e,n){var r,i,o,a,s=t.data,l=e.data,c=t.width,u=t.height,h=n.polarCenterX||c/2,d=n.polarCenterY||u/2,f=0,p=0,g=0,y=0,v=Math.sqrt(h*h+d*d);i=c-h,o=u-d,v=(a=Math.sqrt(i*i+o*o))>v?a:v;var m,b,_,C,w=u,S=c,x=360/S*Math.PI/180;for(b=0;b<S;b+=1)for(_=Math.sin(b*x),C=Math.cos(b*x),m=0;m<w;m+=1)i=Math.floor(h+v*m/w*C),f=s[0+(r=4*((o=Math.floor(d+v*m/w*_))*c+i))],p=s[r+1],g=s[r+2],y=s[r+3],l[0+(r=4*(b+m*c))]=f,l[r+1]=p,l[r+2]=g,l[r+3]=y}(t,v,{polarCenterX:h/2,polarCenterY:d/2});for(var m=h/Math.pow(2,f);m<=8;)m*=2,f-=1;var b=m=Math.ceil(m),_=0,C=b,w=1;for(g+m>h&&(_=b,C=0,w=-1),n=0;n<d;n+=1)for(e=_;e!==C;e+=w)c=4*(h*n+Math.round(e+g)%h),i=v.data[c+0],a=v.data[c+1],s=v.data[c+2],l=v.data[c+3],u=4*(h*n+e),v.data[u+0]=i,v.data[u+1]=a,v.data[u+2]=s,v.data[u+3]=l;for(n=0;n<d;n+=1)for(b=Math.floor(m),r=0;r<f;r+=1){for(e=0;e<b+1;e+=1)c=4*(h*n+e),i=v.data[c+0],a=v.data[c+1],s=v.data[c+2],l=v.data[c+3],u=4*(h*n+2*b-e-1),v.data[u+0]=i,v.data[u+1]=a,v.data[u+2]=s,v.data[u+3]=l;b*=2}!function(t,e,n){var r,i,o,a,s,l,c=t.data,u=e.data,h=t.width,d=t.height,f=n.polarCenterX||h/2,p=n.polarCenterY||d/2,g=0,y=0,v=0,m=0,b=Math.sqrt(f*f+p*p);i=h-f,o=d-p,b=(l=Math.sqrt(i*i+o*o))>b?l:b;var _,C,w,S=d,x=h,k=n.polarRotation||0;for(i=0;i<h;i+=1)for(o=0;o<d;o+=1)a=i-f,s=o-p,_=Math.sqrt(a*a+s*s)*S/b,C=(C=(180*Math.atan2(s,a)/Math.PI+360+k)%360)*x/360,w=Math.floor(C),g=c[0+(r=4*(Math.floor(_)*h+w))],y=c[r+1],v=c[r+2],m=c[r+3],u[0+(r=4*(o*h+i))]=g,u[r+1]=y,u[r+2]=v,u[r+3]=m}(v,t,{polarRotation:0})}},r.Factory.addGetterSetter(i.Node,"kaleidoscopePower",2,a.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"kaleidoscopeAngle",0,a.getNumberValidator(),r.Factory.afterSetFilter)},3565:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);function a(t,e,n){var r=4*(n*t.width+e),i=[];return i.push(t.data[r++],t.data[r++],t.data[r++],t.data[r++]),i}function s(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}e.Mask=function(t){var e=function(t,e){var n=a(t,0,0),r=a(t,t.width-1,0),i=a(t,0,t.height-1),o=a(t,t.width-1,t.height-1),l=e||10;if(s(n,r)<l&&s(r,o)<l&&s(o,i)<l&&s(i,n)<l){for(var c=function(t){for(var e=[0,0,0],n=0;n<t.length;n++)e[0]+=t[n][0],e[1]+=t[n][1],e[2]+=t[n][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,n,o,i]),u=[],h=0;h<t.width*t.height;h++){var d=s(c,[t.data[4*h],t.data[4*h+1],t.data[4*h+2]]);u[h]=d<l?0:255}return u}}(t,this.threshold());return e&&function(t,e){for(var n=0;n<t.width*t.height;n++)t.data[4*n+3]=e[n]}(t,e=function(t,e,n){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],i=Math.round(Math.sqrt(r.length)),o=Math.floor(i/2),a=[],s=0;s<n;s++)for(var l=0;l<e;l++){for(var c=s*e+l,u=0,h=0;h<i;h++)for(var d=0;d<i;d++){var f=s+h-o,p=l+d-o;if(f>=0&&f<n&&p>=0&&p<e){var g=r[h*i+d];u+=t[f*e+p]*g}}a[c]=u}return a}(e=function(t,e,n){for(var r=[1,1,1,1,1,1,1,1,1],i=Math.round(Math.sqrt(r.length)),o=Math.floor(i/2),a=[],s=0;s<n;s++)for(var l=0;l<e;l++){for(var c=s*e+l,u=0,h=0;h<i;h++)for(var d=0;d<i;d++){var f=s+h-o,p=l+d-o;if(f>=0&&f<n&&p>=0&&p<e){var g=r[h*i+d];u+=t[f*e+p]*g}}a[c]=u>=1020?255:0}return a}(e=function(t,e,n){for(var r=[1,1,1,1,0,1,1,1,1],i=Math.round(Math.sqrt(r.length)),o=Math.floor(i/2),a=[],s=0;s<n;s++)for(var l=0;l<e;l++){for(var c=s*e+l,u=0,h=0;h<i;h++)for(var d=0;d<i;d++){var f=s+h-o,p=l+d-o;if(f>=0&&f<n&&p>=0&&p<e){var g=r[h*i+d];u+=t[f*e+p]*g}}a[c]=2040===u?255:0}return a}(e,t.width,t.height),t.width,t.height),t.width,t.height)),t},r.Factory.addGetterSetter(i.Node,"threshold",0,o.getNumberValidator(),r.Factory.afterSetFilter)},5929:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.Noise=function(t){var e,n=255*this.noise(),r=t.data,i=r.length,o=n/2;for(e=0;e<i;e+=4)r[e+0]+=o-2*o*Math.random(),r[e+1]+=o-2*o*Math.random(),r[e+2]+=o-2*o*Math.random()},r.Factory.addGetterSetter(i.Node,"noise",.2,o.getNumberValidator(),r.Factory.afterSetFilter)},7233:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(8588),o=n(7939),a=n(3774);e.Pixelate=function(t){var e,n,r,o,a,s,l,c,u,h,d,f,p,g,y=Math.ceil(this.pixelSize()),v=t.width,m=t.height,b=Math.ceil(v/y),_=Math.ceil(m/y),C=t.data;if(y<=0)i.Util.error("pixelSize value can not be <= 0");else for(f=0;f<b;f+=1)for(p=0;p<_;p+=1){for(o=0,a=0,s=0,l=0,u=(c=f*y)+y,d=(h=p*y)+y,g=0,e=c;e<u;e+=1)if(!(e>=v))for(n=h;n<d;n+=1)n>=m||(o+=C[0+(r=4*(v*n+e))],a+=C[r+1],s+=C[r+2],l+=C[r+3],g+=1);for(o/=g,a/=g,s/=g,l/=g,e=c;e<u;e+=1)if(!(e>=v))for(n=h;n<d;n+=1)n>=m||(C[0+(r=4*(v*n+e))]=o,C[r+1]=a,C[r+2]=s,C[r+3]=l)}},r.Factory.addGetterSetter(o.Node,"pixelSize",8,a.getNumberValidator(),r.Factory.afterSetFilter)},8590:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.Posterize=function(t){var e,n=Math.round(254*this.levels())+1,r=t.data,i=r.length,o=255/n;for(e=0;e<i;e+=1)r[e]=Math.floor(r[e]/o)*o},r.Factory.addGetterSetter(i.Node,"levels",.5,o.getNumberValidator(),r.Factory.afterSetFilter)},8280:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.RGB=function(t){var e,n,r=t.data,i=r.length,o=this.red(),a=this.green(),s=this.blue();for(e=0;e<i;e+=4)n=(.34*r[e]+.5*r[e+1]+.16*r[e+2])/255,r[e]=n*o,r[e+1]=n*a,r[e+2]=n*s,r[e+3]=r[e+3]},r.Factory.addGetterSetter(i.Node,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"blue",0,o.RGBComponent,r.Factory.afterSetFilter)},3438:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.RGBA=function(t){var e,n,r=t.data,i=r.length,o=this.red(),a=this.green(),s=this.blue(),l=this.alpha();for(e=0;e<i;e+=4)n=1-l,r[e]=o*l+r[e]*n,r[e+1]=a*l+r[e+1]*n,r[e+2]=s*l+r[e+2]*n},r.Factory.addGetterSetter(i.Node,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"blue",0,o.RGBComponent,r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"alpha",1,(function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t}))},6703:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sepia=function(t){var e,n,r,i,o=t.data,a=o.length;for(e=0;e<a;e+=4)n=o[e+0],r=o[e+1],i=o[e+2],o[e+0]=Math.min(255,.393*n+.769*r+.189*i),o[e+1]=Math.min(255,.349*n+.686*r+.168*i),o[e+2]=Math.min(255,.272*n+.534*r+.131*i)}},1665:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Solarize=function(t){var e=t.data,n=t.width,r=4*n,i=t.height;do{var o=(i-1)*r,a=n;do{var s=o+4*(a-1),l=e[s],c=e[s+1],u=e[s+2];l>127&&(l=255-l),c>127&&(c=255-c),u>127&&(u=255-u),e[s]=l,e[s+1]=c,e[s+2]=u}while(--a)}while(--i)}},1863:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1455),i=n(7939),o=n(3774);e.Threshold=function(t){var e,n=255*this.threshold(),r=t.data,i=r.length;for(e=0;e<i;e+=1)r[e]=r[e]<n?0:255},r.Factory.addGetterSetter(i.Node,"threshold",.5,o.getNumberValidator(),r.Factory.afterSetFilter)},185:(t,e,n)=>{var r=n(2076).S;r._injectGlobal(r),e.default=r,t.exports=e.default},119:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(4417),c=n(3774),u=n(4417),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=l.Konva.getAngle(this.angle()),n=this.clockwise();t.beginPath(),t.arc(0,0,this.outerRadius(),0,e,n),t.arc(0,0,this.innerRadius(),e,0,!n),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Arc=h,h.prototype._centroid=!0,h.prototype.className="Arc",h.prototype._attrsAffectingSize=["innerRadius","outerRadius"],u._registerNode(h),a.Factory.addGetterSetter(h,"innerRadius",0,c.getNumberValidator()),a.Factory.addGetterSetter(h,"outerRadius",0,c.getNumberValidator()),a.Factory.addGetterSetter(h,"angle",0,c.getNumberValidator()),a.Factory.addGetterSetter(h,"clockwise",!1,c.getBooleanValidator()),o.Collection.mapMethods(h)},2064:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7149),l=n(3774),c=n(4417),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(e){t.prototype._sceneFunc.call(this,e);var n=2*Math.PI,r=this.points(),i=r,o=0!==this.tension()&&r.length>4;o&&(i=this.getTensionPoints());var a,s,l=r.length;o?(a=r[l-2]-(i[i.length-2]+i[i.length-4])/2,s=r[l-1]-(i[i.length-1]+i[i.length-3])/2):(a=r[l-2]-r[l-4],s=r[l-1]-r[l-3]);var c=(Math.atan2(s,a)+n)%n,u=this.pointerLength(),h=this.pointerWidth();e.save(),e.beginPath(),e.translate(r[l-2],r[l-1]),e.rotate(c),e.moveTo(0,0),e.lineTo(-u,h/2),e.lineTo(-u,-h/2),e.closePath(),e.restore(),this.pointerAtBeginning()&&(e.save(),e.translate(r[0],r[1]),o?(a=(i[0]+i[2])/2-r[0],s=(i[1]+i[3])/2-r[1]):(a=r[2]-r[0],s=r[3]-r[1]),e.rotate((Math.atan2(-s,-a)+n)%n),e.moveTo(0,0),e.lineTo(-u,h/2),e.lineTo(-u,-h/2),e.closePath(),e.restore());var d=this.dashEnabled();d&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),d&&(this.attrs.dashEnabled=!0)},e.prototype.getSelfRect=function(){var e=t.prototype.getSelfRect.call(this),n=this.pointerWidth()/2;return{x:e.x-n,y:e.y-n,width:e.width+2*n,height:e.height+2*n}},e}(s.Line);e.Arrow=u,u.prototype.className="Arrow",c._registerNode(u),a.Factory.addGetterSetter(u,"pointerLength",10,l.getNumberValidator()),a.Factory.addGetterSetter(u,"pointerWidth",10,l.getNumberValidator()),a.Factory.addGetterSetter(u,"pointerAtBeginning",!1),o.Collection.mapMethods(u)},7643:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(3774),c=n(4417),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius()!==t/2&&this.radius(t/2)},e.prototype.setHeight=function(t){this.radius()!==t/2&&this.radius(t/2)},e}(s.Shape);e.Circle=u,u.prototype._centroid=!0,u.prototype.className="Circle",u.prototype._attrsAffectingSize=["radius"],c._registerNode(u),a.Factory.addGetterSetter(u,"radius",0,l.getNumberValidator()),o.Collection.mapMethods(u)},535:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(3774),c=n(4417),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.radiusX(),n=this.radiusY();t.beginPath(),t.save(),e!==n&&t.scale(1,n/e),t.arc(0,0,e,0,2*Math.PI,!1),t.restore(),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radiusX()},e.prototype.getHeight=function(){return 2*this.radiusY()},e.prototype.setWidth=function(t){this.radiusX(t/2)},e.prototype.setHeight=function(t){this.radiusY(t/2)},e}(s.Shape);e.Ellipse=u,u.prototype.className="Ellipse",u.prototype._centroid=!0,u.prototype._attrsAffectingSize=["radiusX","radiusY"],c._registerNode(u),a.Factory.addComponentsGetterSetter(u,"radius",["x","y"]),a.Factory.addGetterSetter(u,"radiusX",0,l.getNumberValidator()),a.Factory.addGetterSetter(u,"radiusY",0,l.getNumberValidator()),o.Collection.mapMethods(u)},8006:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(3774),c=n(4417),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._useBufferCanvas=function(){return t.prototype._useBufferCanvas.call(this,!0)},e.prototype._sceneFunc=function(t){var e,n=this.getWidth(),r=this.getHeight(),i=this.attrs.image;if(i){var o=this.attrs.cropWidth,a=this.attrs.cropHeight;e=o&&a?[i,this.cropX(),this.cropY(),o,a,0,0,n,r]:[i,0,0,n,r]}(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,n,r),t.closePath(),t.fillStrokeShape(this)),i&&t.drawImage.apply(t,e)},e.prototype._hitFunc=function(t){var e=this.width(),n=this.height();t.beginPath(),t.rect(0,0,e,n),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){var t,e;return null!==(t=this.attrs.width)&&void 0!==t?t:(null===(e=this.image())||void 0===e?void 0:e.width)||0},e.prototype.getHeight=function(){var t,e;return null!==(t=this.attrs.height)&&void 0!==t?t:(null===(e=this.image())||void 0===e?void 0:e.height)||0},e.fromURL=function(t,n){var r=o.Util.createImageElement();r.onload=function(){var t=new e({image:r});n(t)},r.crossOrigin="Anonymous",r.src=t},e}(s.Shape);e.Image=u,u.prototype.className="Image",c._registerNode(u),a.Factory.addGetterSetter(u,"image"),a.Factory.addComponentsGetterSetter(u,"crop",["x","y","width","height"]),a.Factory.addGetterSetter(u,"cropX",0,l.getNumberValidator()),a.Factory.addGetterSetter(u,"cropY",0,l.getNumberValidator()),a.Factory.addGetterSetter(u,"cropWidth",0,l.getNumberValidator()),a.Factory.addGetterSetter(u,"cropHeight",0,l.getNumberValidator()),o.Collection.mapMethods(u)},6067:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(8985),c=n(3774),u=n(4417),h=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],d="up",f="right",p="down",g="left",y=h.length,v=function(t){function e(e){var n=t.call(this,e)||this;return n.on("add.konva",(function(t){this._addListeners(t.child),this._sync()})),n}return i(e,t),e.prototype.getText=function(){return this.find("Text")[0]},e.prototype.getTag=function(){return this.find("Tag")[0]},e.prototype._addListeners=function(t){var e,n=this,r=function(){n._sync()};for(e=0;e<y;e++)t.on(h[e]+"Change.konva",r)},e.prototype.getWidth=function(){return this.getText().width()},e.prototype.getHeight=function(){return this.getText().height()},e.prototype._sync=function(){var t,e,n,r,i,o,a,s=this.getText(),l=this.getTag();if(s&&l){switch(t=s.width(),e=s.height(),n=l.pointerDirection(),r=l.pointerWidth(),a=l.pointerHeight(),i=0,o=0,n){case d:i=t/2,o=-1*a;break;case f:i=t+r,o=e/2;break;case p:i=t/2,o=e+a;break;case g:i=-1*r,o=e/2}l.setAttrs({x:-1*i,y:-1*o,width:t,height:e}),s.setAttrs({x:-1*i,y:-1*o})}},e}(l.Group);e.Label=v,v.prototype.className="Label",u._registerNode(v),o.Collection.mapMethods(v);var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.width(),n=this.height(),r=this.pointerDirection(),i=this.pointerWidth(),o=this.pointerHeight(),a=this.cornerRadius(),s=0,l=0,c=0,u=0;"number"==typeof a?s=l=c=u=Math.min(a,e/2,n/2):(s=Math.min(a[0]||0,e/2,n/2),l=Math.min(a[1]||0,e/2,n/2),u=Math.min(a[2]||0,e/2,n/2),c=Math.min(a[3]||0,e/2,n/2)),t.beginPath(),t.moveTo(s,0),r===d&&(t.lineTo((e-i)/2,0),t.lineTo(e/2,-1*o),t.lineTo((e+i)/2,0)),t.lineTo(e-l,0),t.arc(e-l,l,l,3*Math.PI/2,0,!1),r===f&&(t.lineTo(e,(n-o)/2),t.lineTo(e+i,n/2),t.lineTo(e,(n+o)/2)),t.lineTo(e,n-u),t.arc(e-u,n-u,u,0,Math.PI/2,!1),r===p&&(t.lineTo((e+i)/2,n),t.lineTo(e/2,n+o),t.lineTo((e-i)/2,n)),t.lineTo(c,n),t.arc(c,n-c,c,Math.PI/2,Math.PI,!1),r===g&&(t.lineTo(0,(n+o)/2),t.lineTo(-1*i,n/2),t.lineTo(0,(n-o)/2)),t.lineTo(0,s),t.arc(s,s,s,Math.PI,3*Math.PI/2,!1),t.closePath(),t.fillStrokeShape(this)},e.prototype.getSelfRect=function(){var t=0,e=0,n=this.pointerWidth(),r=this.pointerHeight(),i=this.pointerDirection(),o=this.width(),a=this.height();return i===d?(e-=r,a+=r):i===p?a+=r:i===g?(t-=1.5*n,o+=n):i===f&&(o+=1.5*n),{x:t,y:e,width:o,height:a}},e}(s.Shape);e.Tag=m,m.prototype.className="Tag",u._registerNode(m),a.Factory.addGetterSetter(m,"pointerDirection","none"),a.Factory.addGetterSetter(m,"pointerWidth",0,c.getNumberValidator()),a.Factory.addGetterSetter(m,"pointerHeight",0,c.getNumberValidator()),a.Factory.addGetterSetter(m,"cornerRadius",0,c.getNumberOrArrayOfNumbersValidator(4)),o.Collection.mapMethods(m)},7149:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r};Object.defineProperty(e,"__esModule",{value:!0});var a=n(8588),s=n(1455),l=n(7955),c=n(3774),u=n(4417),h=function(t){function e(e){var n=t.call(this,e)||this;return n.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")})),n}return i(e,t),e.prototype._sceneFunc=function(t){var e,n,r,i=this.points(),o=i.length,a=this.tension(),s=this.closed(),l=this.bezier();if(o){if(t.beginPath(),t.moveTo(i[0],i[1]),0!==a&&o>4){for(n=(e=this.getTensionPoints()).length,r=s?0:4,s||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);r<n-2;)t.bezierCurveTo(e[r++],e[r++],e[r++],e[r++],e[r++],e[r++]);s||t.quadraticCurveTo(e[n-2],e[n-1],i[o-2],i[o-1])}else if(l)for(r=2;r<o;)t.bezierCurveTo(i[r++],i[r++],i[r++],i[r++],i[r++],i[r++]);else for(r=2;r<o;r+=2)t.lineTo(i[r],i[r+1]);s?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},e.prototype.getTensionPoints=function(){return this._getCache("tensionPoints",this._getTensionPoints)},e.prototype._getTensionPoints=function(){return this.closed()?this._getTensionPointsClosed():a.Util._expandPoints(this.points(),this.tension())},e.prototype._getTensionPointsClosed=function(){var t=this.points(),e=t.length,n=this.tension(),r=a.Util._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],n),i=a.Util._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],n),o=a.Util._expandPoints(t,n);return[r[2],r[3]].concat(o).concat([i[0],i[1],t[e-2],t[e-1],i[2],i[3],r[0],r[1],t[0],t[1]])},e.prototype.getWidth=function(){return this.getSelfRect().width},e.prototype.getHeight=function(){return this.getSelfRect().height},e.prototype.getSelfRect=function(){var t=this.points();if(t.length<4)return{x:t[0]||0,y:t[1]||0,width:0,height:0};for(var e,n,r=(t=0!==this.tension()?o([t[0],t[1]],this._getTensionPoints(),[t[t.length-2],t[t.length-1]]):this.points())[0],i=t[0],a=t[1],s=t[1],l=0;l<t.length/2;l++)e=t[2*l],n=t[2*l+1],r=Math.min(r,e),i=Math.max(i,e),a=Math.min(a,n),s=Math.max(s,n);return{x:r,y:a,width:i-r,height:s-a}},e}(l.Shape);e.Line=h,h.prototype.className="Line",h.prototype._attrsAffectingSize=["points","bezier","tension"],u._registerNode(h),s.Factory.addGetterSetter(h,"closed",!1),s.Factory.addGetterSetter(h,"bezier",!1),s.Factory.addGetterSetter(h,"tension",0,c.getNumberValidator()),s.Factory.addGetterSetter(h,"points",[],c.getNumberArrayValidator()),a.Collection.mapMethods(h)},7339:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(4417),c=function(t){function e(n){var r=t.call(this,n)||this;r.dataArray=[],r.pathLength=0,r.dataArray=e.parsePathData(r.data()),r.pathLength=0;for(var i=0;i<r.dataArray.length;++i)r.pathLength+=r.dataArray[i].pathLength;return r.on("dataChange.konva",(function(){this.dataArray=e.parsePathData(this.data()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength})),r}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.dataArray;t.beginPath();for(var n=!1,r=0;r<e.length;r++){var i=e[r].command,o=e[r].points;switch(i){case"L":t.lineTo(o[0],o[1]);break;case"M":t.moveTo(o[0],o[1]);break;case"C":t.bezierCurveTo(o[0],o[1],o[2],o[3],o[4],o[5]);break;case"Q":t.quadraticCurveTo(o[0],o[1],o[2],o[3]);break;case"A":var a=o[0],s=o[1],l=o[2],c=o[3],u=o[4],h=o[5],d=o[6],f=o[7],p=l>c?l:c,g=l>c?1:l/c,y=l>c?c/l:1;t.translate(a,s),t.rotate(d),t.scale(g,y),t.arc(0,0,p,u,u+h,1-f),t.scale(1/g,1/y),t.rotate(-d),t.translate(-a,-s);break;case"z":n=!0,t.closePath()}}n||this.hasFill()?t.fillStrokeShape(this):t.strokeShape(this)},e.prototype.getSelfRect=function(){var t=[];this.dataArray.forEach((function(n){if("A"===n.command){var r=n.points[4],i=n.points[5],o=n.points[4]+i,a=Math.PI/180;if(Math.abs(r-o)<a&&(a=Math.abs(r-o)),i<0)for(var s=r-a;s>o;s-=a){var l=e.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],s,0);t.push(l.x,l.y)}else for(s=r+a;s<o;s+=a)l=e.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],s,0),t.push(l.x,l.y)}else if("C"===n.command)for(s=0;s<=1;s+=.01)l=e.getPointOnCubicBezier(s,n.start.x,n.start.y,n.points[0],n.points[1],n.points[2],n.points[3],n.points[4],n.points[5]),t.push(l.x,l.y);else t=t.concat(n.points)}));for(var n,r,i=t[0],o=t[0],a=t[1],s=t[1],l=0;l<t.length/2;l++)n=t[2*l],r=t[2*l+1],isNaN(n)||(i=Math.min(i,n),o=Math.max(o,n)),isNaN(r)||(a=Math.min(a,r),s=Math.max(s,r));return{x:Math.round(i),y:Math.round(a),width:Math.round(o-i),height:Math.round(s-a)}},e.prototype.getLength=function(){return this.pathLength},e.prototype.getPointAtLength=function(t){var n,r=0,i=this.dataArray.length;if(!i)return null;for(;r<i&&t>this.dataArray[r].pathLength;)t-=this.dataArray[r].pathLength,++r;if(r===i)return{x:(n=this.dataArray[r-1].points.slice(-2))[0],y:n[1]};if(t<.01)return{x:(n=this.dataArray[r].points.slice(0,2))[0],y:n[1]};var o=this.dataArray[r],a=o.points;switch(o.command){case"L":return e.getPointOnLine(t,o.start.x,o.start.y,a[0],a[1]);case"C":return e.getPointOnCubicBezier(t/o.pathLength,o.start.x,o.start.y,a[0],a[1],a[2],a[3],a[4],a[5]);case"Q":return e.getPointOnQuadraticBezier(t/o.pathLength,o.start.x,o.start.y,a[0],a[1],a[2],a[3]);case"A":var s=a[0],l=a[1],c=a[2],u=a[3],h=a[4],d=a[5],f=a[6];return h+=d*t/o.pathLength,e.getPointOnEllipticalArc(s,l,c,u,h,f)}return null},e.getLineLength=function(t,e,n,r){return Math.sqrt((n-t)*(n-t)+(r-e)*(r-e))},e.getPointOnLine=function(t,e,n,r,i,o,a){void 0===o&&(o=e),void 0===a&&(a=n);var s=(i-n)/(r-e+1e-8),l=Math.sqrt(t*t/(1+s*s));r<e&&(l*=-1);var c,u=s*l;if(r===e)c={x:o,y:a+u};else if((a-n)/(o-e+1e-8)===s)c={x:o+l,y:a+u};else{var h,d,f=this.getLineLength(e,n,r,i);if(f<1e-8)return;var p=(o-e)*(r-e)+(a-n)*(i-n);h=e+(p/=f*f)*(r-e),d=n+p*(i-n);var g=this.getLineLength(o,a,h,d),y=Math.sqrt(t*t-g*g);l=Math.sqrt(y*y/(1+s*s)),r<e&&(l*=-1),c={x:h+l,y:d+(u=s*l)}}return c},e.getPointOnCubicBezier=function(t,e,n,r,i,o,a,s,l){function c(t){return t*t*t}function u(t){return 3*t*t*(1-t)}function h(t){return 3*t*(1-t)*(1-t)}function d(t){return(1-t)*(1-t)*(1-t)}return{x:s*c(t)+o*u(t)+r*h(t)+e*d(t),y:l*c(t)+a*u(t)+i*h(t)+n*d(t)}},e.getPointOnQuadraticBezier=function(t,e,n,r,i,o,a){function s(t){return t*t}function l(t){return 2*t*(1-t)}function c(t){return(1-t)*(1-t)}return{x:o*s(t)+r*l(t)+e*c(t),y:a*s(t)+i*l(t)+n*c(t)}},e.getPointOnEllipticalArc=function(t,e,n,r,i,o){var a=Math.cos(o),s=Math.sin(o),l=n*Math.cos(i),c=r*Math.sin(i);return{x:t+(l*a-c*s),y:e+(l*s+c*a)}},e.parsePathData=function(t){if(!t)return[];var e=t,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var r=0;r<n.length;r++)e=e.replace(new RegExp(n[r],"g"),"|"+n[r]);var i,o=e.split("|"),a=[],s=[],l=0,c=0,u=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<o.length;r++){var h=o[r],d=h.charAt(0);for(h=h.slice(1),s.length=0;i=u.exec(h);)s.push(i[0]);for(var f=[],p=0,g=s.length;p<g;p++){var y=parseFloat(s[p]);isNaN(y)?f.push(0):f.push(y)}for(;f.length>0&&!isNaN(f[0]);){var v,m,b,_,C,w,S,x,k,P,T=null,E=[],F=l,A=c;switch(d){case"l":l+=f.shift(),c+=f.shift(),T="L",E.push(l,c);break;case"L":l=f.shift(),c=f.shift(),E.push(l,c);break;case"m":var M=f.shift(),O=f.shift();if(l+=M,c+=O,T="M",a.length>2&&"z"===a[a.length-1].command)for(var N=a.length-2;N>=0;N--)if("M"===a[N].command){l=a[N].points[0]+M,c=a[N].points[1]+O;break}E.push(l,c),d="l";break;case"M":l=f.shift(),c=f.shift(),T="M",E.push(l,c),d="L";break;case"h":l+=f.shift(),T="L",E.push(l,c);break;case"H":l=f.shift(),T="L",E.push(l,c);break;case"v":c+=f.shift(),T="L",E.push(l,c);break;case"V":c=f.shift(),T="L",E.push(l,c);break;case"C":E.push(f.shift(),f.shift(),f.shift(),f.shift()),l=f.shift(),c=f.shift(),E.push(l,c);break;case"c":E.push(l+f.shift(),c+f.shift(),l+f.shift(),c+f.shift()),l+=f.shift(),c+=f.shift(),T="C",E.push(l,c);break;case"S":m=l,b=c,"C"===(v=a[a.length-1]).command&&(m=l+(l-v.points[2]),b=c+(c-v.points[3])),E.push(m,b,f.shift(),f.shift()),l=f.shift(),c=f.shift(),T="C",E.push(l,c);break;case"s":m=l,b=c,"C"===(v=a[a.length-1]).command&&(m=l+(l-v.points[2]),b=c+(c-v.points[3])),E.push(m,b,l+f.shift(),c+f.shift()),l+=f.shift(),c+=f.shift(),T="C",E.push(l,c);break;case"Q":E.push(f.shift(),f.shift()),l=f.shift(),c=f.shift(),E.push(l,c);break;case"q":E.push(l+f.shift(),c+f.shift()),l+=f.shift(),c+=f.shift(),T="Q",E.push(l,c);break;case"T":m=l,b=c,"Q"===(v=a[a.length-1]).command&&(m=l+(l-v.points[0]),b=c+(c-v.points[1])),l=f.shift(),c=f.shift(),T="Q",E.push(m,b,l,c);break;case"t":m=l,b=c,"Q"===(v=a[a.length-1]).command&&(m=l+(l-v.points[0]),b=c+(c-v.points[1])),l+=f.shift(),c+=f.shift(),T="Q",E.push(m,b,l,c);break;case"A":_=f.shift(),C=f.shift(),w=f.shift(),S=f.shift(),x=f.shift(),k=l,P=c,l=f.shift(),c=f.shift(),T="A",E=this.convertEndpointToCenterParameterization(k,P,l,c,S,x,_,C,w);break;case"a":_=f.shift(),C=f.shift(),w=f.shift(),S=f.shift(),x=f.shift(),k=l,P=c,l+=f.shift(),c+=f.shift(),T="A",E=this.convertEndpointToCenterParameterization(k,P,l,c,S,x,_,C,w)}a.push({command:T||d,points:E,start:{x:F,y:A},pathLength:this.calcLength(F,A,T||d,E)})}"z"!==d&&"Z"!==d||a.push({command:"z",points:[],start:void 0,pathLength:0})}return a},e.calcLength=function(t,n,r,i){var o,a,s,l,c=e;switch(r){case"L":return c.getLineLength(t,n,i[0],i[1]);case"C":for(o=0,a=c.getPointOnCubicBezier(0,t,n,i[0],i[1],i[2],i[3],i[4],i[5]),l=.01;l<=1;l+=.01)s=c.getPointOnCubicBezier(l,t,n,i[0],i[1],i[2],i[3],i[4],i[5]),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;return o;case"Q":for(o=0,a=c.getPointOnQuadraticBezier(0,t,n,i[0],i[1],i[2],i[3]),l=.01;l<=1;l+=.01)s=c.getPointOnQuadraticBezier(l,t,n,i[0],i[1],i[2],i[3]),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;return o;case"A":o=0;var u=i[4],h=i[5],d=i[4]+h,f=Math.PI/180;if(Math.abs(u-d)<f&&(f=Math.abs(u-d)),a=c.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],u,0),h<0)for(l=u-f;l>d;l-=f)s=c.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],l,0),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(l=u+f;l<d;l+=f)s=c.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],l,0),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=c.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],d,0),o+c.getLineLength(a.x,a.y,s.x,s.y)}return 0},e.convertEndpointToCenterParameterization=function(t,e,n,r,i,o,a,s,l){var c=l*(Math.PI/180),u=Math.cos(c)*(t-n)/2+Math.sin(c)*(e-r)/2,h=-1*Math.sin(c)*(t-n)/2+Math.cos(c)*(e-r)/2,d=u*u/(a*a)+h*h/(s*s);d>1&&(a*=Math.sqrt(d),s*=Math.sqrt(d));var f=Math.sqrt((a*a*(s*s)-a*a*(h*h)-s*s*(u*u))/(a*a*(h*h)+s*s*(u*u)));i===o&&(f*=-1),isNaN(f)&&(f=0);var p=f*a*h/s,g=f*-s*u/a,y=(t+n)/2+Math.cos(c)*p-Math.sin(c)*g,v=(e+r)/2+Math.sin(c)*p+Math.cos(c)*g,m=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},b=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(m(t)*m(e))},_=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(b(t,e))},C=_([1,0],[(u-p)/a,(h-g)/s]),w=[(u-p)/a,(h-g)/s],S=[(-1*u-p)/a,(-1*h-g)/s],x=_(w,S);return b(w,S)<=-1&&(x=Math.PI),b(w,S)>=1&&(x=0),0===o&&x>0&&(x-=2*Math.PI),1===o&&x<0&&(x+=2*Math.PI),[y,v,a,s,C,x,c,o]},e}(s.Shape);e.Path=c,c.prototype.className="Path",c.prototype._attrsAffectingSize=["data"],l._registerNode(c),a.Factory.addGetterSetter(c,"data"),o.Collection.mapMethods(c)},5244:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(4417),c=n(3774),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.cornerRadius(),n=this.width(),r=this.height();if(t.beginPath(),e){var i=0,o=0,a=0,s=0;"number"==typeof e?i=o=a=s=Math.min(e,n/2,r/2):(i=Math.min(e[0]||0,n/2,r/2),o=Math.min(e[1]||0,n/2,r/2),s=Math.min(e[2]||0,n/2,r/2),a=Math.min(e[3]||0,n/2,r/2)),t.moveTo(i,0),t.lineTo(n-o,0),t.arc(n-o,o,o,3*Math.PI/2,0,!1),t.lineTo(n,r-s),t.arc(n-s,r-s,s,0,Math.PI/2,!1),t.lineTo(a,r),t.arc(a,r-a,a,Math.PI/2,Math.PI,!1),t.lineTo(0,i),t.arc(i,i,i,Math.PI,3*Math.PI/2,!1)}else t.rect(0,0,n,r);t.closePath(),t.fillStrokeShape(this)},e}(s.Shape);e.Rect=u,u.prototype.className="Rect",l._registerNode(u),a.Factory.addGetterSetter(u,"cornerRadius",0,c.getNumberOrArrayOfNumbersValidator(4)),o.Collection.mapMethods(u)},1785:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(3774),c=n(4417),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e,n,r,i=this.sides(),o=this.radius();for(t.beginPath(),t.moveTo(0,0-o),e=1;e<i;e++)n=o*Math.sin(2*e*Math.PI/i),r=-1*o*Math.cos(2*e*Math.PI/i),t.lineTo(n,r);t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius(t/2)},e.prototype.setHeight=function(t){this.radius(t/2)},e}(s.Shape);e.RegularPolygon=u,u.prototype.className="RegularPolygon",u.prototype._centroid=!0,u.prototype._attrsAffectingSize=["radius"],c._registerNode(u),a.Factory.addGetterSetter(u,"radius",0,l.getNumberValidator()),a.Factory.addGetterSetter(u,"sides",0,l.getNumberValidator()),o.Collection.mapMethods(u)},657:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(3774),c=n(4417),u=2*Math.PI,h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.innerRadius(),0,u,!1),t.moveTo(this.outerRadius(),0),t.arc(0,0,this.outerRadius(),u,0,!0),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Ring=h,h.prototype.className="Ring",h.prototype._centroid=!0,h.prototype._attrsAffectingSize=["innerRadius","outerRadius"],c._registerNode(h),a.Factory.addGetterSetter(h,"innerRadius",0,l.getNumberValidator()),a.Factory.addGetterSetter(h,"outerRadius",0,l.getNumberValidator()),o.Collection.mapMethods(h)},8986:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(6745),c=n(3774),u=n(4417),h=function(t){function e(e){var n=t.call(this,e)||this;return n._updated=!0,n.anim=new l.Animation((function(){var t=n._updated;return n._updated=!1,t})),n.on("animationChange.konva",(function(){this.frameIndex(0)})),n.on("frameIndexChange.konva",(function(){this._updated=!0})),n.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())})),n}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.animation(),n=this.frameIndex(),r=4*n,i=this.animations()[e],o=this.frameOffsets(),a=i[r+0],s=i[r+1],l=i[r+2],c=i[r+3],u=this.image();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,l,c),t.closePath(),t.fillStrokeShape(this)),u)if(o){var h=o[e],d=2*n;t.drawImage(u,a,s,l,c,h[d+0],h[d+1],l,c)}else t.drawImage(u,a,s,l,c,0,0,l,c)},e.prototype._hitFunc=function(t){var e=this.animation(),n=this.frameIndex(),r=4*n,i=this.animations()[e],o=this.frameOffsets(),a=i[r+2],s=i[r+3];if(t.beginPath(),o){var l=o[e],c=2*n;t.rect(l[c+0],l[c+1],a,s)}else t.rect(0,0,a,s);t.closePath(),t.fillShape(this)},e.prototype._useBufferCanvas=function(){return t.prototype._useBufferCanvas.call(this,!0)},e.prototype._setInterval=function(){var t=this;this.interval=setInterval((function(){t._updateIndex()}),1e3/this.frameRate())},e.prototype.start=function(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}},e.prototype.stop=function(){this.anim.stop(),clearInterval(this.interval)},e.prototype.isRunning=function(){return this.anim.isRunning()},e.prototype._updateIndex=function(){var t=this.frameIndex(),e=this.animation();t<this.animations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)},e}(s.Shape);e.Sprite=h,h.prototype.className="Sprite",u._registerNode(h),a.Factory.addGetterSetter(h,"animation"),a.Factory.addGetterSetter(h,"animations"),a.Factory.addGetterSetter(h,"frameOffsets"),a.Factory.addGetterSetter(h,"image"),a.Factory.addGetterSetter(h,"frameIndex",0,c.getNumberValidator()),a.Factory.addGetterSetter(h,"frameRate",17,c.getNumberValidator()),a.Factory.backCompat(h,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),o.Collection.mapMethods(h)},1964:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(3774),c=n(4417),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.innerRadius(),n=this.outerRadius(),r=this.numPoints();t.beginPath(),t.moveTo(0,0-n);for(var i=1;i<2*r;i++){var o=i%2==0?n:e,a=o*Math.sin(i*Math.PI/r),s=-1*o*Math.cos(i*Math.PI/r);t.lineTo(a,s)}t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Star=u,u.prototype.className="Star",u.prototype._centroid=!0,u.prototype._attrsAffectingSize=["innerRadius","outerRadius"],c._registerNode(u),a.Factory.addGetterSetter(u,"numPoints",5,l.getNumberValidator()),a.Factory.addGetterSetter(u,"innerRadius",0,l.getNumberValidator()),a.Factory.addGetterSetter(u,"outerRadius",0,l.getNumberValidator()),o.Collection.mapMethods(u)},3787:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(4417),c=n(3774),u=n(4417);function h(t){return Array.from(t)}e.stringToArray=h;var d,f="auto",p="justify",g="left",y="middle",v="normal",m=" ",b="…",_=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],C=_.length;function w(){return d||(d=o.Util.createCanvasElement().getContext("2d"))}var S=function(t){function e(e){var n=t.call(this,function(t){return(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||t.fillPatternImage||(t.fill=t.fill||"black"),t}(e))||this;n._partialTextX=0,n._partialTextY=0;for(var r=0;r<C;r++)n.on(_[r]+"Change.konva",n._setTextData);return n._setTextData(),n}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.textArr,n=e.length;if(this.text()){var r,i=this.padding(),o=this.fontSize(),a=this.lineHeight()*o,s=this.verticalAlign(),l=0,c=this.align(),u=this.getWidth(),d=this.letterSpacing(),f=this.fill(),v=this.textDecoration(),m=-1!==v.indexOf("underline"),b=-1!==v.indexOf("line-through"),_=0,C=(_=a/2,0),w=0;for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",y),t.setAttr("textAlign",g),s===y?l=(this.getHeight()-n*a-2*i)/2:"bottom"===s&&(l=this.getHeight()-n*a-2*i),t.translate(i,l+i),r=0;r<n;r++){C=0,w=0;var S,x,k,P=e[r],T=P.text,E=P.width,F=r!==n-1;if(t.save(),"right"===c?C+=u-E-2*i:"center"===c&&(C+=(u-E-2*i)/2),m&&(t.save(),t.beginPath(),t.moveTo(C,_+w+Math.round(o/2)),x=0==(S=T.split(" ").length-1),k=c===p&&F&&!x?u-2*i:E,t.lineTo(C+Math.round(k),_+w+Math.round(o/2)),t.lineWidth=o/15,t.strokeStyle=f,t.stroke(),t.restore()),b&&(t.save(),t.beginPath(),t.moveTo(C,_+w),x=0==(S=T.split(" ").length-1),k=c===p&&F&&!x?u-2*i:E,t.lineTo(C+Math.round(k),_+w),t.lineWidth=o/15,t.strokeStyle=f,t.stroke(),t.restore()),0!==d||c===p){S=T.split(" ").length-1;for(var A=h(T),M=0;M<A.length;M++){var O=A[M];" "===O&&r!==n-1&&c===p&&(C+=(u-2*i-E)/S),this._partialTextX=C,this._partialTextY=_+w,this._partialText=O,t.fillStrokeShape(this),C+=this.measureSize(O).width+d}}else this._partialTextX=C,this._partialTextY=_+w,this._partialText=T,t.fillStrokeShape(this);t.restore(),n>1&&(_+=a)}}},e.prototype._hitFunc=function(t){var e=this.getWidth(),n=this.getHeight();t.beginPath(),t.rect(0,0,e,n),t.closePath(),t.fillStrokeShape(this)},e.prototype.setText=function(t){var e=o.Util._isString(t)?t:null==t?"":t+"";return this._setAttr("text",e),this},e.prototype.getWidth=function(){return this.attrs.width===f||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width},e.prototype.getHeight=function(){return this.attrs.height===f||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height},e.prototype.getTextWidth=function(){return this.textWidth},e.prototype.getTextHeight=function(){return o.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},e.prototype.measureSize=function(t){var e,n=w(),r=this.fontSize();return n.save(),n.font=this._getContextFont(),e=n.measureText(t),n.restore(),{width:e.width,height:r}},e.prototype._getContextFont=function(){return l.Konva.UA.isIE?this.fontStyle()+m+this.fontSize()+"px "+this.fontFamily():this.fontStyle()+m+this.fontVariant()+m+(this.fontSize()+"px ")+this.fontFamily().split(",").map((function(t){var e=(t=t.trim()).indexOf(" ")>=0,n=t.indexOf('"')>=0||t.indexOf("'")>=0;return e&&!n&&(t='"'+t+'"'),t})).join(", ")},e.prototype._addTextLine=function(t){this.align()===p&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e})},e.prototype._getTextWidth=function(t){var e=this.letterSpacing(),n=t.length;return w().measureText(t).width+(n?e*(n-1):0)},e.prototype._setTextData=function(){var t=this.text().split("\n"),e=+this.fontSize(),n=0,r=this.lineHeight()*e,i=this.attrs.width,o=this.attrs.height,a=i!==f&&void 0!==i,s=o!==f&&void 0!==o,l=this.padding(),c=i-2*l,u=o-2*l,h=0,d=this.wrap(),p="none"!==d,g="char"!==d&&p,y=this.ellipsis();this.textArr=[],w().font=this._getContextFont();for(var v=y?this._getTextWidth(b):0,_=0,C=t.length;_<C;++_){var S=t[_],x=this._getTextWidth(S);if(a&&x>c)for(;S.length>0;){for(var k=0,P=S.length,T="",E=0;k<P;){var F=k+P>>>1,A=S.slice(0,F+1),M=this._getTextWidth(A)+v;M<=c?(k=F+1,T=A+(y?b:""),E=M):P=F}if(!T)break;if(g){var O,N=S[T.length];(O=(N===m||"-"===N)&&E<=c?T.length:Math.max(T.lastIndexOf(m),T.lastIndexOf("-"))+1)>0&&(k=O,T=T.slice(0,k),E=this._getTextWidth(T))}if(T=T.trimRight(),this._addTextLine(T),n=Math.max(n,E),h+=r,!p||s&&h+r>u){var D=this.textArr[this.textArr.length-1];D&&y&&(this._getTextWidth(D.text+b)<c||(D.text=D.text.slice(0,D.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(D.text+b));break}if((S=(S=S.slice(k)).trimLeft()).length>0&&(x=this._getTextWidth(S))<=c){this._addTextLine(S),h+=r,n=Math.max(n,x);break}}else this._addTextLine(S),h+=r,n=Math.max(n,x);if(s&&h+r>u)break}this.textHeight=e,this.textWidth=n},e.prototype.getStrokeScaleEnabled=function(){return!0},e}(s.Shape);e.Text=S,S.prototype._fillFunc=function(t){t.fillText(this._partialText,this._partialTextX,this._partialTextY)},S.prototype._strokeFunc=function(t){t.strokeText(this._partialText,this._partialTextX,this._partialTextY)},S.prototype.className="Text",S.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight"],u._registerNode(S),a.Factory.overWriteSetter(S,"width",c.getNumberOrAutoValidator()),a.Factory.overWriteSetter(S,"height",c.getNumberOrAutoValidator()),a.Factory.addGetterSetter(S,"fontFamily","Arial"),a.Factory.addGetterSetter(S,"fontSize",12,c.getNumberValidator()),a.Factory.addGetterSetter(S,"fontStyle",v),a.Factory.addGetterSetter(S,"fontVariant",v),a.Factory.addGetterSetter(S,"padding",0,c.getNumberValidator()),a.Factory.addGetterSetter(S,"align",g),a.Factory.addGetterSetter(S,"verticalAlign","top"),a.Factory.addGetterSetter(S,"lineHeight",1,c.getNumberValidator()),a.Factory.addGetterSetter(S,"wrap","word"),a.Factory.addGetterSetter(S,"ellipsis",!1,c.getBooleanValidator()),a.Factory.addGetterSetter(S,"letterSpacing",0,c.getNumberValidator()),a.Factory.addGetterSetter(S,"text","",c.getStringValidator()),a.Factory.addGetterSetter(S,"textDecoration",""),o.Collection.mapMethods(S)},2831:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(7339),c=n(3787),u=n(3774),h=n(4417),d="normal";function f(t){t.fillText(this.partialText,0,0)}function p(t){t.strokeText(this.partialText,0,0)}var g=function(t){function e(e){var n=t.call(this,e)||this;return n.dummyCanvas=o.Util.createCanvasElement(),n.dataArray=[],n.dataArray=l.Path.parsePathData(n.attrs.data),n.on("dataChange.konva",(function(){this.dataArray=l.Path.parsePathData(this.attrs.data),this._setTextData()})),n.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",n._setTextData),e&&e.getKerning&&(o.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),n.kerningFunc(e.getKerning)),n._setTextData(),n}return i(e,t),e.prototype._sceneFunc=function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.textBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),n=this.fill(),r=this.fontSize(),i=this.glyphInfo;"underline"===e&&t.beginPath();for(var o=0;o<i.length;o++){t.save();var a=i[o].p0;t.translate(a.x,a.y),t.rotate(i[o].rotation),this.partialText=i[o].text,t.fillStrokeShape(this),"underline"===e&&(0===o&&t.moveTo(0,r/2+1),t.lineTo(r,r/2+1)),t.restore()}"underline"===e&&(t.strokeStyle=n,t.lineWidth=r/20,t.stroke()),t.restore()},e.prototype._hitFunc=function(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var n=e[0].p0;t.moveTo(n.x,n.y)}for(var r=0;r<e.length;r++){var i=e[r].p1;t.lineTo(i.x,i.y)}t.setAttr("lineWidth",this.fontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()},e.prototype.getTextWidth=function(){return this.textWidth},e.prototype.getTextHeight=function(){return o.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},e.prototype.setText=function(t){return c.Text.prototype.setText.call(this,t)},e.prototype._getContextFont=function(){return c.Text.prototype._getContextFont.call(this)},e.prototype._getTextSize=function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var n=e.measureText(t);return e.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}},e.prototype._setTextData=function(){var t=this,e=this._getTextSize(this.attrs.text),n=this.letterSpacing(),r=this.align(),i=this.kerningFunc();this.textWidth=e.width,this.textHeight=e.height;var o=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var a=0,s=0;s<t.dataArray.length;s++)t.dataArray[s].pathLength>0&&(a+=t.dataArray[s].pathLength);var u=0;"center"===r&&(u=Math.max(0,a/2-o/2)),"right"===r&&(u=Math.max(0,a-o));for(var h,d,f,p=c.stringToArray(this.text()),g=this.text().split(" ").length-1,y=-1,v=0,m=function(){v=0;for(var e=t.dataArray,n=y+1;n<e.length;n++){if(e[n].pathLength>0)return y=n,e[n];"M"===e[n].command&&(h={x:e[n].points[0],y:e[n].points[1]})}return{}},b=function(e){var i=t._getTextSize(e).width+n;" "===e&&"justify"===r&&(i+=(a-o)/g);var s=0,c=0;for(d=void 0;Math.abs(i-s)/i>.01&&c<50;){c++;for(var u=s;void 0===f;)(f=m())&&u+f.pathLength<i&&(u+=f.pathLength,f=void 0);if(f==={}||void 0===h)return;var p=!1;switch(f.command){case"L":l.Path.getLineLength(h.x,h.y,f.points[0],f.points[1])>i?d=l.Path.getPointOnLine(i,h.x,h.y,f.points[0],f.points[1],h.x,h.y):f=void 0;break;case"A":var y=f.points[4],b=f.points[5],_=f.points[4]+b;0===v?v=y+1e-8:i>s?v+=Math.PI/180*b/Math.abs(b):v-=Math.PI/360*b/Math.abs(b),(b<0&&v<_||b>=0&&v>_)&&(v=_,p=!0),d=l.Path.getPointOnEllipticalArc(f.points[0],f.points[1],f.points[2],f.points[3],v,f.points[6]);break;case"C":0===v?v=i>f.pathLength?1e-8:i/f.pathLength:i>s?v+=(i-s)/f.pathLength:v-=(s-i)/f.pathLength,v>1&&(v=1,p=!0),d=l.Path.getPointOnCubicBezier(v,f.start.x,f.start.y,f.points[0],f.points[1],f.points[2],f.points[3],f.points[4],f.points[5]);break;case"Q":0===v?v=i/f.pathLength:i>s?v+=(i-s)/f.pathLength:v-=(s-i)/f.pathLength,v>1&&(v=1,p=!0),d=l.Path.getPointOnQuadraticBezier(v,f.start.x,f.start.y,f.points[0],f.points[1],f.points[2],f.points[3])}void 0!==d&&(s=l.Path.getLineLength(h.x,h.y,d.x,d.y)),p&&(p=!1,f=void 0)}},_=u/(t._getTextSize("C").width+n)-1,C=0;C<_&&(b("C"),void 0!==h&&void 0!==d);C++)h=d;for(var w=0;w<p.length&&(b(p[w]),void 0!==h&&void 0!==d);w++){var S=l.Path.getLineLength(h.x,h.y,d.x,d.y),x=0;if(i)try{x=i(p[w-1],p[w])*this.fontSize()}catch(t){x=0}h.x+=x,d.x+=x,this.textWidth+=x;var k=l.Path.getPointOnLine(x+S/2,h.x,h.y,d.x,d.y),P=Math.atan2(d.y-h.y,d.x-h.x);this.glyphInfo.push({transposeX:k.x,transposeY:k.y,text:p[w],rotation:P,p0:h,p1:d}),h=d}},e.prototype.getSelfRect=function(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var t=[];this.glyphInfo.forEach((function(e){t.push(e.p0.x),t.push(e.p0.y),t.push(e.p1.x),t.push(e.p1.y)}));for(var e,n,r=t[0]||0,i=t[0]||0,o=t[1]||0,a=t[1]||0,s=0;s<t.length/2;s++)e=t[2*s],n=t[2*s+1],r=Math.min(r,e),i=Math.max(i,e),o=Math.min(o,n),a=Math.max(a,n);var l=this.fontSize();return{x:r-l/2,y:o-l/2,width:i-r+l,height:a-o+l}},e}(s.Shape);e.TextPath=g,g.prototype._fillFunc=f,g.prototype._strokeFunc=p,g.prototype._fillFuncHit=f,g.prototype._strokeFuncHit=p,g.prototype.className="TextPath",g.prototype._attrsAffectingSize=["text","fontSize","data"],h._registerNode(g),a.Factory.addGetterSetter(g,"data"),a.Factory.addGetterSetter(g,"fontFamily","Arial"),a.Factory.addGetterSetter(g,"fontSize",12,u.getNumberValidator()),a.Factory.addGetterSetter(g,"fontStyle",d),a.Factory.addGetterSetter(g,"align","left"),a.Factory.addGetterSetter(g,"letterSpacing",0,u.getNumberValidator()),a.Factory.addGetterSetter(g,"textBaseline","middle"),a.Factory.addGetterSetter(g,"fontVariant",d),a.Factory.addGetterSetter(g,"text",""),a.Factory.addGetterSetter(g,"textDecoration",null),a.Factory.addGetterSetter(g,"kerningFunc",null),o.Collection.mapMethods(g)},9516:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(8588),s=n(1455),l=n(7939),c=n(7955),u=n(5244),h=n(8985),d=n(4417),f=n(3774),p=n(4417),g=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((function(t){return t+".tr-konva"})).join(" "),y="nodesRect",v=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((function(t){return t+".tr-konva"})).join(" "),m={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135},b="ontouchstart"in d.Konva._global,_=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function C(t,e,n){var r=n.x+(t.x-n.x)*Math.cos(e)-(t.y-n.y)*Math.sin(e),i=n.y+(t.x-n.x)*Math.sin(e)+(t.y-n.y)*Math.cos(e);return o(o({},t),{rotation:t.rotation+e,x:r,y:i})}var w=function(t){function e(e){var n=t.call(this,e)||this;return n._transforming=!1,n._createElements(),n._handleMouseMove=n._handleMouseMove.bind(n),n._handleMouseUp=n._handleMouseUp.bind(n),n.update=n.update.bind(n),n.on(g,n.update),n.getNode()&&n.update(),n}return i(e,t),e.prototype.attachTo=function(t){return this.setNode(t),this},e.prototype.setNode=function(t){return a.Util.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([t])},e.prototype.getNode=function(){return this._nodes&&this._nodes[0]},e.prototype.setNodes=function(t){var e=this;return void 0===t&&(t=[]),this._nodes&&this._nodes.length&&this.detach(),this._nodes=t,1===t.length?this.rotation(t[0].rotation()):this.rotation(0),this._nodes.forEach((function(t){var n=t._attrsAffectingSize.map((function(t){return t+"Change.tr-konva"})).join(" "),r=function(){1===e.nodes().length&&e.rotation(e.nodes()[0].rotation()),e._resetTransformCache(),e._transforming||e.isDragging()||e.update()};t.on(n,r),t.on(v,r),t.on("_clearTransformCache.tr-konva",r),t.on("xChange.tr-konva yChange.tr-konva",r),e._proxyDrag(t)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this},e.prototype._proxyDrag=function(t){var e,n=this;t.on("dragstart.tr-konva",(function(r){e=t.getAbsolutePosition(),n.isDragging()||t===n.findOne(".back")||n.startDrag(r,!1)})),t.on("dragmove.tr-konva",(function(r){if(e){var i=t.getAbsolutePosition(),o=i.x-e.x,a=i.y-e.y;n.nodes().forEach((function(e){if(e!==t&&!e.isDragging()){var n=e.getAbsolutePosition();e.setAbsolutePosition({x:n.x+o,y:n.y+a}),e.startDrag(r)}})),e=null}}))},e.prototype.getNodes=function(){return this._nodes||[]},e.prototype.getActiveAnchor=function(){return this._movingAnchorName},e.prototype.detach=function(){this._nodes&&this._nodes.forEach((function(t){t.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()},e.prototype._resetTransformCache=function(){this._clearCache(y),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},e.prototype._getNodeRect=function(){return this._getCache(y,this.__getNodeRect)},e.prototype.__getNodeShape=function(t,e,n){void 0===e&&(e=this.rotation());var r=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),i=t.getAbsoluteScale(n),o=t.getAbsolutePosition(n),a=r.x*i.x-t.offsetX()*i.x,s=r.y*i.y-t.offsetY()*i.y,l=(d.Konva.getAngle(t.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return C({x:o.x+a*Math.cos(l)+s*Math.sin(-l),y:o.y+s*Math.cos(l)+a*Math.sin(l),width:r.width*i.x,height:r.height*i.y,rotation:l},-d.Konva.getAngle(e),{x:0,y:0})},e.prototype.__getNodeRect=function(){var t=this;if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};var e=[];this.nodes().map((function(n){var r=n.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:t.ignoreStroke()}),i=[{x:r.x,y:r.y},{x:r.x+r.width,y:r.y},{x:r.x+r.width,y:r.y+r.height},{x:r.x,y:r.y+r.height}],o=n.getAbsoluteTransform();i.forEach((function(t){var n=o.point(t);e.push(n)}))}));var n,r,i,o,s=new a.Transform;s.rotate(-d.Konva.getAngle(this.rotation())),e.forEach((function(t){var e=s.point(t);void 0===n&&(n=i=e.x,r=o=e.y),n=Math.min(n,e.x),r=Math.min(r,e.y),i=Math.max(i,e.x),o=Math.max(o,e.y)})),s.invert();var l=s.point({x:n,y:r});return{x:l.x,y:l.y,width:i-n,height:o-r,rotation:d.Konva.getAngle(this.rotation())}},e.prototype.getX=function(){return this._getNodeRect().x},e.prototype.getY=function(){return this._getNodeRect().y},e.prototype.getWidth=function(){return this._getNodeRect().width},e.prototype.getHeight=function(){return this._getNodeRect().height},e.prototype._createElements=function(){this._createBack(),_.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")},e.prototype._createAnchor=function(t){var e=this,n=new u.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:t+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:b?10:"auto"}),r=this;n.on("mousedown touchstart",(function(t){r._handleMouseDown(t)})),n.on("dragstart",(function(t){n.stopDrag(),t.cancelBubble=!0})),n.on("dragend",(function(t){t.cancelBubble=!0})),n.on("mouseenter",(function(){var r=d.Konva.getAngle(e.rotation()),i=function(t,e){if("rotater"===t)return"crosshair";e+=a.Util._degToRad(m[t]||0);var n=(a.Util._radToDeg(e)%360+360)%360;return a.Util._inRange(n,337.5,360)||a.Util._inRange(n,0,22.5)?"ns-resize":a.Util._inRange(n,22.5,67.5)?"nesw-resize":a.Util._inRange(n,67.5,112.5)?"ew-resize":a.Util._inRange(n,112.5,157.5)?"nwse-resize":a.Util._inRange(n,157.5,202.5)?"ns-resize":a.Util._inRange(n,202.5,247.5)?"nesw-resize":a.Util._inRange(n,247.5,292.5)?"ew-resize":a.Util._inRange(n,292.5,337.5)?"nwse-resize":(a.Util.error("Transformer has unknown angle for cursor detection: "+n),"pointer")}(t,r);n.getStage().content.style.cursor=i,e._cursorChange=!0})),n.on("mouseout",(function(){n.getStage().content.style.cursor="",e._cursorChange=!1})),this.add(n)},e.prototype._createBack=function(){var t=this,e=new c.Shape({name:"back",width:0,height:0,draggable:!0,sceneFunc:function(t){var e=this.getParent(),n=e.padding();t.beginPath(),t.rect(-n,-n,this.width()+2*n,this.height()+2*n),t.moveTo(this.width()/2,-n),e.rotateEnabled()&&t.lineTo(this.width()/2,-e.rotateAnchorOffset()*a.Util._sign(this.height())-n),t.fillStrokeShape(this)},hitFunc:function(e,n){if(t.shouldOverdrawWholeArea()){var r=t.padding();e.beginPath(),e.rect(-r,-r,n.width()+2*r,n.height()+2*r),e.fillStrokeShape(n)}}});this.add(e),this._proxyDrag(e),e.on("dragstart",(function(t){t.cancelBubble=!0})),e.on("dragmove",(function(t){t.cancelBubble=!0})),e.on("dragend",(function(t){t.cancelBubble=!0}))},e.prototype._handleMouseDown=function(t){this._movingAnchorName=t.target.name().split(" ")[0];var e=this._getNodeRect(),n=e.width,r=e.height,i=Math.sqrt(Math.pow(n,2)+Math.pow(r,2));this.sin=Math.abs(r/i),this.cos=Math.abs(n/i),window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0;var o=t.target.getAbsolutePosition(),a=t.target.getStage().getPointerPosition();this._anchorDragOffset={x:a.x-o.x,y:a.y-o.y},this._fire("transformstart",{evt:t,target:this.getNode()}),this.getNode()._fire("transformstart",{evt:t,target:this.getNode()})},e.prototype._handleMouseMove=function(t){var e,n,r,i=this.findOne("."+this._movingAnchorName),o=i.getStage();o.setPointersPositions(t);var a=o.getPointerPosition(),s={x:a.x-this._anchorDragOffset.x,y:a.y-this._anchorDragOffset.y},l=i.getAbsolutePosition();i.setAbsolutePosition(s);var c=i.getAbsolutePosition();if(l.x!==c.x||l.y!==c.y)if("rotater"!==this._movingAnchorName){var u=this.keepRatio()||t.shiftKey,h=this.centeredScaling()||t.altKey;if("top-left"===this._movingAnchorName){if(u){var f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};r=Math.sqrt(Math.pow(f.x-i.x(),2)+Math.pow(f.y-i.y(),2));var p=this.findOne(".top-left").x()>f.x?-1:1,g=this.findOne(".top-left").y()>f.y?-1:1;e=r*this.cos*p,n=r*this.sin*g,this.findOne(".top-left").x(f.x-e),this.findOne(".top-left").y(f.y-n)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(i.y());else if("top-right"===this._movingAnchorName){u&&(f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()},r=Math.sqrt(Math.pow(i.x()-f.x,2)+Math.pow(f.y-i.y(),2)),p=this.findOne(".top-right").x()<f.x?-1:1,g=this.findOne(".top-right").y()>f.y?-1:1,e=r*this.cos*p,n=r*this.sin*g,this.findOne(".top-right").x(f.x+e),this.findOne(".top-right").y(f.y-n));var y=i.position();this.findOne(".top-left").y(y.y),this.findOne(".bottom-right").x(y.x)}else"middle-left"===this._movingAnchorName?this.findOne(".top-left").x(i.x()):"middle-right"===this._movingAnchorName?this.findOne(".bottom-right").x(i.x()):"bottom-left"===this._movingAnchorName?(u&&(f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()},r=Math.sqrt(Math.pow(f.x-i.x(),2)+Math.pow(i.y()-f.y,2)),p=f.x<i.x()?-1:1,g=i.y()<f.y?-1:1,e=r*this.cos*p,n=r*this.sin*g,i.x(f.x-e),i.y(f.y+n)),y=i.position(),this.findOne(".top-left").x(y.x),this.findOne(".bottom-right").y(y.y)):"bottom-center"===this._movingAnchorName?this.findOne(".bottom-right").y(i.y()):"bottom-right"===this._movingAnchorName?u&&(f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()},r=Math.sqrt(Math.pow(i.x()-f.x,2)+Math.pow(i.y()-f.y,2)),p=this.findOne(".bottom-right").x()<f.x?-1:1,g=this.findOne(".bottom-right").y()<f.y?-1:1,e=r*this.cos*p,n=r*this.sin*g,this.findOne(".bottom-right").x(f.x+e),this.findOne(".bottom-right").y(f.y+n)):console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(h=this.centeredScaling()||t.altKey){var v=this.findOne(".top-left"),m=this.findOne(".bottom-right"),b=v.x(),_=v.y(),w=this.getWidth()-m.x(),S=this.getHeight()-m.y();m.move({x:-b,y:-_}),v.move({x:w,y:S})}var x=this.findOne(".top-left").getAbsolutePosition();e=x.x,n=x.y;var k=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),P=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:e,y:n,width:k,height:P,rotation:d.Konva.getAngle(this.rotation())},t)}else{var T=this._getNodeRect();e=i.x()-T.width/2,n=-i.y()+T.height/2;var E=Math.atan2(-n,e)+Math.PI/2;T.height<0&&(E-=Math.PI);var F=d.Konva.getAngle(this.rotation())+E,A=d.Konva.getAngle(this.rotationSnapTolerance()),M=function(t,e){return C(t,e,function(t){return{x:t.x+t.width/2*Math.cos(t.rotation)+t.height/2*Math.sin(-t.rotation),y:t.y+t.height/2*Math.cos(t.rotation)+t.width/2*Math.sin(t.rotation)}}(t))}(T,function(t,e,n){for(var r=e,i=0;i<t.length;i++){var o=d.Konva.getAngle(t[i]),a=Math.abs(o-e)%(2*Math.PI);Math.min(a,2*Math.PI-a)<n&&(r=o)}return r}(this.rotationSnaps(),F,A)-T.rotation);this._fitNodesInto(M,t)}},e.prototype._handleMouseUp=function(t){this._removeEvents(t)},e.prototype.getAbsoluteTransform=function(){return this.getTransform()},e.prototype._removeEvents=function(t){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0);var e=this.getNode();this._fire("transformend",{evt:t,target:e}),e&&e.fire("transformend",{evt:t,target:e}),this._movingAnchorName=null}},e.prototype._fitNodesInto=function(t,e){var n=this,r=this._getNodeRect();if(a.Util._inRange(t.width,2*-this.padding()-1,1))this.update();else if(a.Util._inRange(t.height,2*-this.padding()-1,1))this.update();else{var i=new a.Transform;if(i.rotate(d.Konva.getAngle(this.rotation())),this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("left")>=0){var o=i.point({x:2*-this.padding(),y:0});t.x+=o.x,t.y+=o.y,t.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y}else this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("right")>=0&&(o=i.point({x:2*this.padding(),y:0}),this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.width+=2*this.padding());if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("top")>=0?(o=i.point({x:0,y:2*-this.padding()}),t.x+=o.x,t.y+=o.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.height+=2*this.padding()):this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("bottom")>=0&&(o=i.point({x:0,y:2*this.padding()}),this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.height+=2*this.padding()),this.boundBoxFunc()){var s=this.boundBoxFunc()(r,t);s?t=s:a.Util.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}var l=1e7,c=new a.Transform;c.translate(r.x,r.y),c.rotate(r.rotation),c.scale(r.width/l,r.height/l);var u=new a.Transform;u.translate(t.x,t.y),u.rotate(t.rotation),u.scale(t.width/l,t.height/l);var h=u.multiply(c.invert());this._nodes.forEach((function(t){var r=t.getParent().getAbsoluteTransform(),i=t.getTransform().copy();i.translate(t.offsetX(),t.offsetY());var o=new a.Transform;o.multiply(r.copy().invert()).multiply(h).multiply(r).multiply(i);var s=o.decompose();t.setAttrs(s),n._fire("transform",{evt:e,target:t}),t._fire("transform",{evt:e,target:t})})),this.rotation(a.Util._getRotation(t.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}},e.prototype.forceUpdate=function(){this._resetTransformCache(),this.update()},e.prototype._batchChangeChild=function(t,e){this.findOne(t).setAttrs(e)},e.prototype.update=function(){var t=this,e=this._getNodeRect();this.rotation(a.Util._getRotation(e.rotation));var n=e.width,r=e.height,i=this.enabledAnchors(),o=this.resizeEnabled(),s=this.padding(),l=this.anchorSize();this.find("._anchor").each((function(e){e.setAttrs({width:l,height:l,offsetX:l/2,offsetY:l/2,stroke:t.anchorStroke(),strokeWidth:t.anchorStrokeWidth(),fill:t.anchorFill(),cornerRadius:t.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:l/2+s,offsetY:l/2+s,visible:o&&i.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:n/2,y:0,offsetY:l/2+s,visible:o&&i.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:n,y:0,offsetX:l/2-s,offsetY:l/2+s,visible:o&&i.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:r/2,offsetX:l/2+s,visible:o&&i.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:n,y:r/2,offsetX:l/2-s,visible:o&&i.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:r,offsetX:l/2+s,offsetY:l/2-s,visible:o&&i.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:n/2,y:r,offsetY:l/2-s,visible:o&&i.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:n,y:r,offsetX:l/2-s,offsetY:l/2-s,visible:o&&i.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:n/2,y:-this.rotateAnchorOffset()*a.Util._sign(r)-s,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:n,height:r,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0})},e.prototype.isTransforming=function(){return this._transforming},e.prototype.stopTransform=function(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this._movingAnchorName);t&&t.stopDrag()}},e.prototype.destroy=function(){return this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),h.Group.prototype.destroy.call(this),this.detach(),this._removeEvents(),this},e.prototype.toObject=function(){return l.Node.prototype.toObject.call(this)},e}(h.Group);e.Transformer=w,w.prototype.className="Transformer",p._registerNode(w),s.Factory.addGetterSetter(w,"enabledAnchors",_,(function(t){return t instanceof Array||a.Util.warn("enabledAnchors value should be an array"),t instanceof Array&&t.forEach((function(t){-1===_.indexOf(t)&&a.Util.warn("Unknown anchor name: "+t+". Available names are: "+_.join(", "))})),t||[]})),s.Factory.addGetterSetter(w,"resizeEnabled",!0),s.Factory.addGetterSetter(w,"anchorSize",10,f.getNumberValidator()),s.Factory.addGetterSetter(w,"rotateEnabled",!0),s.Factory.addGetterSetter(w,"rotationSnaps",[]),s.Factory.addGetterSetter(w,"rotateAnchorOffset",50,f.getNumberValidator()),s.Factory.addGetterSetter(w,"rotationSnapTolerance",5,f.getNumberValidator()),s.Factory.addGetterSetter(w,"borderEnabled",!0),s.Factory.addGetterSetter(w,"anchorStroke","rgb(0, 161, 255)"),s.Factory.addGetterSetter(w,"anchorStrokeWidth",1,f.getNumberValidator()),s.Factory.addGetterSetter(w,"anchorFill","white"),s.Factory.addGetterSetter(w,"anchorCornerRadius",0,f.getNumberValidator()),s.Factory.addGetterSetter(w,"borderStroke","rgb(0, 161, 255)"),s.Factory.addGetterSetter(w,"borderStrokeWidth",1,f.getNumberValidator()),s.Factory.addGetterSetter(w,"borderDash"),s.Factory.addGetterSetter(w,"keepRatio",!0),s.Factory.addGetterSetter(w,"centeredScaling",!1),s.Factory.addGetterSetter(w,"ignoreStroke",!1),s.Factory.addGetterSetter(w,"padding",0,f.getNumberValidator()),s.Factory.addGetterSetter(w,"node"),s.Factory.addGetterSetter(w,"nodes"),s.Factory.addGetterSetter(w,"boundBoxFunc"),s.Factory.addGetterSetter(w,"shouldOverdrawWholeArea",!1),s.Factory.backCompat(w,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),a.Collection.mapMethods(w)},9846:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(8588),a=n(1455),s=n(7955),l=n(4417),c=n(3774),u=n(4417),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.radius(),0,l.Konva.getAngle(this.angle()),this.clockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius(t/2)},e.prototype.setHeight=function(t){this.radius(t/2)},e}(s.Shape);e.Wedge=h,h.prototype.className="Wedge",h.prototype._centroid=!0,h.prototype._attrsAffectingSize=["radius"],u._registerNode(h),a.Factory.addGetterSetter(h,"radius",0,c.getNumberValidator()),a.Factory.addGetterSetter(h,"angle",0,c.getNumberValidator()),a.Factory.addGetterSetter(h,"clockwise",!1),a.Factory.backCompat(h,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),o.Collection.mapMethods(h)},7824:t=>{var e=1e3,n=60*e,r=60*n,i=24*r;function o(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,a){a=a||{};var s,l,c=typeof t;if("string"===c&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(o){var a=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(t);if("number"===c&&isFinite(t))return a.long?(s=t,(l=Math.abs(s))>=i?o(s,l,i,"day"):l>=r?o(s,l,r,"hour"):l>=n?o(s,l,n,"minute"):l>=e?o(s,l,e,"second"):s+" ms"):function(t){var o=Math.abs(t);return o>=i?Math.round(t/i)+"d":o>=r?Math.round(t/r)+"h":o>=n?Math.round(t/n)+"m":o>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},1830:(t,e)=>{e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,i=n.length;r<i;r++){var o=n[r].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},4187:t=>{var e=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var r,i,o=t,a=t.indexOf("["),s=t.indexOf("]");-1!=a&&-1!=s&&(t=t.substring(0,a)+t.substring(a,s).replace(/:/g,";")+t.substring(s,t.length));for(var l,c,u=e.exec(t||""),h={},d=14;d--;)h[n[d]]=u[d]||"";return-1!=a&&-1!=s&&(h.source=o,h.host=h.host.substring(1,h.host.length-1).replace(/;/g,":"),h.authority=h.authority.replace("[","").replace("]","").replace(/;/g,":"),h.ipv6uri=!0),h.pathNames=(r=h.path,i=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||i.splice(0,1),"/"==r.substr(r.length-1,1)&&i.splice(i.length-1,1),i),h.queryKey=(l=h.query,c={},l.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,n){e&&(c[e]=n)})),c),h}},75:function(t){(function(){var e,n,r,i,o,a;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(t.exports=function(){return(e()-o)/1e6},n=process.hrtime,i=(e=function(){var t;return 1e9*(t=n())[0]+t[1]})(),a=1e9*process.uptime(),o=i-a):Date.now?(t.exports=function(){return Date.now()-r},r=Date.now()):(t.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)},7236:t=>{var e=null,n=["Webkit","Moz","O","ms"];t.exports=function(t){e||(e=document.createElement("div"));var r=e.style;if(t in r)return t;for(var i=t.charAt(0).toUpperCase()+t.slice(1),o=n.length;o>=0;o--){var a=n[o]+i;if(a in r)return a}return!1}},4087:(t,e,n)=>{for(var r=n(75),i="undefined"==typeof window?n.g:window,o=["moz","webkit"],a="AnimationFrame",s=i["request"+a],l=i["cancel"+a]||i["cancelRequest"+a],c=0;!s&&c<o.length;c++)s=i[o[c]+"Request"+a],l=i[o[c]+"Cancel"+a]||i[o[c]+"CancelRequest"+a];if(!s||!l){var u=0,h=0,d=[];s=function(t){if(0===d.length){var e=r(),n=Math.max(0,16.666666666666668-(e-u));u=n+e,setTimeout((function(){var t=d.slice(0);d.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(u)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(n))}return d.push({handle:++h,callback:t,cancelled:!1}),h},l=function(t){for(var e=0;e<d.length;e++)d[e].handle===t&&(d[e].cancelled=!0)}}t.exports=function(t){return s.call(i,t)},t.exports.cancel=function(){l.apply(i,arguments)},t.exports.polyfill=function(t){t||(t=i),t.requestAnimationFrame=s,t.cancelAnimationFrame=l}},8682:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.renderViewDefault=function(t){return o.default.createElement("div",t)},e.renderTrackHorizontalDefault=function(t){var e=t.style,n=a(t,["style"]),i=r({},e,{right:2,bottom:2,left:2,borderRadius:3});return o.default.createElement("div",r({style:i},n))},e.renderTrackVerticalDefault=function(t){var e=t.style,n=a(t,["style"]),i=r({},e,{right:2,bottom:2,top:2,borderRadius:3});return o.default.createElement("div",r({style:i},n))},e.renderThumbHorizontalDefault=function(t){var e=t.style,n=a(t,["style"]),i=r({},e,{cursor:"pointer",borderRadius:"inherit",backgroundColor:"rgba(0,0,0,.2)"});return o.default.createElement("div",r({style:i},n))},e.renderThumbVerticalDefault=function(t){var e=t.style,n=a(t,["style"]),i=r({},e,{cursor:"pointer",borderRadius:"inherit",backgroundColor:"rgba(0,0,0,.2)"});return o.default.createElement("div",r({style:i},n))};var i,o=(i=n(7294))&&i.__esModule?i:{default:i};function a(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}},4608:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(4087),a=v(o),s=v(n(3879)),l=n(7294),c=v(n(5697)),u=v(n(5205)),h=v(n(3305)),d=v(n(8669)),f=v(n(4749)),p=v(n(6401)),g=n(7679),y=n(8682);function v(t){return t&&t.__esModule?t:{default:t}}function m(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function b(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var _=function(t){function e(t){var n;m(this,e);for(var r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];var a=b(this,(n=e.__proto__||Object.getPrototypeOf(e)).call.apply(n,[this,t].concat(i)));return a.getScrollLeft=a.getScrollLeft.bind(a),a.getScrollTop=a.getScrollTop.bind(a),a.getScrollWidth=a.getScrollWidth.bind(a),a.getScrollHeight=a.getScrollHeight.bind(a),a.getClientWidth=a.getClientWidth.bind(a),a.getClientHeight=a.getClientHeight.bind(a),a.getValues=a.getValues.bind(a),a.getThumbHorizontalWidth=a.getThumbHorizontalWidth.bind(a),a.getThumbVerticalHeight=a.getThumbVerticalHeight.bind(a),a.getScrollLeftForOffset=a.getScrollLeftForOffset.bind(a),a.getScrollTopForOffset=a.getScrollTopForOffset.bind(a),a.scrollLeft=a.scrollLeft.bind(a),a.scrollTop=a.scrollTop.bind(a),a.scrollToLeft=a.scrollToLeft.bind(a),a.scrollToTop=a.scrollToTop.bind(a),a.scrollToRight=a.scrollToRight.bind(a),a.scrollToBottom=a.scrollToBottom.bind(a),a.handleTrackMouseEnter=a.handleTrackMouseEnter.bind(a),a.handleTrackMouseLeave=a.handleTrackMouseLeave.bind(a),a.handleHorizontalTrackMouseDown=a.handleHorizontalTrackMouseDown.bind(a),a.handleVerticalTrackMouseDown=a.handleVerticalTrackMouseDown.bind(a),a.handleHorizontalThumbMouseDown=a.handleHorizontalThumbMouseDown.bind(a),a.handleVerticalThumbMouseDown=a.handleVerticalThumbMouseDown.bind(a),a.handleWindowResize=a.handleWindowResize.bind(a),a.handleScroll=a.handleScroll.bind(a),a.handleDrag=a.handleDrag.bind(a),a.handleDragEnd=a.handleDragEnd.bind(a),a.state={didMountUniversal:!1},a}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),i(e,[{key:"componentDidMount",value:function(){this.addListeners(),this.update(),this.componentDidMountUniversal()}},{key:"componentDidMountUniversal",value:function(){this.props.universal&&this.setState({didMountUniversal:!0})}},{key:"componentDidUpdate",value:function(){this.update()}},{key:"componentWillUnmount",value:function(){this.removeListeners(),(0,o.cancel)(this.requestFrame),clearTimeout(this.hideTracksTimeout),clearInterval(this.detectScrollingInterval)}},{key:"getScrollLeft",value:function(){return this.view?this.view.scrollLeft:0}},{key:"getScrollTop",value:function(){return this.view?this.view.scrollTop:0}},{key:"getScrollWidth",value:function(){return this.view?this.view.scrollWidth:0}},{key:"getScrollHeight",value:function(){return this.view?this.view.scrollHeight:0}},{key:"getClientWidth",value:function(){return this.view?this.view.clientWidth:0}},{key:"getClientHeight",value:function(){return this.view?this.view.clientHeight:0}},{key:"getValues",value:function(){var t=this.view||{},e=t.scrollLeft,n=void 0===e?0:e,r=t.scrollTop,i=void 0===r?0:r,o=t.scrollWidth,a=void 0===o?0:o,s=t.scrollHeight,l=void 0===s?0:s,c=t.clientWidth,u=void 0===c?0:c,h=t.clientHeight,d=void 0===h?0:h;return{left:n/(a-u)||0,top:i/(l-d)||0,scrollLeft:n,scrollTop:i,scrollWidth:a,scrollHeight:l,clientWidth:u,clientHeight:d}}},{key:"getThumbHorizontalWidth",value:function(){var t=this.props,e=t.thumbSize,n=t.thumbMinSize,r=this.view,i=r.scrollWidth,o=r.clientWidth,a=(0,f.default)(this.trackHorizontal),s=Math.ceil(o/i*a);return a===s?0:e||Math.max(s,n)}},{key:"getThumbVerticalHeight",value:function(){var t=this.props,e=t.thumbSize,n=t.thumbMinSize,r=this.view,i=r.scrollHeight,o=r.clientHeight,a=(0,p.default)(this.trackVertical),s=Math.ceil(o/i*a);return a===s?0:e||Math.max(s,n)}},{key:"getScrollLeftForOffset",value:function(t){var e=this.view,n=e.scrollWidth,r=e.clientWidth;return t/((0,f.default)(this.trackHorizontal)-this.getThumbHorizontalWidth())*(n-r)}},{key:"getScrollTopForOffset",value:function(t){var e=this.view,n=e.scrollHeight,r=e.clientHeight;return t/((0,p.default)(this.trackVertical)-this.getThumbVerticalHeight())*(n-r)}},{key:"scrollLeft",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.view&&(this.view.scrollLeft=t)}},{key:"scrollTop",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.view&&(this.view.scrollTop=t)}},{key:"scrollToLeft",value:function(){this.view&&(this.view.scrollLeft=0)}},{key:"scrollToTop",value:function(){this.view&&(this.view.scrollTop=0)}},{key:"scrollToRight",value:function(){this.view&&(this.view.scrollLeft=this.view.scrollWidth)}},{key:"scrollToBottom",value:function(){this.view&&(this.view.scrollTop=this.view.scrollHeight)}},{key:"addListeners",value:function(){if("undefined"!=typeof document&&this.view){var t=this.view,e=this.trackHorizontal,n=this.trackVertical,r=this.thumbHorizontal,i=this.thumbVertical;t.addEventListener("scroll",this.handleScroll),(0,h.default)()&&(e.addEventListener("mouseenter",this.handleTrackMouseEnter),e.addEventListener("mouseleave",this.handleTrackMouseLeave),e.addEventListener("mousedown",this.handleHorizontalTrackMouseDown),n.addEventListener("mouseenter",this.handleTrackMouseEnter),n.addEventListener("mouseleave",this.handleTrackMouseLeave),n.addEventListener("mousedown",this.handleVerticalTrackMouseDown),r.addEventListener("mousedown",this.handleHorizontalThumbMouseDown),i.addEventListener("mousedown",this.handleVerticalThumbMouseDown),window.addEventListener("resize",this.handleWindowResize))}}},{key:"removeListeners",value:function(){if("undefined"!=typeof document&&this.view){var t=this.view,e=this.trackHorizontal,n=this.trackVertical,r=this.thumbHorizontal,i=this.thumbVertical;t.removeEventListener("scroll",this.handleScroll),(0,h.default)()&&(e.removeEventListener("mouseenter",this.handleTrackMouseEnter),e.removeEventListener("mouseleave",this.handleTrackMouseLeave),e.removeEventListener("mousedown",this.handleHorizontalTrackMouseDown),n.removeEventListener("mouseenter",this.handleTrackMouseEnter),n.removeEventListener("mouseleave",this.handleTrackMouseLeave),n.removeEventListener("mousedown",this.handleVerticalTrackMouseDown),r.removeEventListener("mousedown",this.handleHorizontalThumbMouseDown),i.removeEventListener("mousedown",this.handleVerticalThumbMouseDown),window.removeEventListener("resize",this.handleWindowResize),this.teardownDragging())}}},{key:"handleScroll",value:function(t){var e=this,n=this.props,r=n.onScroll,i=n.onScrollFrame;r&&r(t),this.update((function(t){var n=t.scrollLeft,r=t.scrollTop;e.viewScrollLeft=n,e.viewScrollTop=r,i&&i(t)})),this.detectScrolling()}},{key:"handleScrollStart",value:function(){var t=this.props.onScrollStart;t&&t(),this.handleScrollStartAutoHide()}},{key:"handleScrollStartAutoHide",value:function(){this.props.autoHide&&this.showTracks()}},{key:"handleScrollStop",value:function(){var t=this.props.onScrollStop;t&&t(),this.handleScrollStopAutoHide()}},{key:"handleScrollStopAutoHide",value:function(){this.props.autoHide&&this.hideTracks()}},{key:"handleWindowResize",value:function(){this.update()}},{key:"handleHorizontalTrackMouseDown",value:function(t){t.preventDefault();var e=t.target,n=t.clientX,r=e.getBoundingClientRect().left,i=this.getThumbHorizontalWidth(),o=Math.abs(r-n)-i/2;this.view.scrollLeft=this.getScrollLeftForOffset(o)}},{key:"handleVerticalTrackMouseDown",value:function(t){t.preventDefault();var e=t.target,n=t.clientY,r=e.getBoundingClientRect().top,i=this.getThumbVerticalHeight(),o=Math.abs(r-n)-i/2;this.view.scrollTop=this.getScrollTopForOffset(o)}},{key:"handleHorizontalThumbMouseDown",value:function(t){t.preventDefault(),this.handleDragStart(t);var e=t.target,n=t.clientX,r=e.offsetWidth,i=e.getBoundingClientRect().left;this.prevPageX=r-(n-i)}},{key:"handleVerticalThumbMouseDown",value:function(t){t.preventDefault(),this.handleDragStart(t);var e=t.target,n=t.clientY,r=e.offsetHeight,i=e.getBoundingClientRect().top;this.prevPageY=r-(n-i)}},{key:"setupDragging",value:function(){(0,s.default)(document.body,g.disableSelectStyle),document.addEventListener("mousemove",this.handleDrag),document.addEventListener("mouseup",this.handleDragEnd),document.onselectstart=d.default}},{key:"teardownDragging",value:function(){(0,s.default)(document.body,g.disableSelectStyleReset),document.removeEventListener("mousemove",this.handleDrag),document.removeEventListener("mouseup",this.handleDragEnd),document.onselectstart=void 0}},{key:"handleDragStart",value:function(t){this.dragging=!0,t.stopImmediatePropagation(),this.setupDragging()}},{key:"handleDrag",value:function(t){if(this.prevPageX){var e=t.clientX,n=-this.trackHorizontal.getBoundingClientRect().left+e-(this.getThumbHorizontalWidth()-this.prevPageX);this.view.scrollLeft=this.getScrollLeftForOffset(n)}if(this.prevPageY){var r=t.clientY,i=-this.trackVertical.getBoundingClientRect().top+r-(this.getThumbVerticalHeight()-this.prevPageY);this.view.scrollTop=this.getScrollTopForOffset(i)}return!1}},{key:"handleDragEnd",value:function(){this.dragging=!1,this.prevPageX=this.prevPageY=0,this.teardownDragging(),this.handleDragEndAutoHide()}},{key:"handleDragEndAutoHide",value:function(){this.props.autoHide&&this.hideTracks()}},{key:"handleTrackMouseEnter",value:function(){this.trackMouseOver=!0,this.handleTrackMouseEnterAutoHide()}},{key:"handleTrackMouseEnterAutoHide",value:function(){this.props.autoHide&&this.showTracks()}},{key:"handleTrackMouseLeave",value:function(){this.trackMouseOver=!1,this.handleTrackMouseLeaveAutoHide()}},{key:"handleTrackMouseLeaveAutoHide",value:function(){this.props.autoHide&&this.hideTracks()}},{key:"showTracks",value:function(){clearTimeout(this.hideTracksTimeout),(0,s.default)(this.trackHorizontal,{opacity:1}),(0,s.default)(this.trackVertical,{opacity:1})}},{key:"hideTracks",value:function(){var t=this;if(!this.dragging&&!this.scrolling&&!this.trackMouseOver){var e=this.props.autoHideTimeout;clearTimeout(this.hideTracksTimeout),this.hideTracksTimeout=setTimeout((function(){(0,s.default)(t.trackHorizontal,{opacity:0}),(0,s.default)(t.trackVertical,{opacity:0})}),e)}}},{key:"detectScrolling",value:function(){var t=this;this.scrolling||(this.scrolling=!0,this.handleScrollStart(),this.detectScrollingInterval=setInterval((function(){t.lastViewScrollLeft===t.viewScrollLeft&&t.lastViewScrollTop===t.viewScrollTop&&(clearInterval(t.detectScrollingInterval),t.scrolling=!1,t.handleScrollStop()),t.lastViewScrollLeft=t.viewScrollLeft,t.lastViewScrollTop=t.viewScrollTop}),100))}},{key:"raf",value:function(t){var e=this;this.requestFrame&&a.default.cancel(this.requestFrame),this.requestFrame=(0,a.default)((function(){e.requestFrame=void 0,t()}))}},{key:"update",value:function(t){var e=this;this.raf((function(){return e._update(t)}))}},{key:"_update",value:function(t){var e=this.props,n=e.onUpdate,r=e.hideTracksWhenNotNeeded,i=this.getValues();if((0,h.default)()){var o=i.scrollLeft,a=i.clientWidth,l=i.scrollWidth,c=(0,f.default)(this.trackHorizontal),u=this.getThumbHorizontalWidth(),d={width:u,transform:"translateX("+o/(l-a)*(c-u)+"px)"},g=i.scrollTop,y=i.clientHeight,v=i.scrollHeight,m=(0,p.default)(this.trackVertical),b=this.getThumbVerticalHeight(),_={height:b,transform:"translateY("+g/(v-y)*(m-b)+"px)"};if(r){var C={visibility:l>a?"visible":"hidden"},w={visibility:v>y?"visible":"hidden"};(0,s.default)(this.trackHorizontal,C),(0,s.default)(this.trackVertical,w)}(0,s.default)(this.thumbHorizontal,d),(0,s.default)(this.thumbVertical,_)}n&&n(i),"function"==typeof t&&t(i)}},{key:"render",value:function(){var t=this,e=(0,h.default)(),n=this.props,i=(n.onScroll,n.onScrollFrame,n.onScrollStart,n.onScrollStop,n.onUpdate,n.renderView),o=n.renderTrackHorizontal,a=n.renderTrackVertical,s=n.renderThumbHorizontal,c=n.renderThumbVertical,d=n.tagName,f=(n.hideTracksWhenNotNeeded,n.autoHide),p=(n.autoHideTimeout,n.autoHideDuration),y=(n.thumbSize,n.thumbMinSize,n.universal),v=n.autoHeight,m=n.autoHeightMin,b=n.autoHeightMax,_=n.style,C=n.children,w=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(n,["onScroll","onScrollFrame","onScrollStart","onScrollStop","onUpdate","renderView","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","tagName","hideTracksWhenNotNeeded","autoHide","autoHideTimeout","autoHideDuration","thumbSize","thumbMinSize","universal","autoHeight","autoHeightMin","autoHeightMax","style","children"]),S=this.state.didMountUniversal,x=r({},g.containerStyleDefault,v&&r({},g.containerStyleAutoHeight,{minHeight:m,maxHeight:b}),_),k=r({},g.viewStyleDefault,{marginRight:e?-e:0,marginBottom:e?-e:0},v&&r({},g.viewStyleAutoHeight,{minHeight:(0,u.default)(m)?"calc("+m+" + "+e+"px)":m+e,maxHeight:(0,u.default)(b)?"calc("+b+" + "+e+"px)":b+e}),v&&y&&!S&&{minHeight:m,maxHeight:b},y&&!S&&g.viewStyleUniversalInitial),P={transition:"opacity "+p+"ms",opacity:0},T=r({},g.trackHorizontalStyleDefault,f&&P,(!e||y&&!S)&&{display:"none"}),E=r({},g.trackVerticalStyleDefault,f&&P,(!e||y&&!S)&&{display:"none"});return(0,l.createElement)(d,r({},w,{style:x,ref:function(e){t.container=e}}),[(0,l.cloneElement)(i({style:k}),{key:"view",ref:function(e){t.view=e}},C),(0,l.cloneElement)(o({style:T}),{key:"trackHorizontal",ref:function(e){t.trackHorizontal=e}},(0,l.cloneElement)(s({style:g.thumbHorizontalStyleDefault}),{ref:function(e){t.thumbHorizontal=e}})),(0,l.cloneElement)(a({style:E}),{key:"trackVertical",ref:function(e){t.trackVertical=e}},(0,l.cloneElement)(c({style:g.thumbVerticalStyleDefault}),{ref:function(e){t.thumbVertical=e}}))])}}]),e}(l.Component);e.default=_,_.propTypes={onScroll:c.default.func,onScrollFrame:c.default.func,onScrollStart:c.default.func,onScrollStop:c.default.func,onUpdate:c.default.func,renderView:c.default.func,renderTrackHorizontal:c.default.func,renderTrackVertical:c.default.func,renderThumbHorizontal:c.default.func,renderThumbVertical:c.default.func,tagName:c.default.string,thumbSize:c.default.number,thumbMinSize:c.default.number,hideTracksWhenNotNeeded:c.default.bool,autoHide:c.default.bool,autoHideTimeout:c.default.number,autoHideDuration:c.default.number,autoHeight:c.default.bool,autoHeightMin:c.default.oneOfType([c.default.number,c.default.string]),autoHeightMax:c.default.oneOfType([c.default.number,c.default.string]),universal:c.default.bool,style:c.default.object,children:c.default.node},_.defaultProps={renderView:y.renderViewDefault,renderTrackHorizontal:y.renderTrackHorizontalDefault,renderTrackVertical:y.renderTrackVerticalDefault,renderThumbHorizontal:y.renderThumbHorizontalDefault,renderThumbVertical:y.renderThumbVerticalDefault,tagName:"div",thumbMinSize:30,hideTracksWhenNotNeeded:!1,autoHide:!1,autoHideTimeout:1e3,autoHideDuration:200,autoHeight:!1,autoHeightMin:0,autoHeightMax:200,universal:!1}},7679:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.containerStyleDefault={position:"relative",overflow:"hidden",width:"100%",height:"100%"},e.containerStyleAutoHeight={height:"auto"},e.viewStyleDefault={position:"absolute",top:0,left:0,right:0,bottom:0,overflow:"scroll",WebkitOverflowScrolling:"touch"},e.viewStyleAutoHeight={position:"relative",top:void 0,left:void 0,right:void 0,bottom:void 0},e.viewStyleUniversalInitial={overflow:"hidden",marginRight:0,marginBottom:0},e.trackHorizontalStyleDefault={position:"absolute",height:6},e.trackVerticalStyleDefault={position:"absolute",width:6},e.thumbHorizontalStyleDefault={position:"relative",display:"block",height:"100%"},e.thumbVerticalStyleDefault={position:"relative",display:"block",width:"100%"},e.disableSelectStyle={userSelect:"none"},e.disableSelectStyleReset={userSelect:""}},1298:(t,e,n)=>{"use strict";e.$B=void 0;var r,i=(r=n(4608))&&r.__esModule?r:{default:r};i.default,e.$B=i.default},6401:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.clientHeight,n=getComputedStyle(t),r=n.paddingTop,i=n.paddingBottom;return e-parseFloat(r)-parseFloat(i)}},4749:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.clientWidth,n=getComputedStyle(t),r=n.paddingLeft,i=n.paddingRight;return e-parseFloat(r)-parseFloat(i)}},3305:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){if(!1!==o)return o;if("undefined"!=typeof document){var t=document.createElement("div");(0,i.default)(t,{width:100,height:100,position:"absolute",top:-9999,overflow:"scroll",MsOverflowStyle:"scrollbar"}),document.body.appendChild(t),o=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}else o=0;return o||0};var r,i=(r=n(3879))&&r.__esModule?r:{default:r},o=!1},5205:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return"string"==typeof t}},8669:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return!1}},4130:(t,e,n)=>{"use strict";e.__esModule=!0,e.didNotFindHydratableTextInstance=e.didNotFindHydratableInstance=e.didNotFindHydratableContainerTextInstance=e.didNotFindHydratableContainerInstance=e.didNotHydrateInstance=e.didNotHydrateContainerInstance=e.didNotMatchHydratedTextInstance=e.didNotMatchHydratedContainerTextInstance=e.hydrateTextInstance=e.hydrateInstance=e.getFirstHydratableChild=e.getNextHydratableSibling=e.canHydrateTextInstance=e.canHydrateInstance=e.supportsHydration=void 0;var r,i=(r=n(7441))&&r.__esModule?r:{default:r};function o(){(0,i.default)(!1,"The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.")}e.supportsHydration=!1,e.canHydrateInstance=o,e.canHydrateTextInstance=o,e.getNextHydratableSibling=o,e.getFirstHydratableChild=o,e.hydrateInstance=o,e.hydrateTextInstance=o,e.didNotMatchHydratedContainerTextInstance=o,e.didNotMatchHydratedTextInstance=o,e.didNotHydrateContainerInstance=o,e.didNotHydrateInstance=o,e.didNotFindHydratableContainerInstance=o,e.didNotFindHydratableContainerTextInstance=o,e.didNotFindHydratableInstance=o,e.didNotFindHydratableTextInstance=o},7559:(t,e,n)=>{"use strict";e.__esModule=!0,e.createHiddenTextInstance=e.cloneUnhiddenInstance=e.cloneHiddenInstance=e.replaceContainerChildren=e.finalizeContainerChildren=e.appendChildToContainerChildSet=e.createContainerChildSet=e.cloneInstance=e.supportsPersistence=void 0;var r,i=(r=n(7441))&&r.__esModule?r:{default:r};function o(){(0,i.default)(!1,"The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.")}e.supportsPersistence=!1,e.cloneInstance=o,e.createContainerChildSet=o,e.appendChildToContainerChildSet=o,e.finalizeContainerChildren=o,e.replaceContainerChildren=o,e.cloneHiddenInstance=o,e.cloneUnhiddenInstance=o,e.createHiddenTextInstance=o},8994:(t,e)=>{"use strict";e.__esModule=!0,e.getClosestInstanceFromNode=function(t){if(t[n])return t[n];for(;!t[n];){if(!t.parentNode)return null;t=t.parentNode}var e=t[n];return 5===e.tag||6===e.tag?e:null};var n="__reactInternalInstance$"+Math.random().toString(36).slice(2)},3286:(t,e,n)=>{"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(7201);n(185),t.exports=r({},i)},7201:(t,e,n)=>{"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var a=n(7294),s=n(7185),l=n(6525),c=n(8994),u=n(3632),h=n(7738),d=h.applyNodeProps,f=h.toggleStrictMode,p=function(t){function e(){return i(this,e),o(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentDidMount=function(){s.isBrowser&&(this._stage=new s.Stage({width:this.props.width,height:this.props.height,container:this._tagRef}),this._setRef(this._stage),d(this._stage,this.props),this._mountNode=y.createContainer(this._stage),y.updateContainer(this.props.children,this._mountNode,this))},e.prototype._setRef=function(t){var e=this.props.forwardedRef;e&&("function"==typeof e?e(t):e.current=t)},e.prototype.componentDidUpdate=function(t){s.isBrowser&&(this._setRef(this._stage),d(this._stage,this.props,t),y.updateContainer(this.props.children,this._mountNode,this))},e.prototype.componentWillUnmount=function(){s.isBrowser&&(this._setRef(null),y.updateContainer(null,this._mountNode,this),this._stage.destroy())},e.prototype.getStage=function(){return this._stage},e.prototype.render=function(){var t=this,e=this.props;return a.createElement("div",{ref:function(e){return t._tagRef=e},accessKey:e.accessKey,className:e.className,role:e.role,style:e.style,tabIndex:e.tabIndex,title:e.title})},e}(a.Component),g={};["Layer","FastLayer","Group","Label","Rect","Circle","Ellipse","Wedge","Line","Sprite","Image","Text","TextPath","Star","Ring","Arc","Tag","Path","RegularPolygon","Arrow","Shape","Transformer"].forEach((function(t){g[t]=t}));var y=l(u);y.injectIntoDevTools({findFiberByHostInstance:c.getClosestInstanceFromNode,bundleType:0,version:a.version,rendererPackageName:"react-konva",getInspectorDataForViewTag:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];console.log(e)}});var v=a.forwardRef((function(t,e){return a.createElement(p,r({},t,{forwardedRef:e}))}));t.exports=r({},g,{__matchRectVersion:!0,Stage:v,useStrictMode:f})},3632:(t,e,n)=>{"use strict";e.__esModule=!0,e.supportsMutation=e.isPrimaryRenderer=e.cancelPassiveEffects=e.schedulePassiveEffects=e.noTimeout=e.cancelTimeout=e.scheduleTimeout=e.cancelDeferredCallback=e.shouldYield=e.scheduleDeferredCallback=e.now=void 0;var r=n(7559);Object.keys(r).forEach((function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return r[t]}})}));var i=n(4130);Object.keys(i).forEach((function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return i[t]}})}));var o=n(3840);Object.defineProperty(e,"now",{enumerable:!0,get:function(){return o.unstable_now}}),Object.defineProperty(e,"scheduleDeferredCallback",{enumerable:!0,get:function(){return o.unstable_scheduleCallback}}),Object.defineProperty(e,"shouldYield",{enumerable:!0,get:function(){return o.unstable_shouldYield}}),Object.defineProperty(e,"cancelDeferredCallback",{enumerable:!0,get:function(){return o.unstable_cancelCallback}}),e.appendInitialChild=function(t,e){"string"!=typeof e?(t.add(e),(0,s.updatePicture)(t)):(0,l.default)(!1,'Don not use plain text as child of Konva.Node. You are using text: "%s"',e)},e.createInstance=function(t,e,n){var r=a.default[t];if(r){var i={},o={};for(var c in e)"on"===c.slice(0,2)?o[c]=e[c]:i[c]=e[c];var u=new r(i);return(0,s.applyNodeProps)(u,o),u}(0,l.default)(u,'Konva has no node with the type "%s". If you use minimal version of react-konva, just import required nodes into Konva: `import "konva/lib/shapes/%s"`  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html',t,t)},e.createTextInstance=function(t,e,n){(0,l.default)(!1,'Text components are not supported for now in ReactKonva. You text is: "'+t+'"')},e.finalizeInitialChildren=function(t,e,n){return!1},e.getPublicInstance=function(t){return t},e.prepareForCommit=function(){return null},e.prepareUpdate=function(t,e,n,r){return h},e.resetAfterCommit=function(){},e.resetTextContent=function(t){},e.shouldDeprioritizeSubtree=function(t,e){return!1},e.getRootHostContext=function(){return u},e.getChildHostContext=function(){return u},e.shouldSetTextContent=function(t,e){return!1},e.appendChild=function(t,e){e.parent===t?e.moveToTop():t.add(e),(0,s.updatePicture)(t)},e.appendChildToContainer=function(t,e){e.parent===t?e.moveToTop():t.add(e),(0,s.updatePicture)(t)},e.insertBefore=d,e.insertInContainerBefore=function(t,e,n){d(t,e,n)},e.removeChild=function(t,e){e.destroy(),e.off(s.EVENTS_NAMESPACE),(0,s.updatePicture)(t)},e.removeChildFromContainer=function(t,e){e.destroy(),e.off(s.EVENTS_NAMESPACE),(0,s.updatePicture)(t)},e.commitTextUpdate=function(t,e,n){(0,l.default)(!1,'Text components are not yet supported in ReactKonva. You text is: "'+n+'"')},e.commitMount=function(t,e,n){},e.commitUpdate=function(t,e,n,r,i){(0,s.applyNodeProps)(t,i,r)},e.hideInstance=function(t){t.hide(),(0,s.updatePicture)(t)},e.hideTextInstance=function(t){},e.unhideInstance=function(t,e){(null==e.visible||e.visible)&&t.show()},e.unhideTextInstance=function(t,e){},e.clearContainer=function(t){};var a=c(n(7185)),s=n(7738),l=c(n(7441));function c(t){return t&&t.__esModule?t:{default:t}}var u={},h={};function d(t,e,n){(0,l.default)(e!==n,"ReactKonva: Can not insert node before itself"),e._remove(),t.add(e),e.setZIndex(n.getZIndex()),(0,s.updatePicture)(t)}a.default.Node.prototype._applyProps=s.applyNodeProps,e.scheduleTimeout=setTimeout,e.cancelTimeout=clearTimeout,e.noTimeout=-1,e.schedulePassiveEffects=o.unstable_scheduleCallback,e.cancelPassiveEffects=o.unstable_cancelCallback,e.isPrimaryRenderer=!1,e.supportsMutation=!0},7441:t=>{"use strict";var e=function(t){if(void 0===t)throw new Error("invariant(...): Second argument must be a string.")};t.exports=function(t,n){for(var r=arguments.length,i=new Array(r>2?r-2:0),o=2;o<r;o++)i[o-2]=arguments[o];if(e(n),!t){var a;if(void 0===n)a=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=0;(a=new Error(n.replace(/%s/g,(function(){return String(i[s++])})))).name="Invariant Violation"}throw a.framesToPop=1,a}}},7738:(t,e)=>{"use strict";e.__esModule=!0,e.toggleStrictMode=function(t){a=t},e.applyNodeProps=function(t,e){var h=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c;if(e===h&&console.error("same props"),!r&&"zIndex"in e&&(console.warn(l),r=!0),!i&&e.draggable){var d=void 0!==e.x||void 0!==e.y,f=e.onDragEnd||e.onDragMove;d&&!f&&(console.warn(s),i=!0)}for(var p in h)if(!n[p]){var g="on"===p.slice(0,2),y=h[p]!==e[p];g&&y&&("content"===(S=p.substr(2).toLowerCase()).substr(0,7)&&(S="content"+S.substr(7,1).toUpperCase()+S.substr(8)),t.off(S,h[p]));var v=!e.hasOwnProperty(p);v&&t.setAttr(p,void 0)}var m=a||e._useStrictMode,b={},_=!1,C={};for(var p in e)if(!n[p]){g="on"===p.slice(0,2);var w=h[p]!==e[p];g&&w&&("content"===(S=p.substr(2).toLowerCase()).substr(0,7)&&(S="content"+S.substr(7,1).toUpperCase()+S.substr(8)),e[p]&&(C[S]=e[p])),!g&&(e[p]!==h[p]||m&&e[p]!==t.getAttr(p))&&(_=!0,b[p]=e[p])}for(var S in _&&(t.setAttrs(b),u(t)),C)t.on(S+o,C[S])},e.updatePicture=u;var n={children:!0,ref:!0,key:!0,style:!0,forwardedRef:!0,unstable_applyCache:!0,unstable_applyDrawHitFromCache:!0},r=!1,i=!1,o=e.EVENTS_NAMESPACE=".react-konva-event",a=!1,s="ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n",l='ReactKonva: You are using "zIndex" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n',c={};function u(t){var e=t.getLayer()||t.getStage();e&&e.batchDraw()}},7287:(t,e,n)=>{(t=n.nmd(t)).exports=function(e){var r={},i=n(7418),o=n(7294),a=n(3840);function s(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,c=60103,u=60106,h=60107,d=60108,f=60114,p=60109,g=60110,y=60112,v=60113,m=60120,b=60115,_=60116,C=60121,w=60129,S=60130,x=60131;if("function"==typeof Symbol&&Symbol.for){var k=Symbol.for;c=k("react.element"),u=k("react.portal"),h=k("react.fragment"),d=k("react.strict_mode"),f=k("react.profiler"),p=k("react.provider"),g=k("react.context"),y=k("react.forward_ref"),v=k("react.suspense"),m=k("react.suspense_list"),b=k("react.memo"),_=k("react.lazy"),C=k("react.block"),k("react.scope"),w=k("react.debug_trace_mode"),S=k("react.offscreen"),x=k("react.legacy_hidden")}var P="function"==typeof Symbol&&Symbol.iterator;function T(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=P&&t[P]||t["@@iterator"])?t:null}function E(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case h:return"Fragment";case u:return"Portal";case f:return"Profiler";case d:return"StrictMode";case v:return"Suspense";case m:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case g:return(t.displayName||"Context")+".Consumer";case p:return(t._context.displayName||"Context")+".Provider";case y:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case b:return E(t.type);case C:return E(t._render);case _:e=t._payload,t=t._init;try{return E(t(e))}catch(t){}}return null}function F(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function A(t){if(F(t)!==t)throw Error(s(188))}function M(t){var e=t.alternate;if(!e){if(null===(e=F(t)))throw Error(s(188));return e!==t?null:t}for(var n=t,r=e;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return A(i),t;if(o===r)return A(i),e;o=o.sibling}throw Error(s(188))}if(n.return!==r.return)n=i,r=o;else{for(var a=!1,l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a)throw Error(s(189))}}if(n.alternate!==r)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?t:e}function O(t){if(!(t=M(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function N(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var D,L=e.getPublicInstance,R=e.getRootHostContext,I=e.getChildHostContext,z=e.prepareForCommit,U=e.resetAfterCommit,G=e.createInstance,B=e.appendInitialChild,H=e.finalizeInitialChildren,j=e.prepareUpdate,V=e.shouldSetTextContent,W=e.createTextInstance,K=e.scheduleTimeout,Y=e.cancelTimeout,q=e.noTimeout,X=e.isPrimaryRenderer,Q=e.supportsMutation,$=e.supportsPersistence,J=e.supportsHydration,Z=e.getInstanceFromNode,tt=e.makeOpaqueHydratingObject,et=e.makeClientId,nt=e.beforeActiveInstanceBlur,rt=e.afterActiveInstanceBlur,it=e.preparePortalMount,ot=e.supportsTestSelectors,at=e.findFiberRoot,st=e.getBoundingRect,lt=e.getTextContent,ct=e.isHiddenSubtree,ut=e.matchAccessibilityRole,ht=e.setFocusIfFocusable,dt=e.setupIntersectionObserver,ft=e.appendChild,pt=e.appendChildToContainer,gt=e.commitTextUpdate,yt=e.commitMount,vt=e.commitUpdate,mt=e.insertBefore,bt=e.insertInContainerBefore,_t=e.removeChild,Ct=e.removeChildFromContainer,wt=e.resetTextContent,St=e.hideInstance,xt=e.hideTextInstance,kt=e.unhideInstance,Pt=e.unhideTextInstance,Tt=e.clearContainer,Et=e.cloneInstance,Ft=e.createContainerChildSet,At=e.appendChildToContainerChildSet,Mt=e.finalizeContainerChildren,Ot=e.replaceContainerChildren,Nt=e.cloneHiddenInstance,Dt=e.cloneHiddenTextInstance,Lt=e.canHydrateInstance,Rt=e.canHydrateTextInstance,It=e.isSuspenseInstancePending,zt=e.isSuspenseInstanceFallback,Ut=e.getNextHydratableSibling,Gt=e.getFirstHydratableChild,Bt=e.hydrateInstance,Ht=e.hydrateTextInstance,jt=e.getNextHydratableInstanceAfterSuspenseInstance,Vt=e.commitHydratedContainer,Wt=e.commitHydratedSuspenseInstance;function Kt(t){if(void 0===D)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);D=e&&e[1]||""}return"\n"+D+t}var Yt=!1;function qt(t,e){if(!t||Yt)return"";Yt=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var r=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){r=t}t.call(e.prototype)}else{try{throw Error()}catch(t){r=t}t()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{Yt=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?Kt(t):""}var Xt=[],Qt=-1;function $t(t){return{current:t}}function Jt(t){0>Qt||(t.current=Xt[Qt],Xt[Qt]=null,Qt--)}function Zt(t,e){Qt++,Xt[Qt]=t.current,t.current=e}var te={},ee=$t(te),ne=$t(!1),re=te;function ie(t,e){var n=t.type.contextTypes;if(!n)return te;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=e[i];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function oe(t){return null!=t.childContextTypes}function ae(){Jt(ne),Jt(ee)}function se(t,e,n){if(ee.current!==te)throw Error(s(168));Zt(ee,e),Zt(ne,n)}function le(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(s(108,E(e)||"Unknown",o));return i({},n,r)}function ce(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||te,re=ee.current,Zt(ee,t),Zt(ne,ne.current),!0}function ue(t,e,n){var r=t.stateNode;if(!r)throw Error(s(169));n?(t=le(t,e,re),r.__reactInternalMemoizedMergedChildContext=t,Jt(ne),Jt(ee),Zt(ee,t)):Jt(ne),Zt(ne,n)}var he=null,de=null;(0,a.unstable_now)();var fe=0,pe=8;function ge(t){if(0!=(1&t))return pe=15,1;if(0!=(2&t))return pe=14,2;if(0!=(4&t))return pe=13,4;var e=24&t;return 0!==e?(pe=12,e):0!=(32&t)?(pe=11,32):0!=(e=192&t)?(pe=10,e):0!=(256&t)?(pe=9,256):0!=(e=3584&t)?(pe=8,e):0!=(4096&t)?(pe=7,4096):0!=(e=4186112&t)?(pe=6,e):0!=(e=62914560&t)?(pe=5,e):67108864&t?(pe=4,67108864):0!=(134217728&t)?(pe=3,134217728):0!=(e=805306368&t)?(pe=2,e):0!=(1073741824&t)?(pe=1,1073741824):(pe=8,t)}function ye(t,e){var n=t.pendingLanes;if(0===n)return pe=0;var r=0,i=0,o=t.expiredLanes,a=t.suspendedLanes,s=t.pingedLanes;if(0!==o)r=o,i=pe=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=ge(l),i=pe):0!=(s&=o)&&(r=ge(s),i=pe)}else 0!=(o=n&~a)?(r=ge(o),i=pe):0!==s&&(r=ge(s),i=pe);if(0===r)return 0;if(r=n&((0>(r=31-we(r))?0:1<<r)<<1)-1,0!==e&&e!==r&&0==(e&a)){if(ge(e),i<=pe)return e;pe=i}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=r;0<e;)i=1<<(n=31-we(e)),r|=t[n],e&=~i;return r}function ve(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function me(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=be(24&~e))?me(10,e):t;case 10:return 0===(t=be(192&~e))?me(8,e):t;case 8:return 0===(t=be(3584&~e))&&0===(t=be(4186112&~e))&&(t=512),t;case 2:return 0===(e=be(805306368&~e))&&(e=268435456),e}throw Error(s(358,t))}function be(t){return t&-t}function _e(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Ce(t,e,n){t.pendingLanes|=e;var r=e-1;t.suspendedLanes&=r,t.pingedLanes&=r,(t=t.eventTimes)[e=31-we(e)]=n}var we=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Se(t)/xe|0)|0},Se=Math.log,xe=Math.LN2,ke=a.unstable_runWithPriority,Pe=a.unstable_scheduleCallback,Te=a.unstable_cancelCallback,Ee=a.unstable_shouldYield,Fe=a.unstable_requestPaint,Ae=a.unstable_now,Me=a.unstable_getCurrentPriorityLevel,Oe=a.unstable_ImmediatePriority,Ne=a.unstable_UserBlockingPriority,De=a.unstable_NormalPriority,Le=a.unstable_LowPriority,Re=a.unstable_IdlePriority,Ie={},ze=void 0!==Fe?Fe:function(){},Ue=null,Ge=null,Be=!1,He=Ae(),je=1e4>He?Ae:function(){return Ae()-He};function Ve(){switch(Me()){case Oe:return 99;case Ne:return 98;case De:return 97;case Le:return 96;case Re:return 95;default:throw Error(s(332))}}function We(t){switch(t){case 99:return Oe;case 98:return Ne;case 97:return De;case 96:return Le;case 95:return Re;default:throw Error(s(332))}}function Ke(t,e){return t=We(t),ke(t,e)}function Ye(t,e,n){return t=We(t),Pe(t,e,n)}function qe(){if(null!==Ge){var t=Ge;Ge=null,Te(t)}Xe()}function Xe(){if(!Be&&null!==Ue){Be=!0;var t=0;try{var e=Ue;Ke(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),Ue=null}catch(e){throw null!==Ue&&(Ue=Ue.slice(t+1)),Pe(Oe,qe),e}finally{Be=!1}}}var Qe=l.ReactCurrentBatchConfig,$e="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},Je=Object.prototype.hasOwnProperty;function Ze(t,e){if($e(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Je.call(e,n[r])||!$e(t[n[r]],e[n[r]]))return!1;return!0}function tn(t){switch(t.tag){case 5:return Kt(t.type);case 16:return Kt("Lazy");case 13:return Kt("Suspense");case 19:return Kt("SuspenseList");case 0:case 2:case 15:return qt(t.type,!1);case 11:return qt(t.type.render,!1);case 22:return qt(t.type._render,!1);case 1:return qt(t.type,!0);default:return""}}function en(t,e){if(t&&t.defaultProps){for(var n in e=i({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var nn=$t(null),rn=null,on=null,an=null;function sn(){an=on=rn=null}function ln(t,e){t=t.type._context,X?(Zt(nn,t._currentValue),t._currentValue=e):(Zt(nn,t._currentValue2),t._currentValue2=e)}function cn(t){var e=nn.current;Jt(nn),t=t.type._context,X?t._currentValue=e:t._currentValue2=e}function un(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function hn(t,e){rn=t,an=on=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Hr=!0),t.firstContext=null)}function dn(t,e){if(an!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(an=t,e=1073741823),e={context:t,observedBits:e,next:null},null===on){if(null===rn)throw Error(s(308));on=e,rn.dependencies={lanes:0,firstContext:e,responders:null}}else on=on.next=e;return X?t._currentValue:t._currentValue2}var fn=!1;function pn(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function gn(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function yn(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function vn(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function mn(t,e){var n=t.updateQueue,r=t.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=e:o=o.next=e}else i=o=e;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function bn(t,e,n,r){var o=t.updateQueue;fn=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var h=t.alternate;if(null!==h){var d=(h=h.updateQueue).lastBaseUpdate;d!==s&&(null===d?h.firstBaseUpdate=u:d.next=u,h.lastBaseUpdate=c)}}if(null!==a){for(d=o.baseState,s=0,h=u=c=null;;){l=a.lane;var f=a.eventTime;if((r&l)===l){null!==h&&(h=h.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var p=t,g=a;switch(l=e,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,l);break t}d=p;break t;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(f,d,l):p))break t;d=i({},d,l);break t;case 2:fn=!0}}null!==a.callback&&(t.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===h?(u=h=f,c=d):h=h.next=f,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===h&&(c=d),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=h,co|=s,t.lanes=s,t.memoizedState=d}}function _n(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var r=t[e],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(s(191,i));i.call(r)}}}var Cn=(new o.Component).refs;function wn(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:i({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var Sn={isMounted:function(t){return!!(t=t._reactInternals)&&F(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=Lo(),i=Ro(t),o=yn(r,i);o.payload=e,null!=n&&(o.callback=n),vn(t,o),Io(t,i,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=Lo(),i=Ro(t),o=yn(r,i);o.tag=1,o.payload=e,null!=n&&(o.callback=n),vn(t,o),Io(t,i,r)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=Lo(),r=Ro(t),i=yn(n,r);i.tag=2,null!=e&&(i.callback=e),vn(t,i),Io(t,r,n)}};function xn(t,e,n,r,i,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&Ze(n,r)&&Ze(i,o))}function kn(t,e,n){var r=!1,i=te,o=e.contextType;return"object"==typeof o&&null!==o?o=dn(o):(i=oe(e)?re:ee.current,o=(r=null!=(r=e.contextTypes))?ie(t,i):te),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=Sn,t.stateNode=e,e._reactInternals=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=o),e}function Pn(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&Sn.enqueueReplaceState(e,e.state,null)}function Tn(t,e,n,r){var i=t.stateNode;i.props=n,i.state=t.memoizedState,i.refs=Cn,pn(t);var o=e.contextType;"object"==typeof o&&null!==o?i.context=dn(o):(o=oe(e)?re:ee.current,i.context=ie(t,o)),bn(t,n,i,r),i.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(wn(t,e,o,n),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&Sn.enqueueReplaceState(i,i.state,null),bn(t,n,i,r),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4)}var En=Array.isArray;function Fn(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var r=n.stateNode}if(!r)throw Error(s(147,t));var i=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===i?e.ref:((e=function(t){var e=r.refs;e===Cn&&(e=r.refs={}),null===t?delete e[i]:e[i]=t})._stringRef=i,e)}if("string"!=typeof t)throw Error(s(284));if(!n._owner)throw Error(s(290,t))}return t}function An(t,e){if("textarea"!==t.type)throw Error(s(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function Mn(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e){return(t=wa(t,e)).index=0,t.sibling=null,t}function o(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.flags=2,n):r:(e.flags=2,n):n}function a(e){return t&&null===e.alternate&&(e.flags=2),e}function l(t,e,n,r){return null===e||6!==e.tag?((e=Pa(n,t.mode,r)).return=t,e):((e=i(e,n)).return=t,e)}function d(t,e,n,r){return null!==e&&e.elementType===n.type?((r=i(e,n.props)).ref=Fn(t,e,n),r.return=t,r):((r=Sa(n.type,n.key,n.props,null,t.mode,r)).ref=Fn(t,e,n),r.return=t,r)}function f(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Ta(n,t.mode,r)).return=t,e):((e=i(e,n.children||[])).return=t,e)}function p(t,e,n,r,o){return null===e||7!==e.tag?((e=xa(n,t.mode,r,o)).return=t,e):((e=i(e,n)).return=t,e)}function g(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Pa(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case c:return(n=Sa(e.type,e.key,e.props,null,t.mode,n)).ref=Fn(t,null,e),n.return=t,n;case u:return(e=Ta(e,t.mode,n)).return=t,e}if(En(e)||T(e))return(e=xa(e,t.mode,n,null)).return=t,e;An(t,e)}return null}function y(t,e,n,r){var i=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case c:return n.key===i?n.type===h?p(t,e,n.props.children,r,i):d(t,e,n,r):null;case u:return n.key===i?f(t,e,n,r):null}if(En(n)||T(n))return null!==i?null:p(t,e,n,r,null);An(t,n)}return null}function v(t,e,n,r,i){if("string"==typeof r||"number"==typeof r)return l(e,t=t.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case c:return t=t.get(null===r.key?n:r.key)||null,r.type===h?p(e,t,r.props.children,i,r.key):d(e,t,r,i);case u:return f(e,t=t.get(null===r.key?n:r.key)||null,r,i)}if(En(r)||T(r))return p(e,t=t.get(n)||null,r,i,null);An(e,r)}return null}function m(i,a,s,l){for(var c=null,u=null,h=a,d=a=0,f=null;null!==h&&d<s.length;d++){h.index>d?(f=h,h=null):f=h.sibling;var p=y(i,h,s[d],l);if(null===p){null===h&&(h=f);break}t&&h&&null===p.alternate&&e(i,h),a=o(p,a,d),null===u?c=p:u.sibling=p,u=p,h=f}if(d===s.length)return n(i,h),c;if(null===h){for(;d<s.length;d++)null!==(h=g(i,s[d],l))&&(a=o(h,a,d),null===u?c=h:u.sibling=h,u=h);return c}for(h=r(i,h);d<s.length;d++)null!==(f=v(h,i,d,s[d],l))&&(t&&null!==f.alternate&&h.delete(null===f.key?d:f.key),a=o(f,a,d),null===u?c=f:u.sibling=f,u=f);return t&&h.forEach((function(t){return e(i,t)})),c}function b(i,a,l,c){var u=T(l);if("function"!=typeof u)throw Error(s(150));if(null==(l=u.call(l)))throw Error(s(151));for(var h=u=null,d=a,f=a=0,p=null,m=l.next();null!==d&&!m.done;f++,m=l.next()){d.index>f?(p=d,d=null):p=d.sibling;var b=y(i,d,m.value,c);if(null===b){null===d&&(d=p);break}t&&d&&null===b.alternate&&e(i,d),a=o(b,a,f),null===h?u=b:h.sibling=b,h=b,d=p}if(m.done)return n(i,d),u;if(null===d){for(;!m.done;f++,m=l.next())null!==(m=g(i,m.value,c))&&(a=o(m,a,f),null===h?u=m:h.sibling=m,h=m);return u}for(d=r(i,d);!m.done;f++,m=l.next())null!==(m=v(d,i,f,m.value,c))&&(t&&null!==m.alternate&&d.delete(null===m.key?f:m.key),a=o(m,a,f),null===h?u=m:h.sibling=m,h=m);return t&&d.forEach((function(t){return e(i,t)})),u}return function(t,r,o,l){var d="object"==typeof o&&null!==o&&o.type===h&&null===o.key;d&&(o=o.props.children);var f="object"==typeof o&&null!==o;if(f)switch(o.$$typeof){case c:t:{for(f=o.key,d=r;null!==d;){if(d.key===f){switch(d.tag){case 7:if(o.type===h){n(t,d.sibling),(r=i(d,o.props.children)).return=t,t=r;break t}break;default:if(d.elementType===o.type){n(t,d.sibling),(r=i(d,o.props)).ref=Fn(t,d,o),r.return=t,t=r;break t}}n(t,d);break}e(t,d),d=d.sibling}o.type===h?((r=xa(o.props.children,t.mode,l,o.key)).return=t,t=r):((l=Sa(o.type,o.key,o.props,null,t.mode,l)).ref=Fn(t,r,o),l.return=t,t=l)}return a(t);case u:t:{for(d=o.key;null!==r;){if(r.key===d){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(t,r.sibling),(r=i(r,o.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Ta(o,t.mode,l)).return=t,t=r}return a(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(t,r.sibling),(r=i(r,o)).return=t,t=r):(n(t,r),(r=Pa(o,t.mode,l)).return=t,t=r),a(t);if(En(o))return m(t,r,o,l);if(T(o))return b(t,r,o,l);if(f&&An(t,o),void 0===o&&!d)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(s(152,E(t.type)||"Component"))}return n(t,r)}}var On=Mn(!0),Nn=Mn(!1),Dn={},Ln=$t(Dn),Rn=$t(Dn),In=$t(Dn);function zn(t){if(t===Dn)throw Error(s(174));return t}function Un(t,e){Zt(In,e),Zt(Rn,t),Zt(Ln,Dn),t=R(e),Jt(Ln),Zt(Ln,t)}function Gn(){Jt(Ln),Jt(Rn),Jt(In)}function Bn(t){var e=zn(In.current),n=zn(Ln.current);n!==(e=I(n,t.type,e))&&(Zt(Rn,t),Zt(Ln,e))}function Hn(t){Rn.current===t&&(Jt(Ln),Jt(Rn))}var jn=$t(0);function Vn(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||It(n)||zt(n)))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Wn=null,Kn=null,Yn=!1;function qn(t,e){var n=_a(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Xn(t,e){switch(t.tag){case 5:return null!==(e=Lt(e,t.type,t.pendingProps))&&(t.stateNode=e,!0);case 6:return null!==(e=Rt(e,t.pendingProps))&&(t.stateNode=e,!0);case 13:default:return!1}}function Qn(t){if(Yn){var e=Kn;if(e){var n=e;if(!Xn(t,e)){if(!(e=Ut(n))||!Xn(t,e))return t.flags=-1025&t.flags|2,Yn=!1,void(Wn=t);qn(Wn,n)}Wn=t,Kn=Gt(e)}else t.flags=-1025&t.flags|2,Yn=!1,Wn=t}}function $n(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Wn=t}function Jn(t){if(!J||t!==Wn)return!1;if(!Yn)return $n(t),Yn=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!V(e,t.memoizedProps))for(e=Kn;e;)qn(t,e),e=Ut(e);if($n(t),13===t.tag){if(!J)throw Error(s(316));if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(s(317));Kn=jt(t)}else Kn=Wn?Ut(t.stateNode):null;return!0}function Zn(){J&&(Kn=Wn=null,Yn=!1)}var tr=[];function er(){for(var t=0;t<tr.length;t++){var e=tr[t];X?e._workInProgressVersionPrimary=null:e._workInProgressVersionSecondary=null}tr.length=0}var nr=l.ReactCurrentDispatcher,rr=l.ReactCurrentBatchConfig,ir=0,or=null,ar=null,sr=null,lr=!1,cr=!1;function ur(){throw Error(s(321))}function hr(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!$e(t[n],e[n]))return!1;return!0}function dr(t,e,n,r,i,o){if(ir=o,or=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,nr.current=null===t||null===t.memoizedState?zr:Ur,t=n(r,i),cr){o=0;do{if(cr=!1,!(25>o))throw Error(s(301));o+=1,sr=ar=null,e.updateQueue=null,nr.current=Gr,t=n(r,i)}while(cr)}if(nr.current=Ir,e=null!==ar&&null!==ar.next,ir=0,sr=ar=or=null,lr=!1,e)throw Error(s(300));return t}function fr(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sr?or.memoizedState=sr=t:sr=sr.next=t,sr}function pr(){if(null===ar){var t=or.alternate;t=null!==t?t.memoizedState:null}else t=ar.next;var e=null===sr?or.memoizedState:sr.next;if(null!==e)sr=e,ar=t;else{if(null===t)throw Error(s(310));t={memoizedState:(ar=t).memoizedState,baseState:ar.baseState,baseQueue:ar.baseQueue,queue:ar.queue,next:null},null===sr?or.memoizedState=sr=t:sr=sr.next=t}return sr}function gr(t,e){return"function"==typeof e?e(t):e}function yr(t){var e=pr(),n=e.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=t;var r=ar,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var a=i.next;i.next=o.next,o.next=a}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=a=o=null,c=i;do{var u=c.lane;if((ir&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===t?c.eagerState:t(r,c.action);else{var h={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(a=l=h,o=r):l=l.next=h,or.lanes|=u,co|=u}c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=a,$e(r,e.memoizedState)||(Hr=!0),e.memoizedState=r,e.baseState=o,e.baseQueue=l,n.lastRenderedState=r}return[e.memoizedState,n.dispatch]}function vr(t){var e=pr(),n=e.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=t;var r=n.dispatch,i=n.pending,o=e.memoizedState;if(null!==i){n.pending=null;var a=i=i.next;do{o=t(o,a.action),a=a.next}while(a!==i);$e(o,e.memoizedState)||(Hr=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,r]}function mr(t,e,n){var r=e._getVersion;r=r(e._source);var i=X?e._workInProgressVersionPrimary:e._workInProgressVersionSecondary;if(null!==i?t=i===r:(t=t.mutableReadLanes,(t=(ir&t)===t)&&(X?e._workInProgressVersionPrimary=r:e._workInProgressVersionSecondary=r,tr.push(e))),t)return n(e._source);throw tr.push(e),Error(s(350))}function br(t,e,n,r){var i=eo;if(null===i)throw Error(s(349));var o=e._getVersion,a=o(e._source),l=nr.current,c=l.useState((function(){return mr(i,e,n)})),u=c[1],h=c[0];c=sr;var d=t.memoizedState,f=d.refs,p=f.getSnapshot,g=d.source;d=d.subscribe;var y=or;return t.memoizedState={refs:f,source:e,subscribe:r},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var t=o(e._source);if(!$e(a,t)){t=n(e._source),$e(h,t)||(u(t),t=Ro(y),i.mutableReadLanes|=t&i.pendingLanes),t=i.mutableReadLanes,i.entangledLanes|=t;for(var r=i.entanglements,s=t;0<s;){var l=31-we(s),c=1<<l;r[l]|=t,s&=~c}}}),[n,e,r]),l.useEffect((function(){return r(e._source,(function(){var t=f.getSnapshot,n=f.setSnapshot;try{n(t(e._source));var r=Ro(y);i.mutableReadLanes|=r&i.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,r]),$e(p,n)&&$e(g,e)&&$e(d,r)||((t={pending:null,dispatch:null,lastRenderedReducer:gr,lastRenderedState:h}).dispatch=u=Rr.bind(null,or,t),c.queue=t,c.baseQueue=null,h=mr(i,e,n),c.memoizedState=c.baseState=h),h}function _r(t,e,n){return br(pr(),t,e,n)}function Cr(t){var e=fr();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:gr,lastRenderedState:t}).dispatch=Rr.bind(null,or,t),[e.memoizedState,t]}function wr(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===(e=or.updateQueue)?(e={lastEffect:null},or.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t),t}function Sr(t){return t={current:t},fr().memoizedState=t}function xr(){return pr().memoizedState}function kr(t,e,n,r){var i=fr();or.flags|=t,i.memoizedState=wr(1|e,n,void 0,void 0===r?null:r)}function Pr(t,e,n,r){var i=pr();r=void 0===r?null:r;var o=void 0;if(null!==ar){var a=ar.memoizedState;if(o=a.destroy,null!==r&&hr(r,a.deps))return void wr(e,n,o,r)}or.flags|=t,i.memoizedState=wr(1|e,n,o,r)}function Tr(t,e){return kr(516,4,t,e)}function Er(t,e){return Pr(516,4,t,e)}function Fr(t,e){return Pr(4,2,t,e)}function Ar(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Mr(t,e,n){return n=null!=n?n.concat([t]):null,Pr(4,2,Ar.bind(null,e,t),n)}function Or(){}function Nr(t,e){var n=pr();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&hr(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function Dr(t,e){var n=pr();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&hr(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Lr(t,e){var n=Ve();Ke(98>n?98:n,(function(){t(!0)})),Ke(97<n?97:n,(function(){var n=rr.transition;rr.transition=1;try{t(!1),e()}finally{rr.transition=n}}))}function Rr(t,e,n){var r=Lo(),i=Ro(t),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),e.pending=o,a=t.alternate,t===or||null!==a&&a===or)cr=lr=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,$e(l,s))return}catch(t){}Io(t,i,r)}}var Ir={readContext:dn,useCallback:ur,useContext:ur,useEffect:ur,useImperativeHandle:ur,useLayoutEffect:ur,useMemo:ur,useReducer:ur,useRef:ur,useState:ur,useDebugValue:ur,useDeferredValue:ur,useTransition:ur,useMutableSource:ur,useOpaqueIdentifier:ur,unstable_isNewReconciler:!1},zr={readContext:dn,useCallback:function(t,e){return fr().memoizedState=[t,void 0===e?null:e],t},useContext:dn,useEffect:Tr,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,kr(4,2,Ar.bind(null,e,t),n)},useLayoutEffect:function(t,e){return kr(4,2,t,e)},useMemo:function(t,e){var n=fr();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=fr();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=Rr.bind(null,or,t),[r.memoizedState,t]},useRef:Sr,useState:Cr,useDebugValue:Or,useDeferredValue:function(t){var e=Cr(t),n=e[0],r=e[1];return Tr((function(){var e=rr.transition;rr.transition=1;try{r(t)}finally{rr.transition=e}}),[t]),n},useTransition:function(){var t=Cr(!1),e=t[0];return Sr(t=Lr.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var r=fr();return r.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},br(r,t,e,n)},useOpaqueIdentifier:function(){if(Yn){var t=!1,e=tt((function(){throw t||(t=!0,n(et())),Error(s(355))})),n=Cr(e)[1];return 0==(2&or.mode)&&(or.flags|=516,wr(5,(function(){n(et())}),void 0,null)),e}return Cr(e=et()),e},unstable_isNewReconciler:!1},Ur={readContext:dn,useCallback:Nr,useContext:dn,useEffect:Er,useImperativeHandle:Mr,useLayoutEffect:Fr,useMemo:Dr,useReducer:yr,useRef:xr,useState:function(){return yr(gr)},useDebugValue:Or,useDeferredValue:function(t){var e=yr(gr),n=e[0],r=e[1];return Er((function(){var e=rr.transition;rr.transition=1;try{r(t)}finally{rr.transition=e}}),[t]),n},useTransition:function(){var t=yr(gr)[0];return[xr().current,t]},useMutableSource:_r,useOpaqueIdentifier:function(){return yr(gr)[0]},unstable_isNewReconciler:!1},Gr={readContext:dn,useCallback:Nr,useContext:dn,useEffect:Er,useImperativeHandle:Mr,useLayoutEffect:Fr,useMemo:Dr,useReducer:vr,useRef:xr,useState:function(){return vr(gr)},useDebugValue:Or,useDeferredValue:function(t){var e=vr(gr),n=e[0],r=e[1];return Er((function(){var e=rr.transition;rr.transition=1;try{r(t)}finally{rr.transition=e}}),[t]),n},useTransition:function(){var t=vr(gr)[0];return[xr().current,t]},useMutableSource:_r,useOpaqueIdentifier:function(){return vr(gr)[0]},unstable_isNewReconciler:!1},Br=l.ReactCurrentOwner,Hr=!1;function jr(t,e,n,r){e.child=null===t?Nn(e,null,n,r):On(e,t.child,n,r)}function Vr(t,e,n,r,i){n=n.render;var o=e.ref;return hn(e,i),r=dr(t,e,n,r,o,i),null===t||Hr?(e.flags|=1,jr(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,ci(t,e,i))}function Wr(t,e,n,r,i,o){if(null===t){var a=n.type;return"function"!=typeof a||Ca(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Sa(n.type,null,r,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Kr(t,e,a,r,i,o))}return a=t.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Ze)(i,r)&&t.ref===e.ref)?ci(t,e,o):(e.flags|=1,(t=wa(a,r)).ref=e.ref,t.return=e,e.child=t)}function Kr(t,e,n,r,i,o){if(null!==t&&Ze(t.memoizedProps,r)&&t.ref===e.ref){if(Hr=!1,0==(o&i))return e.lanes=t.lanes,ci(t,e,o);0!=(16384&t.flags)&&(Hr=!0)}return Xr(t,e,n,r,o)}function Yr(t,e,n){var r=e.pendingProps,i=r.children,o=null!==t?t.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},Wo(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},Wo(0,t),null;e.memoizedState={baseLanes:0},Wo(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,e.memoizedState=null):r=n,Wo(0,r);return jr(t,e,i,n),e.child}function qr(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Xr(t,e,n,r,i){var o=oe(n)?re:ee.current;return o=ie(e,o),hn(e,i),n=dr(t,e,n,r,o,i),null===t||Hr?(e.flags|=1,jr(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,ci(t,e,i))}function Qr(t,e,n,r,i){if(oe(n)){var o=!0;ce(e)}else o=!1;if(hn(e,i),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),kn(e,n,r),Tn(e,n,r,i),r=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?dn(c):ie(e,c=oe(n)?re:ee.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;h||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&Pn(e,a,r,c),fn=!1;var d=e.memoizedState;a.state=d,bn(e,r,a,i),l=e.memoizedState,s!==r||d!==l||ne.current||fn?("function"==typeof u&&(wn(e,n,u,r),l=e.memoizedState),(s=fn||xn(e,n,s,r,d,l,c))?(h||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(e.flags|=4),r=!1)}else{a=e.stateNode,gn(t,e),s=e.memoizedProps,c=e.type===e.elementType?s:en(e.type,s),a.props=c,h=e.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?dn(l):ie(e,l=oe(n)?re:ee.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==h||d!==l)&&Pn(e,a,r,l),fn=!1,d=e.memoizedState,a.state=d,bn(e,r,a,i);var p=e.memoizedState;s!==h||d!==p||ne.current||fn?("function"==typeof f&&(wn(e,n,f,r),p=e.memoizedState),(c=fn||xn(e,n,c,r,d,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),e.memoizedProps=r,e.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),r=!1)}return $r(t,e,n,r,o,i)}function $r(t,e,n,r,i,o){qr(t,e);var a=0!=(64&e.flags);if(!r&&!a)return i&&ue(e,n,!1),ci(t,e,o);r=e.stateNode,Br.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.flags|=1,null!==t&&a?(e.child=On(e,t.child,null,o),e.child=On(e,null,s,o)):jr(t,e,s,o),e.memoizedState=r.state,i&&ue(e,n,!0),e.child}function Jr(t){var e=t.stateNode;e.pendingContext?se(0,e.pendingContext,e.pendingContext!==e.context):e.context&&se(0,e.context,!1),Un(t,e.containerInfo)}var Zr,ti,ei,ni,ri={dehydrated:null,retryLane:0};function ii(t,e,n){var r,i=e.pendingProps,o=jn.current,a=!1;return(r=0!=(64&e.flags))||(r=(null===t||null!==t.memoizedState)&&0!=(2&o)),r?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),Zt(jn,1&o),null===t?(void 0!==i.fallback&&Qn(e),t=i.children,o=i.fallback,a?(t=oi(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=ri,t):"number"==typeof i.unstable_expectedLoadTime?(t=oi(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=ri,e.lanes=33554432,t):((n=ka({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,a?(i=function(t,e,n,r,i){var o=e.mode,a=t.child;t=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&e.child!==a?((n=e.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):n=wa(a,s),null!==t?r=wa(t,r):(r=xa(r,o,i,null)).flags|=2,r.return=e,n.return=e,n.sibling=r,e.child=n,r}(t,e,i.children,i.fallback,n),a=e.child,o=t.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=t.childLanes&~n,e.memoizedState=ri,i):(n=function(t,e,n,r){var i=t.child;return t=i.sibling,n=wa(i,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=r),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,i.children,n),e.memoizedState=null,n))}function oi(t,e,n,r){var i=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=ka(e,i,0,null),n=xa(n,i,r,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function ai(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),un(t.return,e)}function si(t,e,n,r,i,o){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function li(t,e,n){var r=e.pendingProps,i=r.revealOrder,o=r.tail;if(jr(t,e,r.children,n),0!=(2&(r=jn.current)))r=1&r|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&ai(t,n);else if(19===t.tag)ai(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(Zt(jn,r),0==(2&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(n=e.child,i=null;null!==n;)null!==(t=n.alternate)&&null===Vn(t)&&(i=n),n=n.sibling;null===(n=i)?(i=e.child,e.child=null):(i=n.sibling,n.sibling=null),si(e,!1,i,n,o,e.lastEffect);break;case"backwards":for(n=null,i=e.child,e.child=null;null!==i;){if(null!==(t=i.alternate)&&null===Vn(t)){e.child=i;break}t=i.sibling,i.sibling=n,n=i,i=t}si(e,!0,n,null,o,e.lastEffect);break;case"together":si(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function ci(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),co|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(s(153));if(null!==e.child){for(n=wa(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=wa(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function ui(t){t.flags|=4}if(Q)Zr=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)B(t,n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ti=function(){},ei=function(t,e,n,r,i){if((t=t.memoizedProps)!==r){var o=e.stateNode,a=zn(Ln.current);n=j(o,n,t,r,i,a),(e.updateQueue=n)&&ui(e)}},ni=function(t,e,n,r){n!==r&&ui(e)};else if($){Zr=function(t,e,n,r){for(var i=e.child;null!==i;){if(5===i.tag){var o=i.stateNode;n&&r&&(o=Nt(o,i.type,i.memoizedProps,i)),B(t,o)}else if(6===i.tag)o=i.stateNode,n&&r&&(o=Dt(o,i.memoizedProps,i)),B(t,o);else if(4!==i.tag){if(13===i.tag&&0!=(4&i.flags)&&(o=null!==i.memoizedState)){var a=i.child;if(null!==a&&(null!==a.child&&(a.child.return=a,Zr(t,a,!0,o)),null!==(o=a.sibling))){o.return=i,i=o;continue}}if(null!==i.child){i.child.return=i,i=i.child;continue}}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}};var hi=function(t,e,n,r){for(var i=e.child;null!==i;){if(5===i.tag){var o=i.stateNode;n&&r&&(o=Nt(o,i.type,i.memoizedProps,i)),At(t,o)}else if(6===i.tag)o=i.stateNode,n&&r&&(o=Dt(o,i.memoizedProps,i)),At(t,o);else if(4!==i.tag){if(13===i.tag&&0!=(4&i.flags)&&(o=null!==i.memoizedState)){var a=i.child;if(null!==a&&(null!==a.child&&(a.child.return=a,hi(t,a,!0,o)),null!==(o=a.sibling))){o.return=i,i=o;continue}}if(null!==i.child){i.child.return=i,i=i.child;continue}}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}};ti=function(t){var e=t.stateNode;if(null!==t.firstEffect){var n=e.containerInfo,r=Ft(n);hi(r,t,!1,!1),e.pendingChildren=r,ui(t),Mt(n,r)}},ei=function(t,e,n,r,i){var o=t.stateNode,a=t.memoizedProps;if((t=null===e.firstEffect)&&a===r)e.stateNode=o;else{var s=e.stateNode,l=zn(Ln.current),c=null;a!==r&&(c=j(s,n,a,r,i,l)),t&&null===c?e.stateNode=o:(o=Et(o,c,n,a,r,e,t,s),H(o,n,r,i,l)&&ui(e),e.stateNode=o,t?ui(e):Zr(o,e,!1,!1))}},ni=function(t,e,n,r){n!==r?(t=zn(In.current),n=zn(Ln.current),e.stateNode=W(r,t,n,e),ui(e)):e.stateNode=t.stateNode}}else ti=function(){},ei=function(){},ni=function(){};function di(t,e){if(!Yn)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e||null===t.tail?t.tail=null:t.tail.sibling=null:r.sibling=null}}function fi(t,e,n){var r=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return oe(e.type)&&ae(),null;case 3:return Gn(),Jt(ne),Jt(ee),er(),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(Jn(e)?ui(e):r.hydrate||(e.flags|=256)),ti(e),null;case 5:Hn(e);var i=zn(In.current);if(n=e.type,null!==t&&null!=e.stateNode)ei(t,e,n,r,i),t.ref!==e.ref&&(e.flags|=128);else{if(!r){if(null===e.stateNode)throw Error(s(166));return null}if(t=zn(Ln.current),Jn(e)){if(!J)throw Error(s(175));t=Bt(e.stateNode,e.type,e.memoizedProps,i,t,e),e.updateQueue=t,null!==t&&ui(e)}else{var o=G(n,r,i,t,e);Zr(o,e,!1,!1),e.stateNode=o,H(o,n,r,i,t)&&ui(e)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)ni(t,e,t.memoizedProps,r);else{if("string"!=typeof r&&null===e.stateNode)throw Error(s(166));if(t=zn(In.current),i=zn(Ln.current),Jn(e)){if(!J)throw Error(s(176));Ht(e.stateNode,e.memoizedProps,e)&&ui(e)}else e.stateNode=W(r,t,i,e)}return null;case 13:return Jt(jn),r=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(r=null!==r,i=!1,null===t?void 0!==e.memoizedProps.fallback&&Jn(e):i=null!==t.memoizedState,r&&!i&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&jn.current)?0===ao&&(ao=3):(0!==ao&&3!==ao||(ao=4),null===eo||0==(134217727&co)&&0==(134217727&uo)||Bo(eo,ro))),$&&r&&(e.flags|=4),Q&&(r||i)&&(e.flags|=4),null);case 4:return Gn(),ti(e),null===t&&it(e.stateNode.containerInfo),null;case 10:return cn(e),null;case 17:return oe(e.type)&&ae(),null;case 19:if(Jt(jn),null===(r=e.memoizedState))return null;if(i=0!=(64&e.flags),null===(o=r.rendering))if(i)di(r,!1);else{if(0!==ao||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(o=Vn(t))){for(e.flags|=64,di(r,!1),null!==(t=o.updateQueue)&&(e.updateQueue=t,e.flags|=4),null===r.lastEffect&&(e.firstEffect=null),e.lastEffect=r.lastEffect,t=n,r=e.child;null!==r;)n=t,(i=r).flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(o=i.alternate)?(i.childLanes=0,i.lanes=n,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=o.childLanes,i.lanes=o.lanes,i.child=o.child,i.memoizedProps=o.memoizedProps,i.memoizedState=o.memoizedState,i.updateQueue=o.updateQueue,i.type=o.type,n=o.dependencies,i.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),r=r.sibling;return Zt(jn,1&jn.current|2),e.child}t=t.sibling}null!==r.tail&&je()>go&&(e.flags|=64,i=!0,di(r,!1),e.lanes=33554432)}else{if(!i)if(null!==(t=Vn(o))){if(e.flags|=64,i=!0,null!==(t=t.updateQueue)&&(e.updateQueue=t,e.flags|=4),di(r,!0),null===r.tail&&"hidden"===r.tailMode&&!o.alternate&&!Yn)return null!==(e=e.lastEffect=r.lastEffect)&&(e.nextEffect=null),null}else 2*je()-r.renderingStartTime>go&&1073741824!==n&&(e.flags|=64,i=!0,di(r,!1),e.lanes=33554432);r.isBackwards?(o.sibling=e.child,e.child=o):(null!==(t=r.last)?t.sibling=o:e.child=o,r.last=o)}return null!==r.tail?(t=r.tail,r.rendering=t,r.tail=t.sibling,r.lastEffect=e.lastEffect,r.renderingStartTime=je(),t.sibling=null,e=jn.current,Zt(jn,i?1&e|2:1&e),t):null;case 23:case 24:return Ko(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(e.flags|=4),null}throw Error(s(156,e.tag))}function pi(t){switch(t.tag){case 1:oe(t.type)&&ae();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Gn(),Jt(ne),Jt(ee),er(),0!=(64&(e=t.flags)))throw Error(s(285));return t.flags=-4097&e|64,t;case 5:return Hn(t),null;case 13:return Jt(jn),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return Jt(jn),null;case 4:return Gn(),null;case 10:return cn(t),null;case 23:case 24:return Ko(),null;default:return null}}function gi(t,e){try{var n="",r=e;do{n+=tn(r),r=r.return}while(r);var i=n}catch(t){i="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:i}}function yi(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}var vi="function"==typeof WeakMap?WeakMap:Map;function mi(t,e,n){(n=yn(-1,n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){bo||(bo=!0,_o=r),yi(0,e)},n}function bi(t,e,n){(n=yn(-1,n)).tag=3;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var i=e.value;n.payload=function(){return yi(0,e),r(i)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Co?Co=new Set([this]):Co.add(this),yi(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var _i="function"==typeof WeakSet?WeakSet:Set;function Ci(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){ca(t,e)}else e.current=null}function wi(t,e){switch(e.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,r=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:en(e.type,n),r),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(Q&&256&e.flags&&Tt(e.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(s(163))}function Si(t,e){if(null!==(e=null!==(e=e.updateQueue)?e.lastEffect:null)){var n=e=e.next;do{if((n.tag&t)===t){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==e)}}function xi(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var r=t.create;t.destroy=r()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var i=t;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(aa(n,t),oa(n,t)),t=r}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(r=n.elementType===n.type?e.memoizedProps:en(n.type,e.memoizedProps),t.componentDidUpdate(r,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&_n(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:t=L(n.child.stateNode);break;case 1:t=n.child.stateNode}_n(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&yt(t,n.type,n.memoizedProps,n));case 6:case 4:case 12:return;case 13:return void(J&&null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(s(163))}function ki(t,e){if(Q)for(var n=t;;){if(5===n.tag){var r=n.stateNode;e?St(r):kt(n.stateNode,n.memoizedProps)}else if(6===n.tag)r=n.stateNode,e?xt(r):Pt(r,n.memoizedProps);else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Pi(t,e){if(de&&"function"==typeof de.onCommitFiberUnmount)try{de.onCommitFiberUnmount(he,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))aa(e,n);else{r=e;try{i()}catch(t){ca(r,t)}}n=n.next}while(n!==t)}break;case 1:if(Ci(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ca(e,t)}break;case 5:Ci(e);break;case 4:Q?Ni(t,e):$&&$&&(e=e.stateNode.containerInfo,t=Ft(e),Ot(e,t))}}function Ti(t,e){for(var n=e;;)if(Pi(t,n),null===n.child||Q&&4===n.tag){if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}else n.child.return=n,n=n.child}function Ei(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function Fi(t){return 5===t.tag||3===t.tag||4===t.tag}function Ai(t){if(Q){t:{for(var e=t.return;null!==e;){if(Fi(e))break t;e=e.return}throw Error(s(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:e=e.containerInfo,r=!0;break;default:throw Error(s(161))}16&n.flags&&(wt(e),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||Fi(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}r?Mi(t,n,e):Oi(t,n,e)}}function Mi(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?bt(n,t,e):pt(n,t);else if(4!==r&&null!==(t=t.child))for(Mi(t,e,n),t=t.sibling;null!==t;)Mi(t,e,n),t=t.sibling}function Oi(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?mt(n,t,e):ft(n,t);else if(4!==r&&null!==(t=t.child))for(Oi(t,e,n),t=t.sibling;null!==t;)Oi(t,e,n),t=t.sibling}function Ni(t,e){for(var n,r,i=e,o=!1;;){if(!o){o=i.return;t:for(;;){if(null===o)throw Error(s(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break t;case 3:case 4:n=n.containerInfo,r=!0;break t}o=o.return}o=!0}if(5===i.tag||6===i.tag)Ti(t,i),r?Ct(n,i.stateNode):_t(n,i.stateNode);else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(Pi(t,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function Di(t,e){if(Q){switch(e.tag){case 0:case 11:case 14:case 15:case 22:return void Si(3,e);case 1:return;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps;t=null!==t?t.memoizedProps:r;var i=e.type,o=e.updateQueue;e.updateQueue=null,null!==o&&vt(n,o,i,t,r,e)}return;case 6:if(null===e.stateNode)throw Error(s(162));return n=e.memoizedProps,void gt(e.stateNode,null!==t?t.memoizedProps:n,n);case 3:return void(J&&(e=e.stateNode,e.hydrate&&(e.hydrate=!1,Vt(e.containerInfo))));case 12:return;case 13:return Li(e),void Ri(e);case 19:return void Ri(e);case 17:return;case 23:case 24:return void ki(e,null!==e.memoizedState)}throw Error(s(163))}switch(e.tag){case 0:case 11:case 14:case 15:case 22:return void Si(3,e);case 12:return;case 13:return Li(e),void Ri(e);case 19:return void Ri(e);case 3:J&&(n=e.stateNode).hydrate&&(n.hydrate=!1,Vt(n.containerInfo));break;case 23:case 24:return}t:if($){switch(e.tag){case 1:case 5:case 6:case 20:break t;case 3:case 4:e=e.stateNode,Ot(e.containerInfo,e.pendingChildren);break t}throw Error(s(163))}}function Li(t){null!==t.memoizedState&&(po=je(),Q&&ki(t.child,!0))}function Ri(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new _i),e.forEach((function(e){var r=ha.bind(null,t,e);n.has(e)||(n.add(e),e.then(r,r))}))}}function Ii(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var zi=0,Ui=1,Gi=2,Bi=3,Hi=4;if("function"==typeof Symbol&&Symbol.for){var ji=Symbol.for;zi=ji("selector.component"),Ui=ji("selector.has_pseudo_class"),Gi=ji("selector.role"),Bi=ji("selector.test_id"),Hi=ji("selector.text")}function Vi(t){var e=Z(t);if(null!=e){if("string"!=typeof e.memoizedProps["data-testname"])throw Error(s(364));return e}if(null===(t=at(t)))throw Error(s(362));return t.stateNode.current}function Wi(t,e){switch(e.$$typeof){case zi:if(t.type===e.value)return!0;break;case Ui:t:{e=e.value,t=[t,0];for(var n=0;n<t.length;){var r=t[n++],i=t[n++],o=e[i];if(5!==r.tag||!ct(r)){for(;null!=o&&Wi(r,o);)o=e[++i];if(i===e.length){e=!0;break t}for(r=r.child;null!==r;)t.push(r,i),r=r.sibling}}e=!1}return e;case Gi:if(5===t.tag&&ut(t.stateNode,e.value))return!0;break;case Hi:if((5===t.tag||6===t.tag)&&null!==(t=lt(t))&&0<=t.indexOf(e.value))return!0;break;case Bi:if(5===t.tag&&"string"==typeof(t=t.memoizedProps["data-testname"])&&t.toLowerCase()===e.value.toLowerCase())return!0;break;default:throw Error(s(365,e))}return!1}function Ki(t){switch(t.$$typeof){case zi:return"<"+(E(t.value)||"Unknown")+">";case Ui:return":has("+(Ki(t)||"")+")";case Gi:return'[role="'+t.value+'"]';case Hi:return'"'+t.value+'"';case Bi:return'[data-testname="'+t.value+'"]';default:throw Error(s(365,t))}}function Yi(t,e){var n=[];t=[t,0];for(var r=0;r<t.length;){var i=t[r++],o=t[r++],a=e[o];if(5!==i.tag||!ct(i)){for(;null!=a&&Wi(i,a);)a=e[++o];if(o===e.length)n.push(i);else for(i=i.child;null!==i;)t.push(i,o),i=i.sibling}}return n}function qi(t,e){if(!ot)throw Error(s(363));t=Yi(t=Vi(t),e),e=[],t=Array.from(t);for(var n=0;n<t.length;){var r=t[n++];if(5===r.tag)ct(r)||e.push(r.stateNode);else for(r=r.child;null!==r;)t.push(r),r=r.sibling}return e}var Xi=null,Qi=Math.ceil,$i=l.ReactCurrentDispatcher,Ji=l.ReactCurrentOwner,Zi=l.IsSomeRendererActing,to=0,eo=null,no=null,ro=0,io=0,oo=$t(0),ao=0,so=null,lo=0,co=0,uo=0,ho=0,fo=null,po=0,go=1/0;function yo(){go=je()+500}var vo,mo=null,bo=!1,_o=null,Co=null,wo=!1,So=null,xo=90,ko=[],Po=[],To=null,Eo=0,Fo=null,Ao=-1,Mo=0,Oo=0,No=null,Do=!1;function Lo(){return 0!=(48&to)?je():-1!==Ao?Ao:Ao=je()}function Ro(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Ve()?1:2;if(0===Mo&&(Mo=lo),0!==Qe.transition){0!==Oo&&(Oo=null!==fo?fo.pendingLanes:0),t=Mo;var e=4186112&~Oo;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Ve(),t=me(0!=(4&to)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),Mo)}function Io(t,e,n){if(50<Eo)throw Eo=0,Fo=null,Error(s(185));if(null===(t=zo(t,e)))return null;Ce(t,e,n),t===eo&&(uo|=e,4===ao&&Bo(t,ro));var r=Ve();1===e?0!=(8&to)&&0==(48&to)?Ho(t):(Uo(t,n),0===to&&(yo(),qe())):(0==(4&to)||98!==r&&99!==r||(null===To?To=new Set([t]):To.add(t)),Uo(t,n)),fo=t}function zo(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function Uo(t,e){for(var n=t.callbackNode,r=t.suspendedLanes,i=t.pingedLanes,o=t.expirationTimes,a=t.pendingLanes;0<a;){var l=31-we(a),c=1<<l,u=o[l];if(-1===u){if(0==(c&r)||0!=(c&i)){u=e,ge(c);var h=pe;o[l]=10<=h?u+250:6<=h?u+5e3:-1}}else u<=e&&(t.expiredLanes|=c);a&=~c}if(r=ye(t,t===eo?ro:0),e=pe,0===r)null!==n&&(n!==Ie&&Te(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Ie&&Te(n)}15===e?(n=Ho.bind(null,t),null===Ue?(Ue=[n],Ge=Pe(Oe,Xe)):Ue.push(n),n=Ie):n=14===e?Ye(99,Ho.bind(null,t)):Ye(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(s(358,t))}}(e),Go.bind(null,t)),t.callbackPriority=e,t.callbackNode=n}}function Go(t){if(Ao=-1,Oo=Mo=0,0!=(48&to))throw Error(s(327));var e=t.callbackNode;if(ia()&&t.callbackNode!==e)return null;var n=ye(t,t===eo?ro:0);if(0===n)return null;var r=n,i=to;to|=16;var o=Xo();for(eo===t&&ro===r||(yo(),Yo(t,r));;)try{Jo();break}catch(e){qo(t,e)}if(sn(),$i.current=o,to=i,null!==no?r=0:(eo=null,ro=0,r=ao),0!=(lo&uo))Yo(t,0);else if(0!==r){if(2===r&&(to|=64,t.hydrate&&(t.hydrate=!1,Tt(t.containerInfo)),0!==(n=ve(t))&&(r=Qo(t,n))),1===r)throw e=so,Yo(t,0),Bo(t,n),Uo(t,je()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,r){case 0:case 1:throw Error(s(345));case 2:ea(t);break;case 3:if(Bo(t,n),(62914560&n)===n&&10<(r=po+500-je())){if(0!==ye(t,0))break;if(((i=t.suspendedLanes)&n)!==n){Lo(),t.pingedLanes|=t.suspendedLanes&i;break}t.timeoutHandle=K(ea.bind(null,t),r);break}ea(t);break;case 4:if(Bo(t,n),(4186112&n)===n)break;for(r=t.eventTimes,i=-1;0<n;){var a=31-we(n);o=1<<a,(a=r[a])>i&&(i=a),n&=~o}if(n=i,10<(n=(120>(n=je()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Qi(n/1960))-n)){t.timeoutHandle=K(ea.bind(null,t),n);break}ea(t);break;case 5:ea(t);break;default:throw Error(s(329))}}return Uo(t,je()),t.callbackNode===e?Go.bind(null,t):null}function Bo(t,e){for(e&=~ho,e&=~uo,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-we(e),r=1<<n;t[n]=-1,e&=~r}}function Ho(t){if(0!=(48&to))throw Error(s(327));if(ia(),t===eo&&0!=(t.expiredLanes&ro)){var e=ro,n=Qo(t,e);0!=(lo&uo)&&(n=Qo(t,e=ye(t,e)))}else n=Qo(t,e=ye(t,0));if(0!==t.tag&&2===n&&(to|=64,t.hydrate&&(t.hydrate=!1,Tt(t.containerInfo)),0!==(e=ve(t))&&(n=Qo(t,e))),1===n)throw n=so,Yo(t,0),Bo(t,e),Uo(t,je()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,ea(t),Uo(t,je()),null}function jo(t,e){var n=to;to|=1;try{return t(e)}finally{0===(to=n)&&(yo(),qe())}}function Vo(t,e){var n=to;if(0!=(48&n))return t(e);to|=1;try{if(t)return Ke(99,t.bind(null,e))}finally{to=n,qe()}}function Wo(t,e){Zt(oo,io),io|=e,lo|=e}function Ko(){io=oo.current,Jt(oo)}function Yo(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(n!==q&&(t.timeoutHandle=q,Y(n)),null!==no)for(n=no.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ae();break;case 3:Gn(),Jt(ne),Jt(ee),er();break;case 5:Hn(r);break;case 4:Gn();break;case 13:case 19:Jt(jn);break;case 10:cn(r);break;case 23:case 24:Ko()}n=n.return}eo=t,no=wa(t.current,null),ro=io=lo=e,ao=0,so=null,ho=uo=co=0}function qo(t,e){for(;;){var n=no;try{if(sn(),nr.current=Ir,lr){for(var r=or.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}lr=!1}if(ir=0,sr=ar=or=null,cr=!1,Ji.current=null,null===n||null===n.return){ao=1,so=e,no=null;break}t:{var o=t,a=n.return,s=n,l=e;if(e=ro,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var h=0!=(1&jn.current),d=a;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var g=d.memoizedProps;f=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!h)}}if(f){var y=d.updateQueue;if(null===y){var v=new Set;v.add(c),d.updateQueue=v}else y.add(c);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var m=yn(-1,1);m.tag=2,vn(s,m)}s.lanes|=1;break t}l=void 0,s=e;var b=o.pingCache;if(null===b?(b=o.pingCache=new vi,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(s)){l.add(s);var _=ua.bind(null,o,c,s);c.then(_,_)}d.flags|=4096,d.lanes=e;break t}d=d.return}while(null!==d);l=Error((E(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==ao&&(ao=2),l=gi(l,s),d=a;do{switch(d.tag){case 3:o=l,d.flags|=4096,e&=-e,d.lanes|=e,mn(d,mi(0,o,e));break t;case 1:o=l;var C=d.type,w=d.stateNode;if(0==(64&d.flags)&&("function"==typeof C.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Co||!Co.has(w)))){d.flags|=4096,e&=-e,d.lanes|=e,mn(d,bi(d,o,e));break t}}d=d.return}while(null!==d)}ta(n)}catch(t){e=t,no===n&&null!==n&&(no=n=n.return);continue}break}}function Xo(){var t=$i.current;return $i.current=Ir,null===t?Ir:t}function Qo(t,e){var n=to;to|=16;var r=Xo();for(eo===t&&ro===e||Yo(t,e);;)try{$o();break}catch(e){qo(t,e)}if(sn(),to=n,$i.current=r,null!==no)throw Error(s(261));return eo=null,ro=0,ao}function $o(){for(;null!==no;)Zo(no)}function Jo(){for(;null!==no&&!Ee();)Zo(no)}function Zo(t){var e=vo(t.alternate,t,io);t.memoizedProps=t.pendingProps,null===e?ta(t):no=e,Ji.current=null}function ta(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=fi(n,e,io)))return void(no=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&io)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=pi(e)))return n.flags&=2047,void(no=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(no=e);no=e=t}while(null!==e);0===ao&&(ao=5)}function ea(t){var e=Ve();return Ke(99,na.bind(null,t,e)),null}function na(t,e){do{ia()}while(null!==So);if(0!=(48&to))throw Error(s(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(s(177));t.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=t.pendingLanes&~i;t.pendingLanes=i,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=i,t.mutableReadLanes&=i,t.entangledLanes&=i,i=t.entanglements;for(var a=t.eventTimes,l=t.expirationTimes;0<o;){var c=31-we(o),u=1<<c;i[c]=0,a[c]=-1,l[c]=-1,o&=~u}if(null!==To&&0==(24&r)&&To.has(t)&&To.delete(t),t===eo&&(no=eo=null,ro=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){i=to,to|=32,Ji.current=null,No=z(t.containerInfo),Do=!1,mo=r;do{try{ra()}catch(t){if(null===mo)throw Error(s(330));ca(mo,t),mo=mo.nextEffect}}while(null!==mo);No=null,mo=r;do{try{for(a=t;null!==mo;){var h=mo.flags;if(16&h&&Q&&wt(mo.stateNode),128&h){var d=mo.alternate;if(null!==d){var f=d.ref;null!==f&&("function"==typeof f?f(null):f.current=null)}}switch(1038&h){case 2:Ai(mo),mo.flags&=-3;break;case 6:Ai(mo),mo.flags&=-3,Di(mo.alternate,mo);break;case 1024:mo.flags&=-1025;break;case 1028:mo.flags&=-1025,Di(mo.alternate,mo);break;case 4:Di(mo.alternate,mo);break;case 8:l=a,o=mo,Q?Ni(l,o):Ti(l,o);var p=o.alternate;Ei(o),null!==p&&Ei(p)}mo=mo.nextEffect}}catch(t){if(null===mo)throw Error(s(330));ca(mo,t),mo=mo.nextEffect}}while(null!==mo);Do&&rt(),U(t.containerInfo),t.current=n,mo=r;do{try{for(h=t;null!==mo;){var g=mo.flags;if(36&g&&xi(h,mo.alternate,mo),128&g){d=void 0;var y=mo.ref;if(null!==y){var v=mo.stateNode;switch(mo.tag){case 5:d=L(v);break;default:d=v}"function"==typeof y?y(d):y.current=d}}mo=mo.nextEffect}}catch(t){if(null===mo)throw Error(s(330));ca(mo,t),mo=mo.nextEffect}}while(null!==mo);mo=null,ze(),to=i}else t.current=n;if(wo)wo=!1,So=t,xo=e;else for(mo=r;null!==mo;)e=mo.nextEffect,mo.nextEffect=null,8&mo.flags&&((g=mo).sibling=null,g.stateNode=null),mo=e;if(0===(r=t.pendingLanes)&&(Co=null),1===r?t===Fo?Eo++:(Eo=0,Fo=t):Eo=0,n=n.stateNode,de&&"function"==typeof de.onCommitFiberRoot)try{de.onCommitFiberRoot(he,n,void 0,64==(64&n.current.flags))}catch(t){}if(Uo(t,je()),bo)throw bo=!1,t=_o,_o=null,t;return 0!=(8&to)||qe(),null}function ra(){for(;null!==mo;){var t=mo.alternate;Do||null===No||(0!=(8&mo.flags)?N(mo,No)&&(Do=!0,nt()):13===mo.tag&&Ii(t,mo)&&N(mo,No)&&(Do=!0,nt()));var e=mo.flags;0!=(256&e)&&wi(t,mo),0==(512&e)||wo||(wo=!0,Ye(97,(function(){return ia(),null}))),mo=mo.nextEffect}}function ia(){if(90!==xo){var t=97<xo?97:xo;return xo=90,Ke(t,sa)}return!1}function oa(t,e){ko.push(e,t),wo||(wo=!0,Ye(97,(function(){return ia(),null})))}function aa(t,e){Po.push(e,t),wo||(wo=!0,Ye(97,(function(){return ia(),null})))}function sa(){if(null===So)return!1;var t=So;if(So=null,0!=(48&to))throw Error(s(331));var e=to;to|=32;var n=Po;Po=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],a=i.destroy;if(i.destroy=void 0,"function"==typeof a)try{a()}catch(t){if(null===o)throw Error(s(330));ca(o,t)}}for(n=ko,ko=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(t){if(null===o)throw Error(s(330));ca(o,t)}}for(l=t.current.firstEffect;null!==l;)t=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=t;return to=e,qe(),!0}function la(t,e,n){vn(t,e=mi(0,e=gi(n,e),1)),e=Lo(),null!==(t=zo(t,1))&&(Ce(t,1,e),Uo(t,e))}function ca(t,e){if(3===t.tag)la(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){la(n,t,e);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Co||!Co.has(r))){var i=bi(n,t=gi(e,t),1);if(vn(n,i),i=Lo(),null!==(n=zo(n,1)))Ce(n,1,i),Uo(n,i);else if("function"==typeof r.componentDidCatch&&(null===Co||!Co.has(r)))try{r.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function ua(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),e=Lo(),t.pingedLanes|=t.suspendedLanes&n,eo===t&&(ro&n)===n&&(4===ao||3===ao&&(62914560&ro)===ro&&500>je()-po?Yo(t,0):ho|=n),Uo(t,e)}function ha(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Ve()?1:2:(0===Mo&&(Mo=lo),0===(e=be(62914560&~Mo))&&(e=4194304))),n=Lo(),null!==(t=zo(t,e))&&(Ce(t,e,n),Uo(t,n))}vo=function(t,e,n){var r=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||ne.current)Hr=!0;else{if(0==(n&r)){switch(Hr=!1,e.tag){case 3:Jr(e),Zn();break;case 5:Bn(e);break;case 1:oe(e.type)&&ce(e);break;case 4:Un(e,e.stateNode.containerInfo);break;case 10:ln(e,e.memoizedProps.value);break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?ii(t,e,n):(Zt(jn,1&jn.current),null!==(e=ci(t,e,n))?e.sibling:null);Zt(jn,1&jn.current);break;case 19:if(r=0!=(n&e.childLanes),0!=(64&t.flags)){if(r)return li(t,e,n);e.flags|=64}var i=e.memoizedState;if(null!==i&&(i.rendering=null,i.tail=null,i.lastEffect=null),Zt(jn,jn.current),r)break;return null;case 23:case 24:return e.lanes=0,Yr(t,e,n)}return ci(t,e,n)}Hr=0!=(16384&t.flags)}else Hr=!1;switch(e.lanes=0,e.tag){case 2:if(r=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=ie(e,ee.current),hn(e,n),i=dr(null,e,r,t,i,n),e.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,oe(r)){var o=!0;ce(e)}else o=!1;e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,pn(e);var a=r.getDerivedStateFromProps;"function"==typeof a&&wn(e,r,a,t),i.updater=Sn,e.stateNode=i,i._reactInternals=e,Tn(e,r,t,n),e=$r(null,e,r,!0,o,n)}else e.tag=0,jr(null,e,i,n),e=e.child;return e;case 16:i=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=(o=i._init)(i._payload),e.type=i,o=e.tag=function(t){if("function"==typeof t)return Ca(t)?1:0;if(null!=t){if((t=t.$$typeof)===y)return 11;if(t===b)return 14}return 2}(i),t=en(i,t),o){case 0:e=Xr(null,e,i,t,n);break t;case 1:e=Qr(null,e,i,t,n);break t;case 11:e=Vr(null,e,i,t,n);break t;case 14:e=Wr(null,e,i,en(i.type,t),r,n);break t}throw Error(s(306,i,""))}return e;case 0:return r=e.type,i=e.pendingProps,Xr(t,e,r,i=e.elementType===r?i:en(r,i),n);case 1:return r=e.type,i=e.pendingProps,Qr(t,e,r,i=e.elementType===r?i:en(r,i),n);case 3:if(Jr(e),r=e.updateQueue,null===t||null===r)throw Error(s(282));if(r=e.pendingProps,i=null!==(i=e.memoizedState)?i.element:null,gn(t,e),bn(e,r,null,n),(r=e.memoizedState.element)===i)Zn(),e=ci(t,e,n);else{if((o=(i=e.stateNode).hydrate)&&(J?(Kn=Gt(e.stateNode.containerInfo),Wn=e,o=Yn=!0):o=!1),o){if(J&&null!=(t=i.mutableSourceEagerHydrationData))for(i=0;i<t.length;i+=2)o=t[i],a=t[i+1],X?o._workInProgressVersionPrimary=a:o._workInProgressVersionSecondary=a,tr.push(o);for(n=Nn(e,null,r,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else jr(t,e,r,n),Zn();e=e.child}return e;case 5:return Bn(e),null===t&&Qn(e),r=e.type,i=e.pendingProps,o=null!==t?t.memoizedProps:null,a=i.children,V(r,i)?a=null:null!==o&&V(r,o)&&(e.flags|=16),qr(t,e),jr(t,e,a,n),e.child;case 6:return null===t&&Qn(e),null;case 13:return ii(t,e,n);case 4:return Un(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=On(e,null,r,n):jr(t,e,r,n),e.child;case 11:return r=e.type,i=e.pendingProps,Vr(t,e,r,i=e.elementType===r?i:en(r,i),n);case 7:return jr(t,e,e.pendingProps,n),e.child;case 8:case 12:return jr(t,e,e.pendingProps.children,n),e.child;case 10:t:{if(r=e.type._context,i=e.pendingProps,a=e.memoizedProps,ln(e,o=i.value),null!==a){var l=a.value;if(0==(o=$e(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(a.children===i.children&&!ne.current){e=ci(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var c=l.dependencies;if(null!==c){a=l.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&o)){1===l.tag&&((u=yn(-1,n&-n)).tag=2,vn(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),un(l.return,n),c.lanes|=n;break}u=u.next}}else a=10===l.tag&&l.type===e.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===e){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}}jr(t,e,i.children,n),e=e.child}return e;case 9:return i=e.type,r=(o=e.pendingProps).children,hn(e,n),r=r(i=dn(i,o.unstable_observedBits)),e.flags|=1,jr(t,e,r,n),e.child;case 14:return o=en(i=e.type,e.pendingProps),Wr(t,e,i,o=en(i.type,o),r,n);case 15:return Kr(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,i=e.pendingProps,i=e.elementType===r?i:en(r,i),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,oe(r)?(t=!0,ce(e)):t=!1,hn(e,n),kn(e,r,i),Tn(e,r,i,n),$r(null,e,r,!0,t,n);case 19:return li(t,e,n);case 23:case 24:return Yr(t,e,n)}throw Error(s(156,e.tag))};var da={current:!1},fa=a.unstable_flushAllWithoutAsserting,pa="function"==typeof fa;function ga(){if(void 0!==fa)return fa();for(var t=!1;ia();)t=!0;return t}function ya(e){try{ga(),function(e){if(null===Xi)try{var n=("require"+Math.random()).slice(0,7);Xi=(t&&t[n]).call(t,"timers").setImmediate}catch(t){Xi=function(t){var e=new MessageChannel;e.port1.onmessage=t,e.port2.postMessage(void 0)}}Xi(e)}((function(){ga()?ya(e):e()}))}catch(t){e(t)}}var va=0,ma=!1;function ba(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function _a(t,e,n,r){return new ba(t,e,n,r)}function Ca(t){return!(!(t=t.prototype)||!t.isReactComponent)}function wa(t,e){var n=t.alternate;return null===n?((n=_a(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Sa(t,e,n,r,i,o){var a=2;if(r=t,"function"==typeof t)Ca(t)&&(a=1);else if("string"==typeof t)a=5;else t:switch(t){case h:return xa(n.children,i,o,e);case w:a=8,i|=16;break;case d:a=8,i|=1;break;case f:return(t=_a(12,n,e,8|i)).elementType=f,t.type=f,t.lanes=o,t;case v:return(t=_a(13,n,e,i)).type=v,t.elementType=v,t.lanes=o,t;case m:return(t=_a(19,n,e,i)).elementType=m,t.lanes=o,t;case S:return ka(n,i,o,e);case x:return(t=_a(24,n,e,i)).elementType=x,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case p:a=10;break t;case g:a=9;break t;case y:a=11;break t;case b:a=14;break t;case _:a=16,r=null;break t;case C:a=22;break t}throw Error(s(130,null==t?t:typeof t,""))}return(e=_a(a,n,e,i)).elementType=t,e.type=r,e.lanes=o,e}function xa(t,e,n,r){return(t=_a(7,t,r,e)).lanes=n,t}function ka(t,e,n,r){return(t=_a(23,t,r,e)).elementType=S,t.lanes=n,t}function Pa(t,e,n){return(t=_a(6,t,null,e)).lanes=n,t}function Ta(t,e,n){return(e=_a(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Ea(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=q,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=_e(0),this.expirationTimes=_e(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=_e(0),J&&(this.mutableSourceEagerHydrationData=null)}function Fa(t){var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(s(188));throw Error(s(268,Object.keys(t)))}return null===(t=O(e))?null:t.stateNode}function Aa(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function Ma(t,e){Aa(t,e),(t=t.alternate)&&Aa(t,e)}function Oa(t){return null===(t=O(t))?null:t.stateNode}function Na(){return null}return r.IsThisRendererActing=da,r.act=function(t){function e(){va--,Zi.current=n,da.current=r}!1===ma&&(ma=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),va++;var n=Zi.current,r=da.current;Zi.current=!0,da.current=!0;try{var i=jo(t)}catch(t){throw e(),t}if(null!==i&&"object"==typeof i&&"function"==typeof i.then)return{then:function(t,r){i.then((function(){1<va||!0===pa&&!0===n?(e(),t()):ya((function(n){e(),n?r(n):t()}))}),(function(t){e(),r(t)}))}};try{1!==va||!1!==pa&&!1!==n||ga(),e()}catch(t){throw e(),t}return{then:function(t){t()}}},r.attemptContinuousHydration=function(t){13===t.tag&&(Io(t,67108864,Lo()),Ma(t,67108864))},r.attemptHydrationAtCurrentPriority=function(t){if(13===t.tag){var e=Lo(),n=Ro(t);Io(t,n,e),Ma(t,n)}},r.attemptSynchronousHydration=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.hydrate){var n=ge(e.pendingLanes);e.expiredLanes|=n&e.pendingLanes,Uo(e,je()),0==(48&to)&&(yo(),qe())}break;case 13:var r=Lo();Vo((function(){return Io(t,1,r)})),Ma(t,4)}},r.attemptUserBlockingHydration=function(t){13===t.tag&&(Io(t,4,Lo()),Ma(t,4))},r.batchedEventUpdates=function(t,e){var n=to;to|=2;try{return t(e)}finally{0===(to=n)&&(yo(),qe())}},r.batchedUpdates=jo,r.createComponentSelector=function(t){return{$$typeof:zi,value:t}},r.createContainer=function(t,e,n){return t=new Ea(t,e,n),e=_a(3,null,null,2===e?7:1===e?3:0),t.current=e,e.stateNode=t,pn(e),t},r.createHasPsuedoClassSelector=function(t){return{$$typeof:Ui,value:t}},r.createPortal=function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:u,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}},r.createRoleSelector=function(t){return{$$typeof:Gi,value:t}},r.createTestNameSelector=function(t){return{$$typeof:Bi,value:t}},r.createTextSelector=function(t){return{$$typeof:Hi,value:t}},r.deferredUpdates=function(t){return Ke(97,t)},r.discreteUpdates=function(t,e,n,r,i){var o=to;to|=4;try{return Ke(98,t.bind(null,e,n,r,i))}finally{0===(to=o)&&(yo(),qe())}},r.findAllNodes=qi,r.findBoundingRects=function(t,e){if(!ot)throw Error(s(363));e=qi(t,e),t=[];for(var n=0;n<e.length;n++)t.push(st(e[n]));for(e=t.length-1;0<e;e--)for(var r=(n=t[e]).x,i=r+n.width,o=n.y,a=o+n.height,l=e-1;0<=l;l--)if(e!==l){var c=t[l],u=c.x,h=u+c.width,d=c.y,f=d+c.height;if(r>=u&&o>=d&&i<=h&&a<=f){t.splice(e,1);break}if(!(r!==u||n.width!==c.width||f<o||d>a)){d>o&&(c.height+=d-o,c.y=o),f<a&&(c.height=a-d),t.splice(e,1);break}if(!(o!==d||n.height!==c.height||h<r||u>i)){u>r&&(c.width+=u-r,c.x=r),h<i&&(c.width=i-u),t.splice(e,1);break}}return t},r.findHostInstance=Fa,r.findHostInstanceWithNoPortals=function(t){return null===(t=function(t){if(!(t=M(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child&&4!==e.tag)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:20===t.tag?t.stateNode.instance:t.stateNode},r.findHostInstanceWithWarning=function(t){return Fa(t)},r.flushControlled=function(t){var e=to;to|=1;try{Ke(99,t)}finally{0===(to=e)&&(yo(),qe())}},r.flushDiscreteUpdates=function(){0==(49&to)&&(function(){if(null!==To){var t=To;To=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,Uo(t,je())}))}qe()}(),ia())},r.flushPassiveEffects=ia,r.flushSync=Vo,r.focusWithin=function(t,e){if(!ot)throw Error(s(363));for(e=Yi(t=Vi(t),e),e=Array.from(e),t=0;t<e.length;){var n=e[t++];if(!ct(n)){if(5===n.tag&&ht(n.stateNode))return!0;for(n=n.child;null!==n;)e.push(n),n=n.sibling}}return!1},r.getCurrentUpdateLanePriority=function(){return fe},r.getFindAllNodesFailureDescription=function(t,e){if(!ot)throw Error(s(363));var n=0,r=[];t=[Vi(t),0];for(var i=0;i<t.length;){var o=t[i++],a=t[i++],l=e[a];if((5!==o.tag||!ct(o))&&(Wi(o,l)&&(r.push(Ki(l)),++a>n&&(n=a)),a<e.length))for(o=o.child;null!==o;)t.push(o,a),o=o.sibling}if(n<e.length){for(t=[];n<e.length;n++)t.push(Ki(e[n]));return"findAllNodes was able to match part of the selector:\n  "+r.join(" > ")+"\n\nNo matching component was found for:\n  "+t.join(" > ")}return null},r.getPublicRootInstance=function(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:return L(t.child.stateNode);default:return t.child.stateNode}},r.injectIntoDevTools=function(t){if(t={bundleType:t.bundleType,version:t.version,rendererPackageName:t.rendererPackageName,rendererConfig:t.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:l.ReactCurrentDispatcher,findHostInstanceByFiber:Oa,findFiberByHostInstance:t.findFiberByHostInstance||Na,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)t=!1;else{var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!e.isDisabled&&e.supportsFiber)try{he=e.inject(t),de=e}catch(t){}t=!0}return t},r.observeVisibleRects=function(t,e,n,r){if(!ot)throw Error(s(363));t=qi(t,e);var i=dt(t,n,r).disconnect;return{disconnect:function(){i()}}},r.registerMutableSourceForHydration=function(t,e){var n=e._getVersion;n=n(e._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[e,n]:t.mutableSourceEagerHydrationData.push(e,n)},r.runWithPriority=function(t,e){var n=fe;try{return fe=t,e()}finally{fe=n}},r.shouldSuspend=function(){return!1},r.unbatchedUpdates=function(t,e){var n=to;to&=-2,to|=8;try{return t(e)}finally{0===(to=n)&&(yo(),qe())}},r.updateContainer=function(t,e,n,r){var i=e.current,o=Lo(),a=Ro(i);t:if(n){e:{if(F(n=n._reactInternals)!==n||1!==n.tag)throw Error(s(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(oe(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw Error(s(171))}if(1===n.tag){var c=n.type;if(oe(c)){n=le(n,c,l);break t}}n=l}else n=te;return null===e.context?e.context=n:e.pendingContext=n,(e=yn(o,a)).payload={element:t},null!==(r=void 0===r?null:r)&&(e.callback=r),vn(i,e),Io(i,a,o),a},r}},6525:(t,e,n)=>{"use strict";t.exports=n(7287)},751:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=e.io=e.Manager=e.protocol=void 0;const r=n(6744),i=n(7703),o=n(2277);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return o.Socket}});const a=n(3669)("socket.io-client");t.exports=e=l;const s=e.managers={};function l(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const n=r.url(t),o=n.source,l=n.id,c=n.path,u=s[l]&&c in s[l].nsps;let h;return e.forceNew||e["force new connection"]||!1===e.multiplex||u?(a("ignoring socket cache for %s",o),h=new i.Manager(o,e)):(s[l]||(a("new io instance for %s",o),s[l]=new i.Manager(o,e)),h=s[l]),n.query&&!e.query&&(e.query=n.query),h.socket(n.path,e)}e.io=l;var c=n(5485);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return c.protocol}}),e.connect=l;var u=n(7703);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return u.Manager}})},7703:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const r=n(5983),i=n(2277),o=n(8767),a=n(5485),s=n(5657),l=n(6077),c=n(3010),u=n(3669)("socket.io-client:manager");e.Manager=class extends o{constructor(t,e){super(),this.nsps={},this.subs=[],this.connecting=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new c({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const n=e.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this)}randomizationFactor(t){return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this)}reconnectionDelayMax(t){return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const e=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const i=s.on(e,"open",(function(){n.onopen(),t&&t()})),o=s.on(e,"error",(e=>{u("error"),n.cleanup(),n._readyState="closed",super.emit("error",e),t?t(e):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;u("connect attempt will timeout after %d",t),0===t&&i.destroy();const n=setTimeout((()=>{u("connect attempt timed out after %d",t),i.destroy(),e.close(),e.emit("error",new Error("timeout"))}),t);this.subs.push({destroy:function(){clearTimeout(n)}})}return this.subs.push(i),this.subs.push(o),this}connect(t){return this.open(t)}onopen(){u("open"),this.cleanup(),this._readyState="open",super.emit("open");const t=this.engine;this.subs.push(s.on(t,"data",l(this,"ondata"))),this.subs.push(s.on(t,"ping",l(this,"onping"))),this.subs.push(s.on(t,"error",l(this,"onerror"))),this.subs.push(s.on(t,"close",l(this,"onclose"))),this.subs.push(s.on(this.decoder,"decoded",l(this,"ondecoded")))}onping(){super.emit("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){super.emit("packet",t)}onerror(t){u("error",t),super.emit("error",t)}socket(t,e){let n=this.nsps[t];if(!n){n=new i.Socket(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",o),this._autoConnect&&o()}function o(){~r.connecting.indexOf(n)||r.connecting.push(n)}return n}_destroy(t){const e=this.connecting.indexOf(t);~e&&this.connecting.splice(e,1),this.connecting.length||this._close()}_packet(t){u("writing packet %j",t),t.query&&0===t.type&&(t.nsp+="?"+t.query);const e=this.encoder.encode(t);for(let n=0;n<e.length;n++)this.engine.write(e[n],t.options)}cleanup(){u("cleanup");const t=this.subs.length;for(let e=0;e<t;e++)this.subs.shift().destroy();this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",super.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),super.emit("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const n=setTimeout((()=>{t.skipReconnect||(u("attempting reconnect"),super.emit("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(u("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),super.emit("reconnect_error",e)):(u("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),super.emit("reconnect",t)}}},5657:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},2277:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const r=n(5485),i=n(8767),o=n(5657),a=n(6077),s=n(3669)("socket.io-client:socket"),l={connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1};e.Socket=class extends i{constructor(t,e,n){super(),this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[o.on(t,"open",a(this,"onopen")),o.on(t,"packet",a(this,"onpacket")),o.on(t,"close",a(this,"onclose"))]}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(l.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');e.unshift(t);const n={type:r.PacketType.EVENT,data:e,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(s("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):s("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){s("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:r.PacketType.CONNECT,data:t})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onclose(t){s("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,super.emit("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case r.PacketType.CONNECT:const e=t.data.sid;this.onconnect(e);break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(t);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(t);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const n=new Error(t.data.message);n.data=t.data.data,super.emit("connect_error",n)}}onevent(t){const e=t.data||[];s("emitting event %j",e),null!=t.id&&(s("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(e)}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const n of e)n.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let n=!1;return function(...i){n||(n=!0,s("sending ack %j",i),e.packet({type:r.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(s("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):s("bad ack %s",t.id)}onconnect(t){this.id=t,this.connected=!0,this.disconnected=!1,super.emit("connect"),this.emitBuffered()}emitBuffered(){for(let t=0;t<this.receiveBuffer.length;t++)this.emitEvent(this.receiveBuffer[t]);this.receiveBuffer=[];for(let t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]}ondisconnect(){s("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){if(this.subs){for(let t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io._destroy(this)}disconnect(){return this.connected&&(s("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let n=0;n<e.length;n++)if(t===e[n])return e.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}},6744:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const r=n(4187),i=n(3669)("socket.io-client:url");e.url=function(t,e){let n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port,n.href=n.protocol+"://"+o+(e&&e.port===n.port?"":":"+n.port),n}},3669:(t,e,n)=>{e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t={}.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(9231)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},9231:(t,e,n)=>{t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function a(...t){if(!a.enabled)return;const e=a,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return n;s++;const o=r.formatters[i];if("function"==typeof o){const r=t[s];n=o.call(e,r),t.splice(s,1),s--}return n})),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return a.namespace=t,a.enabled=r.enabled(t),a.useColors=r.useColors(),a.color=e(t),a.destroy=i,a.extend=o,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function a(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(a),...r.skips.map(a).map((t=>"-"+t))].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(7824),Object.keys(t).forEach((e=>{r[e]=t[e]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},5615:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});var r=n(751);r.Manager;const i=r},7719:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const r=n(2986);function i(t,e){if(!t)return t;if(r.isBinary(t)){const n={_placeholder:!0,num:e.length};return e.push(t),n}if(Array.isArray(t)){const n=new Array(t.length);for(let r=0;r<t.length;r++)n[r]=i(t[r],e);return n}if("object"==typeof t&&!(t instanceof Date)){const n={};for(const r in t)t.hasOwnProperty(r)&&(n[r]=i(t[r],e));return n}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let n=0;n<t.length;n++)t[n]=o(t[n],e);else if("object"==typeof t)for(const n in t)t.hasOwnProperty(n)&&(t[n]=o(t[n],e));return t}e.deconstructPacket=function(t){const e=[],n=t.data,r=t;return r.data=i(n,e),r.attachments=e.length,{packet:r,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t}},5485:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const r=n(8767),i=n(7719),o=n(2986),a=n(1618)("socket.io-parser");var s;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(s=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return a("encoding packet %j",t),t.type!==s.EVENT&&t.type!==s.ACK||!o.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===s.EVENT?s.BINARY_EVENT:s.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==s.BINARY_EVENT&&t.type!==s.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),a("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),n=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(n),r}};class l extends r{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===s.BINARY_EVENT||e.type===s.BINARY_ACK?(this.reconstructor=new c(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!o.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const n={type:Number(t.charAt(0))};if(void 0===s[n.type])throw new Error("unknown packet type "+n.type);if(n.type===s.BINARY_EVENT||n.type===s.BINARY_ACK){const r=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(r,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");n.attachments=Number(i)}if("/"===t.charAt(e+1)){const r=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);n.nsp=t.substring(r,e)}else n.nsp="/";const r=t.charAt(e+1);if(""!==r&&Number(r)==r){const r=e+1;for(;++e;){const n=t.charAt(e);if(null==n||Number(n)!=n){--e;break}if(e===t.length)break}n.id=Number(t.substring(r,e+1))}if(t.charAt(++e)){const r=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!l.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return a("decoded %s as %j",t,n),n}static isPayloadValid(t,e){switch(t){case s.CONNECT:return"object"==typeof e;case s.DISCONNECT:return void 0===e;case s.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case s.EVENT:case s.BINARY_EVENT:return Array.isArray(e)&&"string"==typeof e[0];case s.ACK:case s.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=l;class c{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function a(t){return n&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||o&&t instanceof File}e.isBinary=a,e.hasBinary=function t(e,n){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let n=0,r=e.length;n<r;n++)if(t(e[n]))return!0;return!1}if(a(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t(e[n]))return!0;return!1}},1618:(t,e,n)=>{e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t={}.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(5224)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},5224:(t,e,n)=>{t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function a(...t){if(!a.enabled)return;const e=a,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return n;s++;const o=r.formatters[i];if("function"==typeof o){const r=t[s];n=o.call(e,r),t.splice(s,1),s--}return n})),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return a.namespace=t,a.enabled=r.enabled(t),a.useColors=r.useColors(),a.color=e(t),a.destroy=i,a.extend=o,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function a(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(a),...r.skips.map(a).map((t=>"-"+t))].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(7824),Object.keys(t).forEach((e=>{r[e]=t[e]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},6189:(t,e,n)=>{var r=n(7966);t.exports=function(t){return r(t).replace(/\s(\w)/g,(function(t,e){return e.toUpperCase()}))}},4551:t=>{t.exports=function(t){return e.test(t)?t.toLowerCase():n.test(t)?(function(t){return t.replace(i,(function(t,e){return e?" "+e:""}))}(t)||t).toLowerCase():r.test(t)?function(t){return t.replace(o,(function(t,e,n){return e+" "+n.toLowerCase().split("").join(" ")}))}(t).toLowerCase():t.toLowerCase()};var e=/\s/,n=/(_|-|\.|:)/,r=/([a-z][A-Z]|[A-Z][a-z])/,i=/[\W_]+(.|$)/g,o=/(.)([A-Z]+)/g},7966:(t,e,n)=>{var r=n(4551);t.exports=function(t){return r(t).replace(/[\W_]+(.|$)/g,(function(t,e){return e?" "+e:""})).trim()}},4420:(t,e,n)=>{var r=n(7294),i={image:void 0,status:"loading"};t.exports=function(t,e){var n=r.useState(i),o=n[0].image,a=n[0].status,s=n[1];return r.useEffect((function(){if(t){var n=document.createElement("img");return n.addEventListener("load",r),n.addEventListener("error",o),e&&(n.crossOrigin=e),n.src=t,function(){n.removeEventListener("load",r),n.removeEventListener("error",o),s(i)}}function r(){s({image:n,status:"loaded"})}function o(){s({image:void 0,status:"failed"})}}),[t,e]),[o,a]}},2281:t=>{"use strict";var e,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},i=0,o=0;function a(t){var e="";do{e=n[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function s(){var t=a(+new Date);return t!==e?(i=0,e=t):t+"."+a(i++)}for(;o<64;o++)r[n[o]]=o;s.encode=a,s.decode=function(t){var e=0;for(o=0;o<t.length;o++)e=64*e+r[t.charAt(o)];return e},t.exports=s}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,