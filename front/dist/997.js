/*! For license information please see 997.js.LICENSE.txt */
(self.webpackChunk_42board_front=self.webpackChunk_42board_front||[]).push([[997],{3010:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},3704:(e,t)=>{!function(e){"use strict";t.encode=function(t){var n,r=new Uint8Array(t),a=r.length,i="";for(n=0;n<a;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return a%3==2?i=i.substring(0,i.length-1)+"=":a%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(t){var n,r,a,i,s,o=.75*t.length,d=t.length,u=0;"="===t[t.length-1]&&(o--,"="===t[t.length-2]&&o--);var l=new ArrayBuffer(o),c=new Uint8Array(l);for(n=0;n<d;n+=4)r=e.indexOf(t[n]),a=e.indexOf(t[n+1]),i=e.indexOf(t[n+2]),s=e.indexOf(t[n+3]),c[u++]=r<<2|a>>4,c[u++]=(15&a)<<4|i>>2,c[u++]=(3&i)<<6|63&s;return l}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},6077:e=>{var t=[].slice;e.exports=function(e,n){if("string"==typeof n&&(n=e[n]),"function"!=typeof n)throw new Error("bind() requires a function");var r=t.call(arguments,2);return function(){return n.apply(e,r.concat(t.call(arguments)))}}},8767:e=>{function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var a=0;a<r.length;a++)if((n=r[a])===t||n.fn===t){r.splice(a,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var a=(n=n.slice(0)).length;r<a;++r)n[r].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}},3549:e=>{e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},5983:(e,t,n)=>{const r=n(2192);e.exports=(e,t)=>new r(e,t),e.exports.Socket=r,e.exports.protocol=r.protocol,e.exports.Transport=n(6496),e.exports.transports=n(3352),e.exports.parser=n(9743)},2192:(e,t,n)=>{const r=n(3352),a=n(8767),i=n(4802)("engine.io-client:socket"),s=n(9743),o=n(4187),d=n(1830);class u extends a{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=o(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=o(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,upgrade:!0,jsonp:!0,timestampParam:"t",policyPort:843,rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=d.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,this.open()}createTransport(e){i('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=s.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return i("options: %j",n),new r[e](n)}open(){let e;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){const e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return i("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){i("setting transport %s",e.name);const t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",(function(){t.onDrain()})).on("packet",(function(e){t.onPacket(e)})).on("error",(function(e){t.onError(e)})).on("close",(function(){t.onClose("transport close")}))}probe(e){i('probing transport "%s"',e);let t=this.createTransport(e,{probe:1}),n=!1;const r=this;function a(){if(r.onlyBinaryUpgrades){const e=!this.supportsBinary&&r.transport.supportsBinary;n=n||e}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(function(a){if(!n)if("pong"===a.type&&"probe"===a.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),h(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())}))}else{i('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,r.emit("upgradeError",n)}})))}function s(){n||(n=!0,h(),t.close(),t=null)}function o(n){const a=new Error("probe error: "+n);a.transport=t.name,s(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",a)}function d(){o("transport closed")}function l(){o("socket closed")}function c(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),s())}function h(){t.removeListener("open",a),t.removeListener("error",o),t.removeListener("close",d),r.removeListener("close",l),r.removeListener("upgrading",c)}u.priorWebsocketSuccess=!1,t.once("open",a),t.once("error",o),t.once("close",d),this.once("close",l),this.once("upgrading",c),t.open()}onOpen(){if(i("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){i("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout)}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const a={type:e,data:t,options:n};this.emit("packetCreate",a),this.writeBuffer.push(a),r&&this.once("flush",r),this.flush()}close(){const e=this;function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():t()})):this.upgrading?r():t()),this}onError(e){i("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)}onClose(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);const n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),n.writeBuffer=[],n.prevBufferLen=0}}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}u.priorWebsocketSuccess=!1,u.protocol=s.protocol,e.exports=u},6496:(e,t,n)=>{const r=n(9743),a=n(8767);e.exports=class extends a{constructor(e){super(),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(e){const t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){this.emit("packet",e)}onClose(){this.readyState="closed",this.emit("close")}}},3352:(e,t,n)=>{const r=n(2777),a=n(3416),i=n(9785),s=n(4442);t.polling=function(e){let t,n=!1,s=!1;const o=!1!==e.jsonp;if("undefined"!=typeof location){const t="https:"===location.protocol;let r=location.port;r||(r=t?443:80),n=e.hostname!==location.hostname||r!==e.port,s=e.secure!==t}if(e.xdomain=n,e.xscheme=s,t=new r(e),"open"in t&&!e.forceJSONP)return new a(e);if(!o)throw new Error("JSONP disabled");return new i(e)},t.websocket=s},9785:(e,t,n)=>{const r=n(9015),a=n(3549),i=/\n/g,s=/\\n/g;let o;function d(){}e.exports=class extends r{constructor(e){super(e),this.query=this.query||{},o||(o=a.___eio=a.___eio||[]),this.index=o.length;const t=this;o.push((function(e){t.onData(e)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){t.script&&(t.script.onerror=d)}),!1)}get supportsBinary(){return!1}doClose(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};const n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)}doWrite(e,t){const n=this;let r;if(!this.form){const e=document.createElement("form"),t=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;e.className="socketio",e.style.position="absolute",e.style.top="-1000px",e.style.left="-1000px",e.target=n,e.method="POST",e.setAttribute("accept-charset","utf-8"),t.name="d",e.appendChild(t),document.body.appendChild(e),this.form=e,this.area=t}function a(){o(),t()}function o(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{const e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){r=document.createElement("iframe"),r.name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),o(),e=e.replace(s,"\\\n"),this.area.value=e.replace(i,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&a()}:this.iframe.onload=a}}},3416:(e,t,n)=>{const r=n(2777),a=n(9015),i=n(8767),{pick:s}=n(6839),o=n(3549),d=n(4802)("engine.io-client:polling-xhr");function u(){}const l=null!=new(n(2777))({xdomain:!1}).responseType;class c extends i{constructor(e,t){super(),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.create()}create(){const e=s(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new r(e),n=this;try{d("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){console.log(e)}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{const e=t.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof t.status?t.status:0)}),0))},d("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((function(){n.onError(e)}),0)}"undefined"!=typeof document&&(this.index=c.requestsCount++,c.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete c.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function h(){for(let e in c.requests)c.requests.hasOwnProperty(e)&&c.requests[e].abort()}c.requestsCount=0,c.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",h):"function"==typeof addEventListener&&addEventListener("onpagehide"in o?"pagehide":"unload",h,!1)),e.exports=class extends a{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=l&&!t}request(e={}){return Object.assign(e,{supportsBinary:this.supportsBinary,xd:this.xd,xs:this.xs},this.opts),new c(this.uri(),e)}doWrite(e,t){const n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),a=this;r.on("success",t),r.on("error",(function(e){a.onError("xhr post error",e)}))}doPoll(){d("xhr poll");const e=this.request(),t=this;e.on("data",(function(e){t.onData(e)})),e.on("error",(function(e){t.onError("xhr poll error",e)})),this.pollXhr=e}},e.exports.Request=c},9015:(e,t,n)=>{const r=n(6496),a=n(1830),i=n(9743),s=n(2281),o=n(4802)("engine.io-client:polling");e.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(e){const t=this;function n(){o("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){let e=0;this.polling&&(o("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){o("pre-pause polling complete"),--e||n()}))),this.writable||(o("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){o("pre-pause writing complete"),--e||n()})))}else n()}poll(){o("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){const t=this;o("polling got data %s",e),i.decodePayload(e,this.socket.binaryType).forEach((function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():o('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=this;function t(){o("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(o("transport open - closing"),t()):(o("transport not open - deferring close"),this.once("open",t))}write(e){this.writable=!1,i.encodePayload(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=a.encode(e),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}}},866:(e,t,n)=>{const r=n(3549);e.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},4442:(e,t,n)=>{const r=n(6496),a=n(9743),i=n(1830),s=n(2281),{pick:o}=n(6839),{WebSocket:d,usingBrowserWebSocket:u,defaultBinaryType:l}=n(866),c=n(4802)("engine.io-client:websocket"),h="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class _ extends r{constructor(e){super(e),e&&e.forceBase64&&(this.supportsBinary=!1),this.supportsBinary=!0}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols;let n;n=h?o(this.opts,"localAddress"):o(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress"),this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=u&&!h?t?new d(e,t):new d(e):new d(e,t,n)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||l,this.addEventListeners()}addEventListeners(){const e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}}write(e){const t=this;this.writable=!1;let n=e.length,r=0;const i=n;for(;r<i;r++)!function(e){a.encodePacket(e,t.supportsBinary,(function(r){const a={};!u&&(e.options&&(a.compress=e.options.compress),t.opts.perMessageDeflate)&&("string"==typeof r?Buffer.byteLength(r):r.length)<t.opts.perMessageDeflate.threshold&&(a.compress=!1);try{u?t.ws.send(r):t.ws.send(r,a)}catch(e){c("websocket closed before onclose event")}--n||(t.emit("flush"),setTimeout((function(){t.writable=!0,t.emit("drain")}),0))}))}(e[r])}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&this.ws.close()}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=s()),this.supportsBinary||(e.b64=1),e=i.encode(e),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}check(){return!(!d||"__initialize"in d&&this.name===_.prototype.name)}}e.exports=_},6839:e=>{e.exports.pick=(e,...t)=>t.reduce(((t,n)=>(t[n]=e[n],t)),{})},2777:(e,t,n)=>{const r=n(8058),a=n(3549);e.exports=function(e){const t=e.xdomain,n=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&i)return new XDomainRequest}catch(e){}if(!t)try{return new(a[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},4802:(e,t,n)=>{t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,a=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(a=r))})),t.splice(a,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(804)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},804:(e,t,n)=>{e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function s(...e){if(!s.enabled)return;const t=s,a=Number(new Date),i=a-(n||a);t.diff=i,t.prev=n,t.curr=a,n=a,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,a)=>{if("%%"===n)return n;o++;const i=r.formatters[a];if("function"==typeof i){const r=e[o];n=i.call(t,r),e.splice(o,1),o--}return n})),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return s.namespace=e,s.enabled=r.enabled(e),s.useColors=r.useColors(),s.color=t(e),s.destroy=a,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function a(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function s(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(s),...r.skips.map(s).map((e=>"-"+e))].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),a=n.length;for(t=0;t<a;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(7824),Object.keys(e).forEach((t=>{r[t]=e[t]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},1712:e=>{const t=Object.create(null);t.open="0",t.close="1",t.ping="2",t.pong="3",t.message="4",t.upgrade="5",t.noop="6";const n=Object.create(null);Object.keys(t).forEach((e=>{n[t[e]]=e})),e.exports={PACKET_TYPES:t,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},4965:(e,t,n)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:a}=n(1712);let i;"function"==typeof ArrayBuffer&&(i=n(3704));const s=(e,t)=>{if(i){const n=i.decode(e);return o(n,t)}return{base64:!0,data:e}},o=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};e.exports=(e,t)=>{if("string"!=typeof e)return{type:"message",data:o(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:s(e.substring(1),t)}:r[n]?e.length>1?{type:r[n],data:e.substring(1)}:{type:r[n]}:a}},2929:(e,t,n)=>{const{PACKET_TYPES:r}=n(1712),a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,s=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};e.exports=({type:e,data:t},n,o)=>{return a&&t instanceof Blob?n?o(t):s(t,o):i&&(t instanceof ArrayBuffer||(d=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(d):d&&d.buffer instanceof ArrayBuffer))?n?o(t instanceof ArrayBuffer?t:t.buffer):s(new Blob([t]),o):o(r[e]+(t||""));var d}},9743:(e,t,n)=>{const r=n(2929),a=n(4965),i=String.fromCharCode(30);e.exports={protocol:4,encodePacket:r,encodePayload:(e,t)=>{const n=e.length,a=new Array(n);let s=0;e.forEach(((e,o)=>{r(e,!1,(e=>{a[o]=e,++s===n&&t(a.join(i))}))}))},decodePacket:a,decodePayload:(e,t)=>{const n=e.split(i),r=[];for(let e=0;e<n.length;e++){const i=a(n[e],t);if(r.push(i),"error"===i.type)break}return r}}},8058:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},6745:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4417),a=r.glob.performance&&r.glob.performance.now?function(){return r.glob.performance.now()}:function(){return(new Date).getTime()},i=function(){function e(t,n){this.id=e.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:a(),frameRate:0},this.func=t,this.setLayers(n)}return e.prototype.setLayers=function(e){var t;return t=e?e.length>0?e:[e]:[],this.layers=t,this},e.prototype.getLayers=function(){return this.layers},e.prototype.addLayer=function(e){var t,n=this.layers,r=n.length;for(t=0;t<r;t++)if(n[t]._id===e._id)return!1;return this.layers.push(e),!0},e.prototype.isRunning=function(){var t,n=e.animations,r=n.length;for(t=0;t<r;t++)if(n[t].id===this.id)return!0;return!1},e.prototype.start=function(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=a(),e._addAnimation(this),this},e.prototype.stop=function(){return e._removeAnimation(this),this},e.prototype._updateFrameObject=function(e){this.frame.timeDiff=e-this.frame.lastTime,this.frame.lastTime=e,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff},e._addAnimation=function(e){this.animations.push(e),this._handleAnimation()},e._removeAnimation=function(e){var t,n=e.id,r=this.animations,a=r.length;for(t=0;t<a;t++)if(r[t].id===n){this.animations.splice(t,1);break}},e._runFrames=function(){var e,t,n,r,i,s,o,d,u={},l=this.animations;for(r=0;r<l.length;r++)if(t=(e=l[r]).layers,n=e.func,e._updateFrameObject(a()),s=t.length,!n||!1!==n.call(e,e.frame))for(i=0;i<s;i++)void 0!==(o=t[i])._id&&(u[o._id]=o);for(d in u)u.hasOwnProperty(d)&&u[d].draw()},e._animationLoop=function(){var t=e;t.animations.length?(t._runFrames(),requestAnimationFrame(t._animationLoop)):t.animRunning=!1},e._handleAnimation=function(){this.animRunning||(this.animRunning=!0,requestAnimationFrame(this._animationLoop))},e.animations=[],e.animIdCounter=0,e.animRunning=!1,e}();t.Animation=i},4842:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i,s=n(8588),o=n(3442),d=n(4417),u=n(1455),l=n(3774),c=function(){function e(e){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var t=(e||{}).pixelRatio||d.Konva.pixelRatio||function(){if(i)return i;var e=s.Util.createCanvasElement().getContext("2d");return i=(d.Konva._global.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)}();this.pixelRatio=t,this._canvas=s.Util.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}return e.prototype.getContext=function(){return this.context},e.prototype.getPixelRatio=function(){return this.pixelRatio},e.prototype.setPixelRatio=function(e){var t=this.pixelRatio;this.pixelRatio=e,this.setSize(this.getWidth()/t,this.getHeight()/t)},e.prototype.setWidth=function(e){this.width=this._canvas.width=e*this.pixelRatio,this._canvas.style.width=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)},e.prototype.setHeight=function(e){this.height=this._canvas.height=e*this.pixelRatio,this._canvas.style.height=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)},e.prototype.getWidth=function(){return this.width},e.prototype.getHeight=function(){return this.height},e.prototype.setSize=function(e,t){this.setWidth(e||0),this.setHeight(t||0)},e.prototype.toDataURL=function(e,t){try{return this._canvas.toDataURL(e,t)}catch(e){try{return this._canvas.toDataURL()}catch(e){return s.Util.error("Unable to get data URL. "+e.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}},e}();t.Canvas=c,u.Factory.addGetterSetter(c,"pixelRatio",void 0,l.getNumberValidator());var h=function(e){function t(t){void 0===t&&(t={width:0,height:0});var n=e.call(this,t)||this;return n.context=new o.SceneContext(n),n.setSize(t.width,t.height),n}return a(t,e),t}(c);t.SceneCanvas=h;var _=function(e){function t(t){void 0===t&&(t={width:0,height:0});var n=e.call(this,t)||this;return n.hitCanvas=!0,n.context=new o.HitContext(n),n.setSize(t.width,t.height),n}return a(t,e),t}(c);t.HitCanvas=_},8783:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7939),d=n(3774),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.children=new i.Collection,t}return a(t,e),t.prototype.getChildren=function(e){if(!e)return this.children;var t=new i.Collection;return this.children.each((function(n){e(n)&&t.push(n)})),t},t.prototype.hasChildren=function(){return this.getChildren().length>0},t.prototype.removeChildren=function(){for(var e,t=0;t<this.children.length;t++)(e=this.children[t]).parent=null,e.index=0,e.remove();return this.children=new i.Collection,this},t.prototype.destroyChildren=function(){for(var e,t=0;t<this.children.length;t++)(e=this.children[t]).parent=null,e.index=0,e.destroy();return this.children=new i.Collection,this},t.prototype.add=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}var r=e[0];if(r.getParent())return r.moveTo(this),this;var a=this.children;return this._validateAdd(r),r._clearCaches(),r.index=a.length,r.parent=this,a.push(r),this._fire("add",{child:r}),this},t.prototype.destroy=function(){return this.hasChildren()&&this.destroyChildren(),e.prototype.destroy.call(this),this},t.prototype.find=function(e){return this._generalFind(e,!1)},t.prototype.get=function(e){return i.Util.warn("collection.get() method is deprecated. Please use collection.find() instead."),this.find(e)},t.prototype.findOne=function(e){var t=this._generalFind(e,!0);return t.length>0?t[0]:void 0},t.prototype._generalFind=function(e,t){var n=[];return this._descendants((function(r){var a=r._isMatch(e);return a&&n.push(r),!(!a||!t)})),i.Collection.toCollection(n)},t.prototype._descendants=function(e){for(var t=0;t<this.children.length;t++){var n=this.children[t];if(e(n))return!0;if(n.hasChildren()&&n._descendants(e))return!0}return!1},t.prototype.toObject=function(){var e=o.Node.prototype.toObject.call(this);e.children=[];for(var t=this.getChildren(),n=t.length,r=0;r<n;r++){var a=t[r];e.children.push(a.toObject())}return e},t.prototype.isAncestorOf=function(e){for(var t=e.getParent();t;){if(t._id===this._id)return!0;t=t.getParent()}return!1},t.prototype.clone=function(e){var t=o.Node.prototype.clone.call(this,e);return this.getChildren().each((function(e){t.add(e.clone())})),t},t.prototype.getAllIntersections=function(e){var t=[];return this.find("Shape").each((function(n){n.isVisible()&&n.intersects(e)&&t.push(n)})),t},t.prototype._setChildrenIndices=function(){this.children.each((function(e,t){e.index=t}))},t.prototype.drawScene=function(e,t){var n=this.getLayer(),r=e||n&&n.getCanvas(),a=r&&r.getContext(),i=this._getCanvasCache(),s=i&&i.scene,o=r&&r.isCache;if(!this.isVisible()&&!o)return this;if(s){a.save();var d=this.getAbsoluteTransform(t).getMatrix();a.transform(d[0],d[1],d[2],d[3],d[4],d[5]),this._drawCachedSceneCanvas(a),a.restore()}else this._drawChildren("drawScene",r,t);return this},t.prototype.drawHit=function(e,t){if(!this.shouldDrawHit(t))return this;var n=this.getLayer(),r=e||n&&n.hitCanvas,a=r&&r.getContext(),i=this._getCanvasCache();if(i&&i.hit){a.save();var s=this.getAbsoluteTransform(t).getMatrix();a.transform(s[0],s[1],s[2],s[3],s[4],s[5]),this._drawCachedHitCanvas(a),a.restore()}else this._drawChildren("drawHit",r,t);return this},t.prototype._drawChildren=function(e,t,n){var r=t&&t.getContext(),a=this.clipWidth(),i=this.clipHeight(),s=this.clipFunc(),o=a&&i||s,d=n===this;if(o){r.save();var u=this.getAbsoluteTransform(n),l=u.getMatrix();if(r.transform(l[0],l[1],l[2],l[3],l[4],l[5]),r.beginPath(),s)s.call(this,r,this);else{var c=this.clipX(),h=this.clipY();r.rect(c,h,a,i)}r.clip(),l=u.copy().invert().getMatrix(),r.transform(l[0],l[1],l[2],l[3],l[4],l[5])}var _=!d&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===e;_&&(r.save(),r._applyGlobalCompositeOperation(this)),this.children.each((function(r){r[e](t,n)})),_&&r.restore(),o&&r.restore()},t.prototype.getClientRect=function(e){var t,n,r,a,i,s=(e=e||{}).skipTransform,o=e.relativeTo,d=this;this.children.each((function(i){if(i.visible()){var s=i.getClientRect({relativeTo:d,skipShadow:e.skipShadow,skipStroke:e.skipStroke});0===s.width&&0===s.height||(void 0===t?(t=s.x,n=s.y,r=s.x+s.width,a=s.y+s.height):(t=Math.min(t,s.x),n=Math.min(n,s.y),r=Math.max(r,s.x+s.width),a=Math.max(a,s.y+s.height)))}}));for(var u=this.find("Shape"),l=!1,c=0;c<u.length;c++)if(u[c]._isVisible(this)){l=!0;break}return i=l&&void 0!==t?{x:t,y:n,width:r-t,height:a-n}:{x:0,y:0,width:0,height:0},s?i:this._transformedRect(i,o)},t}(o.Node);t.Container=u,s.Factory.addComponentsGetterSetter(u,"clip",["x","y","width","height"]),s.Factory.addGetterSetter(u,"clipX",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"clipY",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"clipWidth",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"clipHeight",void 0,d.getNumberValidator()),s.Factory.addGetterSetter(u,"clipFunc"),i.Collection.mapMethods(u)},3442:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(4417),o=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],d=function(){function e(e){this.canvas=e,this._context=e._canvas.getContext("2d"),s.Konva.enableTrace&&(this.traceArr=[],this._enableTrace())}return e.prototype.fillShape=function(e){e.fillEnabled()&&this._fill(e)},e.prototype._fill=function(e){},e.prototype.strokeShape=function(e){e.hasStroke()&&this._stroke(e)},e.prototype._stroke=function(e){},e.prototype.fillStrokeShape=function(e){this.fillShape(e),this.strokeShape(e)},e.prototype.getTrace=function(e){var t,n,r,a,s=this.traceArr,o=s.length,d="";for(t=0;t<o;t++)(r=(n=s[t]).method)?(a=n.args,d+=r,e?d+="()":i.Util._isArray(a[0])?d+="(["+a.join(",")+"])":d+="("+a.join(",")+")"):(d+=n.property,e||(d+="="+n.val)),d+=";";return d},e.prototype.clearTrace=function(){this.traceArr=[]},e.prototype._trace=function(e){var t=this.traceArr;t.push(e),t.length>=100&&t.shift()},e.prototype.reset=function(){var e=this.getCanvas().getPixelRatio();this.setTransform(1*e,0,0,1*e,0,0)},e.prototype.getCanvas=function(){return this.canvas},e.prototype.clear=function(e){var t=this.getCanvas();e?this.clearRect(e.x||0,e.y||0,e.width||0,e.height||0):this.clearRect(0,0,t.getWidth()/t.pixelRatio,t.getHeight()/t.pixelRatio)},e.prototype._applyLineCap=function(e){var t=e.getLineCap();t&&this.setAttr("lineCap",t)},e.prototype._applyOpacity=function(e){var t=e.getAbsoluteOpacity();1!==t&&this.setAttr("globalAlpha",t)},e.prototype._applyLineJoin=function(e){var t=e.attrs.lineJoin;t&&this.setAttr("lineJoin",t)},e.prototype.setAttr=function(e,t){this._context[e]=t},e.prototype.arc=function(e,t,n,r,a,i){this._context.arc(e,t,n,r,a,i)},e.prototype.arcTo=function(e,t,n,r,a){this._context.arcTo(e,t,n,r,a)},e.prototype.beginPath=function(){this._context.beginPath()},e.prototype.bezierCurveTo=function(e,t,n,r,a,i){this._context.bezierCurveTo(e,t,n,r,a,i)},e.prototype.clearRect=function(e,t,n,r){this._context.clearRect(e,t,n,r)},e.prototype.clip=function(){this._context.clip()},e.prototype.closePath=function(){this._context.closePath()},e.prototype.createImageData=function(e,t){var n=arguments;return 2===n.length?this._context.createImageData(e,t):1===n.length?this._context.createImageData(e):void 0},e.prototype.createLinearGradient=function(e,t,n,r){return this._context.createLinearGradient(e,t,n,r)},e.prototype.createPattern=function(e,t){return this._context.createPattern(e,t)},e.prototype.createRadialGradient=function(e,t,n,r,a,i){return this._context.createRadialGradient(e,t,n,r,a,i)},e.prototype.drawImage=function(e,t,n,r,a,i,s,o,d){var u=arguments,l=this._context;3===u.length?l.drawImage(e,t,n):5===u.length?l.drawImage(e,t,n,r,a):9===u.length&&l.drawImage(e,t,n,r,a,i,s,o,d)},e.prototype.ellipse=function(e,t,n,r,a,i,s,o){this._context.ellipse(e,t,n,r,a,i,s,o)},e.prototype.isPointInPath=function(e,t){return this._context.isPointInPath(e,t)},e.prototype.fill=function(){this._context.fill()},e.prototype.fillRect=function(e,t,n,r){this._context.fillRect(e,t,n,r)},e.prototype.strokeRect=function(e,t,n,r){this._context.strokeRect(e,t,n,r)},e.prototype.fillText=function(e,t,n){this._context.fillText(e,t,n)},e.prototype.measureText=function(e){return this._context.measureText(e)},e.prototype.getImageData=function(e,t,n,r){return this._context.getImageData(e,t,n,r)},e.prototype.lineTo=function(e,t){this._context.lineTo(e,t)},e.prototype.moveTo=function(e,t){this._context.moveTo(e,t)},e.prototype.rect=function(e,t,n,r){this._context.rect(e,t,n,r)},e.prototype.putImageData=function(e,t,n){this._context.putImageData(e,t,n)},e.prototype.quadraticCurveTo=function(e,t,n,r){this._context.quadraticCurveTo(e,t,n,r)},e.prototype.restore=function(){this._context.restore()},e.prototype.rotate=function(e){this._context.rotate(e)},e.prototype.save=function(){this._context.save()},e.prototype.scale=function(e,t){this._context.scale(e,t)},e.prototype.setLineDash=function(e){this._context.setLineDash?this._context.setLineDash(e):"mozDash"in this._context?this._context.mozDash=e:"webkitLineDash"in this._context&&(this._context.webkitLineDash=e)},e.prototype.getLineDash=function(){return this._context.getLineDash()},e.prototype.setTransform=function(e,t,n,r,a,i){this._context.setTransform(e,t,n,r,a,i)},e.prototype.stroke=function(){this._context.stroke()},e.prototype.strokeText=function(e,t,n,r){this._context.strokeText(e,t,n,r)},e.prototype.transform=function(e,t,n,r,a,i){this._context.transform(e,t,n,r,a,i)},e.prototype.translate=function(e,t){this._context.translate(e,t)},e.prototype._enableTrace=function(){var e,t,n=this,r=o.length,a=i.Util._simplifyArray,s=this.setAttr,d=function(e){var r,i=n[e];n[e]=function(){return t=a(Array.prototype.slice.call(arguments,0)),r=i.apply(n,arguments),n._trace({method:e,args:t}),r}};for(e=0;e<r;e++)d(o[e]);n.setAttr=function(){s.apply(n,arguments);var e=arguments[0],t=arguments[1];"shadowOffsetX"!==e&&"shadowOffsetY"!==e&&"shadowBlur"!==e||(t/=this.canvas.getPixelRatio()),n._trace({property:e,val:t})}},e.prototype._applyGlobalCompositeOperation=function(e){var t=e.getGlobalCompositeOperation();"source-over"!==t&&this.setAttr("globalCompositeOperation",t)},e}();t.Context=d,["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(e){Object.defineProperty(d.prototype,e,{get:function(){return this._context[e]},set:function(t){this._context[e]=t}})}));var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._fillColor=function(e){var t=e.fill();this.setAttr("fillStyle",t),e._fillFunc(this)},t.prototype._fillPattern=function(e){var t=e.getFillPatternX(),n=e.getFillPatternY(),r=s.Konva.getAngle(e.getFillPatternRotation()),a=e.getFillPatternOffsetX(),i=e.getFillPatternOffsetY();e.getFillPatternScaleX(),e.getFillPatternScaleY(),(t||n)&&this.translate(t||0,n||0),r&&this.rotate(r),(a||i)&&this.translate(-1*a,-1*i),this.setAttr("fillStyle",e._getFillPattern()),e._fillFunc(this)},t.prototype._fillLinearGradient=function(e){var t=e._getLinearGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))},t.prototype._fillRadialGradient=function(e){var t=e._getRadialGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))},t.prototype._fill=function(e){var t=e.fill(),n=e.getFillPriority();if(t&&"color"===n)this._fillColor(e);else{var r=e.getFillPatternImage();if(r&&"pattern"===n)this._fillPattern(e);else{var a=e.getFillLinearGradientColorStops();if(a&&"linear-gradient"===n)this._fillLinearGradient(e);else{var i=e.getFillRadialGradientColorStops();i&&"radial-gradient"===n?this._fillRadialGradient(e):t?this._fillColor(e):r?this._fillPattern(e):a?this._fillLinearGradient(e):i&&this._fillRadialGradient(e)}}}},t.prototype._strokeLinearGradient=function(e){var t=e.getStrokeLinearGradientStartPoint(),n=e.getStrokeLinearGradientEndPoint(),r=e.getStrokeLinearGradientColorStops(),a=this.createLinearGradient(t.x,t.y,n.x,n.y);if(r){for(var i=0;i<r.length;i+=2)a.addColorStop(r[i],r[i+1]);this.setAttr("strokeStyle",a)}},t.prototype._stroke=function(e){var t=e.dash(),n=e.getStrokeScaleEnabled();if(e.hasStroke()){if(!n){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(e),t&&e.dashEnabled()&&(this.setLineDash(t),this.setAttr("lineDashOffset",e.dashOffset())),this.setAttr("lineWidth",e.strokeWidth()),e.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),e.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(e):this.setAttr("strokeStyle",e.stroke()),e._strokeFunc(this),n||this.restore()}},t.prototype._applyShadow=function(e){var t=i.Util,n=t.get(e.getShadowRGBA(),"black"),r=t.get(e.getShadowBlur(),5),a=t.get(e.getShadowOffset(),{x:0,y:0}),s=e.getAbsoluteScale(),o=this.canvas.getPixelRatio(),d=s.x*o,u=s.y*o;this.setAttr("shadowColor",n),this.setAttr("shadowBlur",r*Math.min(Math.abs(d),Math.abs(u))),this.setAttr("shadowOffsetX",a.x*d),this.setAttr("shadowOffsetY",a.y*u)},t}(d);t.SceneContext=u;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._fill=function(e){this.save(),this.setAttr("fillStyle",e.colorKey),e._fillFuncHit(this),this.restore()},t.prototype.strokeShape=function(e){e.hasHitStroke()&&this._stroke(e)},t.prototype._stroke=function(e){if(e.hasHitStroke()){var t=e.getStrokeScaleEnabled();if(!t){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(e);var r=e.hitStrokeWidth(),a="auto"===r?e.strokeWidth():r;this.setAttr("lineWidth",a),this.setAttr("strokeStyle",e.colorKey),e._strokeFuncHit(this),t||this.restore()}},t}(d);t.HitContext=l},7185:(e,t,n)=>{var r=n(3986).Konva;r._injectGlobal(r),t.default=r,r.default=r,e.exports=t.default},210:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4417),a=n(8588);t.DD={get isDragging(){var e=!1;return t.DD._dragElements.forEach((function(t){"dragging"===t.dragStatus&&(e=!0)})),e},justDragged:!1,get node(){var e;return t.DD._dragElements.forEach((function(t){e=t.node})),e},_dragElements:new Map,_drag:function(e){var n=[];t.DD._dragElements.forEach((function(t,r){var i=t.node,s=i.getStage();s.setPointersPositions(e),void 0===t.pointerId&&(t.pointerId=a.Util._getFirstPointerId(e));var o=s._changedPointerPositions.find((function(e){return e.id===t.pointerId}));if(o){if("dragging"!==t.dragStatus){var d=i.dragDistance();if(Math.max(Math.abs(o.x-t.startPointerPos.x),Math.abs(o.y-t.startPointerPos.y))<d)return;if(i.startDrag({evt:e}),!i.isDragging())return}i._setDragPosition(e,t),n.push(i)}})),n.forEach((function(t){t.fire("dragmove",{type:"dragmove",target:t,evt:e},!0)}))},_endDragBefore:function(e){t.DD._dragElements.forEach((function(n,a){var i=n.node.getStage();if(e&&i.setPointersPositions(e),i._changedPointerPositions.find((function(e){return e.id===n.pointerId}))){"dragging"!==n.dragStatus&&"stopped"!==n.dragStatus||(t.DD.justDragged=!0,r.Konva.listenClickTap=!1,n.dragStatus="stopped");var s=n.node.getLayer()||n.node instanceof r.Konva.Stage&&n.node;s&&s.batchDraw()}}))},_endDragAfter:function(e){t.DD._dragElements.forEach((function(n,r){"stopped"===n.dragStatus&&n.node.fire("dragend",{type:"dragend",target:n.node,evt:e},!0),"dragging"!==n.dragStatus&&t.DD._dragElements.delete(r)}))}},r.Konva.isBrowser&&(window.addEventListener("mouseup",t.DD._endDragBefore,!0),window.addEventListener("touchend",t.DD._endDragBefore,!0),window.addEventListener("mousemove",t.DD._drag),window.addEventListener("touchmove",t.DD._drag),window.addEventListener("mouseup",t.DD._endDragAfter,!1),window.addEventListener("touchend",t.DD._endDragAfter,!1))},1455:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8588),a=n(3774),i="get",s="set";t.Factory={addGetterSetter:function(e,n,r,a,i){t.Factory.addGetter(e,n,r),t.Factory.addSetter(e,n,a,i),t.Factory.addOverloadedGetterSetter(e,n)},addGetter:function(e,t,n){var a=i+r.Util._capitalize(t);e.prototype[a]=e.prototype[a]||function(){var e=this.attrs[t];return void 0===e?n:e}},addSetter:function(e,n,a,i){var o=s+r.Util._capitalize(n);e.prototype[o]||t.Factory.overWriteSetter(e,n,a,i)},overWriteSetter:function(e,t,n,a){var i=s+r.Util._capitalize(t);e.prototype[i]=function(e){return n&&null!=e&&(e=n.call(this,e,t)),this._setAttr(t,e),a&&a.call(this),this}},addComponentsGetterSetter:function(e,n,o,d,u){var l,c,h=o.length,_=r.Util._capitalize,f=i+_(n),m=s+_(n);e.prototype[f]=function(){var e={};for(l=0;l<h;l++)e[c=o[l]]=this.getAttr(n+_(c));return e};var p=a.getComponentValidator(o);e.prototype[m]=function(e){var t,r=this.attrs[n];for(t in d&&(e=d.call(this,e)),p&&p.call(this,e,n),e)e.hasOwnProperty(t)&&this._setAttr(n+_(t),e[t]);return this._fireChangeEvent(n,r,e),u&&u.call(this),this},t.Factory.addOverloadedGetterSetter(e,n)},addOverloadedGetterSetter:function(e,t){var n=r.Util._capitalize(t),a=s+n,o=i+n;e.prototype[t]=function(){return arguments.length?(this[a](arguments[0]),this):this[o]()}},addDeprecatedGetterSetter:function(e,n,a,s){r.Util.error("Adding deprecated "+n);var o=i+r.Util._capitalize(n),d=n+" property is deprecated and will be removed soon. Look at Konva change log for more information.";e.prototype[o]=function(){r.Util.error(d);var e=this.attrs[n];return void 0===e?a:e},t.Factory.addSetter(e,n,s,(function(){r.Util.error(d)})),t.Factory.addOverloadedGetterSetter(e,n)},backCompat:function(e,t){r.Util.each(t,(function(t,n){var a=e.prototype[n],o=i+r.Util._capitalize(t),d=s+r.Util._capitalize(t);function u(){a.apply(this,arguments),r.Util.error('"'+t+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}e.prototype[t]=u,e.prototype[o]=u,e.prototype[d]=u}))},afterSetFilter:function(){this._filterUpToDate=!1}}},3980:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(4415),o=n(4417),d=function(e){function t(t){var n=e.call(this,t)||this;return n.listening(!1),i.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.'),n}return a(t,e),t}(s.Layer);t.FastLayer=d,d.prototype.nodeType="FastLayer",o._registerNode(d),i.Collection.mapMethods(d)},4417:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Math.PI/180,a=function(e){var t=e.indexOf("msie ");if(t>0)return parseInt(e.substring(t+5,e.indexOf(".",t)),10);if(e.indexOf("trident/")>0){var n=e.indexOf("rv:");return parseInt(e.substring(n+3,e.indexOf(".",n)),10)}var r=e.indexOf("edge/");return r>0&&parseInt(e.substring(r+5,e.indexOf(".",r)),10)};t._parseUA=function(e){var t=e.toLowerCase(),n=/(chrome)[ /]([\w.]+)/.exec(t)||/(webkit)[ /]([\w.]+)/.exec(t)||/(opera)(?:.*version|)[ /]([\w.]+)/.exec(t)||/(msie) ([\w.]+)/.exec(t)||t.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t)||[],r=!!e.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),i=!!e.match(/IEMobile/i);return{browser:n[1]||"",version:n[2]||"0",isIE:a(t),mobile:r,ieMobile:i}},t.glob=void 0!==n.g?n.g:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},t.Konva={_global:t.glob,version:"7.1.7",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(e){}.toString()),dblClickWindow:400,getAngle:function(e){return t.Konva.angleDeg?e*r:e},enableTrace:!1,_pointerEventsEnabled:!1,hitOnDragEnabled:!1,captureTouchEventsEnabled:!1,listenClickTap:!1,inDblClickWindow:!1,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:function(){return t.Konva.DD.isDragging},isDragReady:function(){return!!t.Konva.DD.node},UA:t._parseUA(t.glob.navigator&&t.glob.navigator.userAgent||""),document:t.glob.document,_injectGlobal:function(e){t.glob.Konva=e},_parseUA:t._parseUA},t._NODES_REGISTRY={},t._registerNode=function(e){t._NODES_REGISTRY[e.prototype.getClassName()]=e,t.Konva[e.prototype.getClassName()]=e}},8985:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(8783),o=n(4417),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._validateAdd=function(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&i.Util.throw("You may only add groups and shapes to groups.")},t}(s.Container);t.Group=d,d.prototype.nodeType="Group",o._registerNode(d),i.Collection.mapMethods(d)},4415:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(8783),o=n(7939),d=n(1455),u=n(4842),l=n(3774),c=n(7955),h=n(4417),_=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],f=_.length,m=function(e){function t(t){var n=e.call(this,t)||this;return n.canvas=new u.SceneCanvas,n.hitCanvas=new u.HitCanvas({pixelRatio:1}),n._waitingForDraw=!1,n.on("visibleChange.konva",n._checkVisibility),n._checkVisibility(),n.on("imageSmoothingEnabledChange.konva",n._setSmoothEnabled),n._setSmoothEnabled(),n}return a(t,e),t.prototype.createPNGStream=function(){return this.canvas._canvas.createPNGStream()},t.prototype.getCanvas=function(){return this.canvas},t.prototype.getHitCanvas=function(){return this.hitCanvas},t.prototype.getContext=function(){return this.getCanvas().getContext()},t.prototype.clear=function(e){return this.getContext().clear(e),this.getHitCanvas().getContext().clear(e),this},t.prototype.setZIndex=function(t){e.prototype.setZIndex.call(this,t);var n=this.getStage();return n&&(n.content.removeChild(this.getCanvas()._canvas),t<n.children.length-1?n.content.insertBefore(this.getCanvas()._canvas,n.children[t+1].getCanvas()._canvas):n.content.appendChild(this.getCanvas()._canvas)),this},t.prototype.moveToTop=function(){o.Node.prototype.moveToTop.call(this);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),e.content.appendChild(this.getCanvas()._canvas)),!0},t.prototype.moveUp=function(){if(!o.Node.prototype.moveUp.call(this))return!1;var e=this.getStage();return!!e&&(e.content.removeChild(this.getCanvas()._canvas),this.index<e.children.length-1?e.content.insertBefore(this.getCanvas()._canvas,e.children[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas),!0)},t.prototype.moveDown=function(){if(o.Node.prototype.moveDown.call(this)){var e=this.getStage();if(e){var t=e.children;e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,t[this.index+1].getCanvas()._canvas)}return!0}return!1},t.prototype.moveToBottom=function(){if(o.Node.prototype.moveToBottom.call(this)){var e=this.getStage();if(e){var t=e.children;e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,t[1].getCanvas()._canvas)}return!0}return!1},t.prototype.getLayer=function(){return this},t.prototype.remove=function(){var e=this.getCanvas()._canvas;return o.Node.prototype.remove.call(this),e&&e.parentNode&&i.Util._isInDocument(e)&&e.parentNode.removeChild(e),this},t.prototype.getStage=function(){return this.parent},t.prototype.setSize=function(e){var t=e.width,n=e.height;return this.canvas.setSize(t,n),this.hitCanvas.setSize(t,n),this._setSmoothEnabled(),this},t.prototype._validateAdd=function(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&i.Util.throw("You may only add groups and shapes to a layer.")},t.prototype._toKonvaCanvas=function(e){return(e=e||{}).width=e.width||this.getWidth(),e.height=e.height||this.getHeight(),e.x=void 0!==e.x?e.x:this.x(),e.y=void 0!==e.y?e.y:this.y(),o.Node.prototype._toKonvaCanvas.call(this,e)},t.prototype._checkVisibility=function(){var e=this.visible();this.canvas._canvas.style.display=e?"block":"none"},t.prototype._setSmoothEnabled=function(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()},t.prototype.getWidth=function(){if(this.parent)return this.parent.width()},t.prototype.setWidth=function(){i.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},t.prototype.getHeight=function(){if(this.parent)return this.parent.height()},t.prototype.setHeight=function(){i.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},t.prototype.batchDraw=function(){var e=this;return this._waitingForDraw||(this._waitingForDraw=!0,i.Util.requestAnimFrame((function(){e.draw(),e._waitingForDraw=!1}))),this},t.prototype.getIntersection=function(e,t){if(!this.isListening()||!this.isVisible())return null;for(var n=1,r=!1;;){for(var a=0;a<f;a++){var i=_[a],s=this._getIntersection({x:e.x+i.x*n,y:e.y+i.y*n}),o=s.shape;if(o&&t)return o.findAncestor(t,!0);if(o)return o;if(r=!!s.antialiased,!s.antialiased)break}if(!r)return null;n+=1}},t.prototype._getIntersection=function(e){var t=this.hitCanvas.pixelRatio,n=this.hitCanvas.context.getImageData(Math.round(e.x*t),Math.round(e.y*t),1,1).data,r=n[3];if(255===r){var a=i.Util._rgbToHex(n[0],n[1],n[2]),s=c.shapes["#"+a];return s?{shape:s}:{antialiased:!0}}return r>0?{antialiased:!0}:{}},t.prototype.drawScene=function(e,t){var n=this.getLayer(),r=e||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&r.getContext().clear(),s.Container.prototype.drawScene.call(this,r,t),this._fire("draw",{node:this}),this},t.prototype.drawHit=function(e,t){var n=this.getLayer(),r=e||n&&n.hitCanvas;return n&&n.clearBeforeDraw()&&n.getHitCanvas().getContext().clear(),s.Container.prototype.drawHit.call(this,r,t),this},t.prototype.enableHitGraph=function(){return this.hitGraphEnabled(!0),this},t.prototype.disableHitGraph=function(){return this.hitGraphEnabled(!1),this},t.prototype.setHitGraphEnabled=function(e){i.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(e)},t.prototype.getHitGraphEnabled=function(e){return i.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()},t.prototype.toggleHitCanvas=function(){if(this.parent){var e=this.parent;this.hitCanvas._canvas.parentNode?e.content.removeChild(this.hitCanvas._canvas):e.content.appendChild(this.hitCanvas._canvas)}},t}(s.Container);t.Layer=m,m.prototype.nodeType="Layer",h._registerNode(m),d.Factory.addGetterSetter(m,"imageSmoothingEnabled",!0),d.Factory.addGetterSetter(m,"clearBeforeDraw",!0),d.Factory.addGetterSetter(m,"hitGraphEnabled",!0,l.getBooleanValidator()),i.Collection.mapMethods(m)},7939:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8588),a=n(1455),i=n(4842),s=n(4417),o=n(210),d=n(3774);t.ids={},t.names={},t._removeId=function(e,n){e&&t.ids[e]===n&&delete t.ids[e]},t._addName=function(e,n){n&&(t.names[n]||(t.names[n]=[]),t.names[n].push(e))},t._removeName=function(e,n){if(e){var r=t.names[e];if(r){for(var a=0;a<r.length;a++)r[a]._id===n&&r.splice(a,1);0===r.length&&delete t.names[e]}}};var u="absoluteOpacity",l="allEventListeners",c="absoluteTransform",h="absoluteScale",_="canvas",f="listening",m="mouseenter",p="mouseleave",y="Shape",g=" ",M="stage",v="transform",L="visible",b=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(g),k=(["scaleXChange.konva","scaleYChange.konva"].join(g),new r.Collection),Y=1,w=function(){function e(e){this._id=Y++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this.children=k,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(e),this._shouldFireChangeEvents=!0}return e.prototype.hasChildren=function(){return!1},e.prototype.getChildren=function(){return k},e.prototype._clearCache=function(e){e!==v&&e!==c||!this._cache.get(e)?e?this._cache.delete(e):this._cache.clear():this._cache.get(e).dirty=!0},e.prototype._getCache=function(e,t){var n=this._cache.get(e);return(void 0===n||(e===v||e===c)&&!0===n.dirty)&&(n=t.call(this),this._cache.set(e,n)),n},e.prototype._calculate=function(e,t,n){var r=this;if(!this._attachedDepsListeners.get(e)){var a=t.map((function(e){return e+"Change.konva"})).join(g);this.on(a,(function(){r._clearCache(e)})),this._attachedDepsListeners.set(e,!0)}return this._getCache(e,n)},e.prototype._getCanvasCache=function(){return this._cache.get(_)},e.prototype._clearSelfAndDescendantCache=function(e,t){this._clearCache(e),t&&e===c&&this.fire("_clearTransformCache"),this.isCached()||this.children&&this.children.each((function(t){t._clearSelfAndDescendantCache(e,!0)}))},e.prototype.clearCache=function(){return this._cache.delete(_),this._clearSelfAndDescendantCache(),this},e.prototype.cache=function(e){var t=e||{},n={};void 0!==t.x&&void 0!==t.y&&void 0!==t.width&&void 0!==t.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var a=Math.ceil(t.width||n.width),s=Math.ceil(t.height||n.height),o=t.pixelRatio,d=void 0===t.x?n.x:t.x,l=void 0===t.y?n.y:t.y,c=t.offset||0,f=t.drawBorder||!1;if(a&&s){a+=2*c,s+=2*c,d-=c,l-=c;var m=new i.SceneCanvas({pixelRatio:o,width:a,height:s}),p=new i.SceneCanvas({pixelRatio:o,width:0,height:0}),y=new i.HitCanvas({pixelRatio:1,width:a,height:s}),g=m.getContext(),M=y.getContext();return y.isCache=!0,m.isCache=!0,this._cache.delete("canvas"),this._filterUpToDate=!1,!1===t.imageSmoothingEnabled&&(m.getContext()._context.imageSmoothingEnabled=!1,p.getContext()._context.imageSmoothingEnabled=!1),g.save(),M.save(),g.translate(-d,-l),M.translate(-d,-l),this._isUnderCache=!0,this._clearSelfAndDescendantCache(u),this._clearSelfAndDescendantCache(h),this.drawScene(m,this),this.drawHit(y,this),this._isUnderCache=!1,g.restore(),M.restore(),f&&(g.save(),g.beginPath(),g.rect(0,0,a,s),g.closePath(),g.setAttr("strokeStyle","red"),g.setAttr("lineWidth",5),g.stroke(),g.restore()),this._cache.set(_,{scene:m,filter:p,hit:y,x:d,y:l}),this}r.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},e.prototype.isCached=function(){return this._cache.has("canvas")},e.prototype.getClientRect=function(e){throw new Error('abstract "getClientRect" method call')},e.prototype._transformedRect=function(e,t){var n,r,a,i,s=[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}],o=this.getAbsoluteTransform(t);return s.forEach((function(e){var t=o.point(e);void 0===n&&(n=a=t.x,r=i=t.y),n=Math.min(n,t.x),r=Math.min(r,t.y),a=Math.max(a,t.x),i=Math.max(i,t.y)})),{x:n,y:r,width:a-n,height:i-r}},e.prototype._drawCachedSceneCanvas=function(e){e.save(),e._applyOpacity(this),e._applyGlobalCompositeOperation(this);var t=this._getCanvasCache();e.translate(t.x,t.y);var n=this._getCachedSceneCanvas(),r=n.pixelRatio;e.drawImage(n._canvas,0,0,n.width/r,n.height/r),e.restore()},e.prototype._drawCachedHitCanvas=function(e){var t=this._getCanvasCache(),n=t.hit;e.save(),e.translate(t.x,t.y),e.drawImage(n._canvas,0,0),e.restore()},e.prototype._getCachedSceneCanvas=function(){var e,t,n,a,i=this.filters(),s=this._getCanvasCache(),o=s.scene,d=s.filter,u=d.getContext();if(i){if(!this._filterUpToDate){var l=o.pixelRatio;d.setSize(o.width/o.pixelRatio,o.height/o.pixelRatio);try{for(e=i.length,u.clear(),u.drawImage(o._canvas,0,0,o.getWidth()/l,o.getHeight()/l),t=u.getImageData(0,0,d.getWidth(),d.getHeight()),n=0;n<e;n++)"function"==typeof(a=i[n])?(a.call(this,t),u.putImageData(t,0,0)):r.Util.error("Filter should be type of function, but got "+typeof a+" instead. Please check correct filters")}catch(e){r.Util.error("Unable to apply filter. "+e.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return d}return o},e.prototype.on=function(e,t){if(this._cache&&this._cache.delete(l),3===arguments.length)return this._delegate.apply(this,arguments);var n,r,a,i,s=e.split(g),o=s.length;for(n=0;n<o;n++)a=(r=s[n].split("."))[0],i=r[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:i,handler:t});return this},e.prototype.off=function(e,t){var n,r,a,i,s,o=(e||"").split(g),d=o.length;if(this._cache&&this._cache.delete(l),!e)for(r in this.eventListeners)this._off(r);for(n=0;n<d;n++)if(i=(a=o[n].split("."))[0],s=a[1],i)this.eventListeners[i]&&this._off(i,s,t);else for(r in this.eventListeners)this._off(r,s,t);return this},e.prototype.dispatchEvent=function(e){var t={target:this,type:e.type,evt:e};return this.fire(e.type,t),this},e.prototype.addEventListener=function(e,t){return this.on(e,(function(e){t.call(this,e.evt)})),this},e.prototype.removeEventListener=function(e){return this.off(e),this},e.prototype._delegate=function(e,t,n){var a=this;this.on(e,(function(e){for(var i=e.target.findAncestors(t,!0,a),s=0;s<i.length;s++)(e=r.Util.cloneObject(e)).currentTarget=i[s],n.call(i[s],e)}))},e.prototype.remove=function(){return this.isDragging()&&this.stopDrag(),o.DD._dragElements.delete(this._id),this._remove(),this},e.prototype._clearCaches=function(){this._clearSelfAndDescendantCache(c),this._clearSelfAndDescendantCache(u),this._clearSelfAndDescendantCache(h),this._clearSelfAndDescendantCache(M),this._clearSelfAndDescendantCache(L),this._clearSelfAndDescendantCache(f)},e.prototype._remove=function(){this._clearCaches();var e=this.getParent();e&&e.children&&(e.children.splice(this.index,1),e._setChildrenIndices(),this.parent=null)},e.prototype.destroy=function(){t._removeId(this.id(),this);for(var e=(this.name()||"").split(/\s/g),n=0;n<e.length;n++){var r=e[n];t._removeName(r,this._id)}return this.remove(),this},e.prototype.getAttr=function(e){var t="get"+r.Util._capitalize(e);return r.Util._isFunction(this[t])?this[t]():this.attrs[e]},e.prototype.getAncestors=function(){for(var e=this.getParent(),t=new r.Collection;e;)t.push(e),e=e.getParent();return t},e.prototype.getAttrs=function(){return this.attrs||{}},e.prototype.setAttrs=function(e){var t=this;return this._batchTransformChanges((function(){var n,a;if(!e)return t;for(n in e)"children"!==n&&(a="set"+r.Util._capitalize(n),r.Util._isFunction(t[a])?t[a](e[n]):t._setAttr(n,e[n]))})),this},e.prototype.isListening=function(){return this._getCache(f,this._isListening)},e.prototype._isListening=function(e){if(!this.listening())return!1;var t=this.getParent();return!t||t===e||this===e||t._isListening(e)},e.prototype.isVisible=function(){return this._getCache(L,this._isVisible)},e.prototype._isVisible=function(e){if(!this.visible())return!1;var t=this.getParent();return!t||t===e||this===e||t._isVisible(e)},e.prototype.shouldDrawHit=function(e){if(e)return this._isVisible(e)&&this._isListening(e);var t=this.getLayer(),n=!1;o.DD._dragElements.forEach((function(e){"dragging"===e.dragStatus&&("Stage"===e.node.nodeType||e.node.getLayer()===t)&&(n=!0)}));var r=!s.Konva.hitOnDragEnabled&&n;return this.isListening()&&this.isVisible()&&!r},e.prototype.show=function(){return this.visible(!0),this},e.prototype.hide=function(){return this.visible(!1),this},e.prototype.getZIndex=function(){return this.index||0},e.prototype.getAbsoluteZIndex=function(){var e,t,n,r,a=this.getDepth(),i=this,s=0;return"Stage"!==i.nodeType&&function o(d){for(e=[],t=d.length,n=0;n<t;n++)r=d[n],s++,r.nodeType!==y&&(e=e.concat(r.getChildren().toArray())),r._id===i._id&&(n=t);e.length>0&&e[0].getDepth()<=a&&o(e)}(i.getStage().getChildren()),s},e.prototype.getDepth=function(){for(var e=0,t=this.parent;t;)e++,t=t.parent;return e},e.prototype._batchTransformChanges=function(e){this._batchingTransformChange=!0,e(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache(v),this._clearSelfAndDescendantCache(c,!0)),this._needClearTransformCache=!1},e.prototype.setPosition=function(e){var t=this;return this._batchTransformChanges((function(){t.x(e.x),t.y(e.y)})),this},e.prototype.getPosition=function(){return{x:this.x(),y:this.y()}},e.prototype.getAbsolutePosition=function(e){for(var t=!1,n=this.parent;n;){if(n.isCached()){t=!0;break}n=n.parent}t&&!e&&(e=!0);var a=this.getAbsoluteTransform(e).getMatrix(),i=new r.Transform,s=this.offset();return i.m=a.slice(),i.translate(s.x,s.y),i.getTranslation()},e.prototype.setAbsolutePosition=function(e){var t=this._clearTransform();this.attrs.x=t.x,this.attrs.y=t.y,delete t.x,delete t.y,this._clearCache(v);var n=this._getAbsoluteTransform().copy();return n.invert(),n.translate(e.x,e.y),e={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this._setTransform(t),this.setPosition({x:e.x,y:e.y}),this._clearCache(v),this._clearSelfAndDescendantCache(c),this},e.prototype._setTransform=function(e){var t;for(t in e)this.attrs[t]=e[t]},e.prototype._clearTransform=function(){var e={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,e},e.prototype.move=function(e){var t=e.x,n=e.y,r=this.x(),a=this.y();return void 0!==t&&(r+=t),void 0!==n&&(a+=n),this.setPosition({x:r,y:a}),this},e.prototype._eachAncestorReverse=function(e,t){var n,r,a=[],i=this.getParent();if(!t||t._id!==this._id){for(a.unshift(this);i&&(!t||i._id!==t._id);)a.unshift(i),i=i.parent;for(n=a.length,r=0;r<n;r++)e(a[r])}},e.prototype.rotate=function(e){return this.rotation(this.rotation()+e),this},e.prototype.moveToTop=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var e=this.index;return this.parent.children.splice(e,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},e.prototype.moveUp=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveUp function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.splice(e+1,0,this),this.parent._setChildrenIndices(),!0)},e.prototype.moveDown=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveDown function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.splice(e-1,0,this),this.parent._setChildrenIndices(),!0)},e.prototype.moveToBottom=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},e.prototype.setZIndex=function(e){if(!this.parent)return r.Util.warn("Node has no parent. zIndex parameter is ignored."),this;(e<0||e>=this.parent.children.length)&&r.Util.warn("Unexpected value "+e+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var t=this.index;return this.parent.children.splice(t,1),this.parent.children.splice(e,0,this),this.parent._setChildrenIndices(),this},e.prototype.getAbsoluteOpacity=function(){return this._getCache(u,this._getAbsoluteOpacity)},e.prototype._getAbsoluteOpacity=function(){var e=this.opacity(),t=this.getParent();return t&&!t._isUnderCache&&(e*=t.getAbsoluteOpacity()),e},e.prototype.moveTo=function(e){return this.getParent()!==e&&(this._remove(),e.add(this)),this},e.prototype.toObject=function(){var e,t,n,a,i={},s=this.getAttrs();for(e in i.attrs={},s)t=s[e],r.Util.isObject(t)&&!r.Util._isPlainObject(t)&&!r.Util._isArray(t)||(n="function"==typeof this[e]&&this[e],delete s[e],a=n?n.call(this):null,s[e]=t,a!==t&&(i.attrs[e]=t));return i.className=this.getClassName(),r.Util._prepareToStringify(i)},e.prototype.toJSON=function(){return JSON.stringify(this.toObject())},e.prototype.getParent=function(){return this.parent},e.prototype.findAncestors=function(e,t,n){var r=[];t&&this._isMatch(e)&&r.push(this);for(var a=this.parent;a;){if(a===n)return r;a._isMatch(e)&&r.push(a),a=a.parent}return r},e.prototype.isAncestorOf=function(e){return!1},e.prototype.findAncestor=function(e,t,n){return this.findAncestors(e,t,n)[0]},e.prototype._isMatch=function(e){if(!e)return!1;if("function"==typeof e)return e(this);var t,n,a=e.replace(/ /g,"").split(","),i=a.length;for(t=0;t<i;t++)if(n=a[t],r.Util.isValidSelector(n)||(r.Util.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),r.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),r.Util.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(this.className===n||this.nodeType===n)return!0;return!1},e.prototype.getLayer=function(){var e=this.getParent();return e?e.getLayer():null},e.prototype.getStage=function(){return this._getCache(M,this._getStage)},e.prototype._getStage=function(){var e=this.getParent();return e?e.getStage():void 0},e.prototype.fire=function(e,t,n){return void 0===t&&(t={}),t.target=t.target||this,n?this._fireAndBubble(e,t):this._fire(e,t),this},e.prototype.getAbsoluteTransform=function(e){return e?this._getAbsoluteTransform(e):this._getCache(c,this._getAbsoluteTransform)},e.prototype._getAbsoluteTransform=function(e){var t;if(e)return t=new r.Transform,this._eachAncestorReverse((function(e){var n=e.transformsEnabled();"all"===n?t.multiply(e.getTransform()):"position"===n&&t.translate(e.x()-e.offsetX(),e.y()-e.offsetY())}),e),t;t=this._cache.get(c)||new r.Transform,this.parent?this.parent.getAbsoluteTransform().copyInto(t):t.reset();var n=this.transformsEnabled();if("all"===n)t.multiply(this.getTransform());else if("position"===n){var a=this.attrs.x||0,i=this.attrs.y||0,s=this.attrs.offsetX||0,o=this.attrs.offsetY||0;t.translate(a-s,i-o)}return t.dirty=!1,t},e.prototype.getAbsoluteScale=function(e){for(var t=this;t;)t._isUnderCache&&(e=t),t=t.getParent();var n=this.getAbsoluteTransform(e).decompose();return{x:n.scaleX,y:n.scaleY}},e.prototype.getAbsoluteRotation=function(){return this.getAbsoluteTransform().decompose().rotation},e.prototype.getTransform=function(){return this._getCache(v,this._getTransform)},e.prototype._getTransform=function(){var e,t,n=this._cache.get(v)||new r.Transform;n.reset();var a=this.x(),i=this.y(),o=s.Konva.getAngle(this.rotation()),d=null!==(e=this.attrs.scaleX)&&void 0!==e?e:1,u=null!==(t=this.attrs.scaleY)&&void 0!==t?t:1,l=this.attrs.skewX||0,c=this.attrs.skewY||0,h=this.attrs.offsetX||0,_=this.attrs.offsetY||0;return 0===a&&0===i||n.translate(a,i),0!==o&&n.rotate(o),0===l&&0===c||n.skew(l,c),1===d&&1===u||n.scale(d,u),0===h&&0===_||n.translate(-1*h,-1*_),n.dirty=!1,n},e.prototype.clone=function(e){var t,n,a,i,s,o=r.Util.cloneObject(this.attrs);for(t in e)o[t]=e[t];var d=new this.constructor(o);for(t in this.eventListeners)for(a=(n=this.eventListeners[t]).length,i=0;i<a;i++)(s=n[i]).name.indexOf("konva")<0&&(d.eventListeners[t]||(d.eventListeners[t]=[]),d.eventListeners[t].push(s));return d},e.prototype._toKonvaCanvas=function(e){e=e||{};var t=this.getClientRect(),n=this.getStage(),r=void 0!==e.x?e.x:t.x,a=void 0!==e.y?e.y:t.y,s=e.pixelRatio||1,o=new i.SceneCanvas({width:e.width||t.width||(n?n.width():0),height:e.height||t.height||(n?n.height():0),pixelRatio:s}),d=o.getContext();return d.save(),(r||a)&&d.translate(-1*r,-1*a),this.drawScene(o),d.restore(),o},e.prototype.toCanvas=function(e){return this._toKonvaCanvas(e)._canvas},e.prototype.toDataURL=function(e){var t=(e=e||{}).mimeType||null,n=e.quality||null,r=this._toKonvaCanvas(e).toDataURL(t,n);return e.callback&&e.callback(r),r},e.prototype.toImage=function(e){if(!e||!e.callback)throw"callback required for toImage method config argument";var t=e.callback;delete e.callback,r.Util._urlToImage(this.toDataURL(e),(function(e){t(e)}))},e.prototype.setSize=function(e){return this.width(e.width),this.height(e.height),this},e.prototype.getSize=function(){return{width:this.width(),height:this.height()}},e.prototype.getClassName=function(){return this.className||this.nodeType},e.prototype.getType=function(){return this.nodeType},e.prototype.getDragDistance=function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():s.Konva.dragDistance},e.prototype._off=function(e,t,n){var r,a,i,s=this.eventListeners[e];for(r=0;r<s.length;r++)if(a=s[r].name,i=s[r].handler,!("konva"===a&&"konva"!==t||t&&a!==t||n&&n!==i)){if(s.splice(r,1),0===s.length){delete this.eventListeners[e];break}r--}},e.prototype._fireChangeEvent=function(e,t,n){this._fire(e+"Change",{oldVal:t,newVal:n})},e.prototype.setId=function(e){var n=this.id();return t._removeId(n,this),function(e,n){n&&(t.ids[n]=e)}(this,e),this._setAttr("id",e),this},e.prototype.setName=function(e){var n,r,a=(this.name()||"").split(/\s/g),i=(e||"").split(/\s/g);for(r=0;r<a.length;r++)n=a[r],-1===i.indexOf(n)&&n&&t._removeName(n,this._id);for(r=0;r<i.length;r++)n=i[r],-1===a.indexOf(n)&&n&&t._addName(this,n);return this._setAttr("name",e),this},e.prototype.addName=function(e){if(!this.hasName(e)){var t=this.name(),n=t?t+" "+e:e;this.setName(n)}return this},e.prototype.hasName=function(e){if(!e)return!1;var t=this.name();return!!t&&-1!==(t||"").split(/\s/g).indexOf(e)},e.prototype.removeName=function(e){var t=(this.name()||"").split(/\s/g),n=t.indexOf(e);return-1!==n&&(t.splice(n,1),this.setName(t.join(" "))),this},e.prototype.setAttr=function(e,t){var n=this["set"+r.Util._capitalize(e)];return r.Util._isFunction(n)?n.call(this,t):this._setAttr(e,t),this},e.prototype._setAttr=function(e,t,n){void 0===n&&(n=!1);var a=this.attrs[e];(a!==t||r.Util.isObject(t))&&(null==t?delete this.attrs[e]:this.attrs[e]=t,this._shouldFireChangeEvents&&this._fireChangeEvent(e,a,t))},e.prototype._setComponentAttr=function(e,t,n){var r;void 0!==n&&((r=this.attrs[e])||(this.attrs[e]=this.getAttr(e)),this.attrs[e][t]=n,this._fireChangeEvent(e,r,n))},e.prototype._fireAndBubble=function(e,t,n){if(t&&this.nodeType===y&&(t.target=this),e!==m&&e!==p||!(n&&(this===n||this.isAncestorOf&&this.isAncestorOf(n))||"Stage"===this.nodeType&&!n)){this._fire(e,t);var r=(e===m||e===p)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(t&&!t.cancelBubble||!t)&&this.parent&&this.parent.isListening()&&!r&&(n&&n.parent?this._fireAndBubble.call(this.parent,e,t,n):this._fireAndBubble.call(this.parent,e,t))}},e.prototype._getProtoListeners=function(e){var t=this._cache.get(l);if(!t){t={};for(var n=Object.getPrototypeOf(this);n;)if(n.eventListeners){for(var r in n.eventListeners){var a=n.eventListeners[r],i=t[r]||[];t[r]=a.concat(i)}n=Object.getPrototypeOf(n)}else n=Object.getPrototypeOf(n);this._cache.set(l,t)}return t[e]},e.prototype._fire=function(e,t){(t=t||{}).currentTarget=this,t.type=e;var n=this._getProtoListeners(e);if(n)for(var r=0;r<n.length;r++)n[r].handler.call(this,t);var a=this.eventListeners[e];if(a)for(r=0;r<a.length;r++)a[r].handler.call(this,t)},e.prototype.draw=function(){return this.drawScene(),this.drawHit(),this},e.prototype._createDragElement=function(e){var t=e?e.pointerId:void 0,n=this.getStage(),r=this.getAbsolutePosition(),a=n._getPointerById(t)||n._changedPointerPositions[0]||r;o.DD._dragElements.set(this._id,{node:this,startPointerPos:a,offset:{x:a.x-r.x,y:a.y-r.y},dragStatus:"ready",pointerId:t})},e.prototype.startDrag=function(e,t){void 0===t&&(t=!0),o.DD._dragElements.has(this._id)||this._createDragElement(e),o.DD._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:e&&e.evt},t)},e.prototype._setDragPosition=function(e,t){var n=this.getStage()._getPointerById(t.pointerId);if(n){var a={x:n.x-t.offset.x,y:n.y-t.offset.y},i=this.dragBoundFunc();if(void 0!==i){var s=i.call(this,a,e);s?a=s:r.Util.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===a.x&&this._lastPos.y===a.y||(this.setAbsolutePosition(a),this.getLayer()?this.getLayer().batchDraw():this.getStage()&&this.getStage().batchDraw()),this._lastPos=a}},e.prototype.stopDrag=function(e){var t=o.DD._dragElements.get(this._id);t&&(t.dragStatus="stopped"),o.DD._endDragBefore(e),o.DD._endDragAfter(e)},e.prototype.setDraggable=function(e){this._setAttr("draggable",e),this._dragChange()},e.prototype.isDragging=function(){var e=o.DD._dragElements.get(this._id);return!!e&&"dragging"===e.dragStatus},e.prototype._listenDrag=function(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(e){var t=this;if((void 0===e.evt.button||s.Konva.dragButtons.indexOf(e.evt.button)>=0)&&!this.isDragging()){var n=!1;o.DD._dragElements.forEach((function(e){t.isAncestorOf(e.node)&&(n=!0)})),n||this._createDragElement(e)}}))},e.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;var e=o.DD._dragElements.get(this._id),t=e&&"dragging"===e.dragStatus,n=e&&"ready"===e.dragStatus;t?this.stopDrag():n&&o.DD._dragElements.delete(this._id)}},e.prototype._dragCleanup=function(){this.off("mousedown.konva"),this.off("touchstart.konva")},e.create=function(e,t){return r.Util._isString(e)&&(e=JSON.parse(e)),this._createNode(e,t)},e._createNode=function(t,n){var a,i,o,d=e.prototype.getClassName.call(t),u=t.children;if(n&&(t.attrs.container=n),s._NODES_REGISTRY[d]||(r.Util.warn('Can not find a node with class name "'+d+'". Fallback to "Shape".'),d="Shape"),a=new(0,s._NODES_REGISTRY[d])(t.attrs),u)for(i=u.length,o=0;o<i;o++)a.add(e._createNode(u[o]));return a},e}();t.Node=w,w.prototype.nodeType="Node",w.prototype._attrsAffectingSize=[],w.prototype.eventListeners={},w.prototype.on.call(w.prototype,b,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache(v),this._clearSelfAndDescendantCache(c))})),w.prototype.on.call(w.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(L)})),w.prototype.on.call(w.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(f)})),w.prototype.on.call(w.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(u)}));var D=a.Factory.addGetterSetter;D(w,"zIndex"),D(w,"absolutePosition"),D(w,"position"),D(w,"x",0,d.getNumberValidator()),D(w,"y",0,d.getNumberValidator()),D(w,"globalCompositeOperation","source-over",d.getStringValidator()),D(w,"opacity",1,d.getNumberValidator()),D(w,"name","",d.getStringValidator()),D(w,"id","",d.getStringValidator()),D(w,"rotation",0,d.getNumberValidator()),a.Factory.addComponentsGetterSetter(w,"scale",["x","y"]),D(w,"scaleX",1,d.getNumberValidator()),D(w,"scaleY",1,d.getNumberValidator()),a.Factory.addComponentsGetterSetter(w,"skew",["x","y"]),D(w,"skewX",0,d.getNumberValidator()),D(w,"skewY",0,d.getNumberValidator()),a.Factory.addComponentsGetterSetter(w,"offset",["x","y"]),D(w,"offsetX",0,d.getNumberValidator()),D(w,"offsetY",0,d.getNumberValidator()),D(w,"dragDistance",null,d.getNumberValidator()),D(w,"width",0,d.getNumberValidator()),D(w,"height",0,d.getNumberValidator()),D(w,"listening",!0,d.getBooleanValidator()),D(w,"preventDefault",!0,d.getBooleanValidator()),D(w,"filters",null,(function(e){return this._filterUpToDate=!1,e})),D(w,"visible",!0,d.getBooleanValidator()),D(w,"transformsEnabled","all",d.getStringValidator()),D(w,"size"),D(w,"dragBoundFunc"),D(w,"draggable",!1,d.getBooleanValidator()),a.Factory.backCompat(w,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),r.Collection.mapMethods(w)},8479:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4417),a=new Map,i=void 0!==r.Konva._global.PointerEvent;function s(e){return{evt:e,pointerId:e.pointerId}}function o(e,t){var n=a.get(e);if(n){var r=n.getStage();r&&r.content,a.delete(e),i&&n._fire("lostpointercapture",s(new PointerEvent("lostpointercapture")))}}t.getCapturedShape=function(e){return a.get(e)},t.createEvent=s,t.hasPointerCapture=function(e,t){return a.get(e)===t},t.setPointerCapture=function(e,t){o(e),t.getStage()&&(a.set(e,t),i&&t._fire("gotpointercapture",s(new PointerEvent("gotpointercapture"))))},t.releaseCapture=o},7955:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i,s=n(8588),o=n(1455),d=n(7939),u=n(3774),l=n(4417),c=n(8479),h="hasShadow",_="shadowRGBA",f="patternImage",m="linearGradient",p="radialGradient";function y(){return i||(i=s.Util.createCanvasElement().getContext("2d"))}t.shapes={};var g=function(e){function n(n){for(var r,a=e.call(this,n)||this;!(r=s.Util.getRandomColor())||r in t.shapes;);return a.colorKey=r,t.shapes[r]=a,a}return a(n,e),n.prototype.getContext=function(){return this.getLayer().getContext()},n.prototype.getCanvas=function(){return this.getLayer().getCanvas()},n.prototype.getSceneFunc=function(){return this.attrs.sceneFunc||this._sceneFunc},n.prototype.getHitFunc=function(){return this.attrs.hitFunc||this._hitFunc},n.prototype.hasShadow=function(){return this._getCache(h,this._hasShadow)},n.prototype._hasShadow=function(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())},n.prototype._getFillPattern=function(){return this._getCache(f,this.__getFillPattern)},n.prototype.__getFillPattern=function(){if(this.fillPatternImage()){var e=y().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");return e&&e.setTransform&&e.setTransform({a:this.fillPatternScaleX(),b:0,c:0,d:this.fillPatternScaleY(),e:0,f:0}),e}},n.prototype._getLinearGradient=function(){return this._getCache(m,this.__getLinearGradient)},n.prototype.__getLinearGradient=function(){var e=this.fillLinearGradientColorStops();if(e){for(var t=y(),n=this.fillLinearGradientStartPoint(),r=this.fillLinearGradientEndPoint(),a=t.createLinearGradient(n.x,n.y,r.x,r.y),i=0;i<e.length;i+=2)a.addColorStop(e[i],e[i+1]);return a}},n.prototype._getRadialGradient=function(){return this._getCache(p,this.__getRadialGradient)},n.prototype.__getRadialGradient=function(){var e=this.fillRadialGradientColorStops();if(e){for(var t=y(),n=this.fillRadialGradientStartPoint(),r=this.fillRadialGradientEndPoint(),a=t.createRadialGradient(n.x,n.y,this.fillRadialGradientStartRadius(),r.x,r.y,this.fillRadialGradientEndRadius()),i=0;i<e.length;i+=2)a.addColorStop(e[i],e[i+1]);return a}},n.prototype.getShadowRGBA=function(){return this._getCache(_,this._getShadowRGBA)},n.prototype._getShadowRGBA=function(){if(this.hasShadow()){var e=s.Util.colorToRGBA(this.shadowColor());return"rgba("+e.r+","+e.g+","+e.b+","+e.a*(this.shadowOpacity()||1)+")"}},n.prototype.hasFill=function(){var e=this;return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(function(){return e.fillEnabled()&&!!(e.fill()||e.fillPatternImage()||e.fillLinearGradientColorStops()||e.fillRadialGradientColorStops())}))},n.prototype.hasStroke=function(){var e=this;return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(function(){return e.strokeEnabled()&&e.strokeWidth()&&!(!e.stroke()&&!e.strokeLinearGradientColorStops())}))},n.prototype.hasHitStroke=function(){var e=this.hitStrokeWidth();return"auto"===e?this.hasStroke():this.strokeEnabled()&&!!e},n.prototype.intersects=function(e){var t=this.getStage().bufferHitCanvas;return t.getContext().clear(),this.drawHit(t),t.context.getImageData(Math.round(e.x),Math.round(e.y),1,1).data[3]>0},n.prototype.destroy=function(){return d.Node.prototype.destroy.call(this),delete t.shapes[this.colorKey],delete this.colorKey,this},n.prototype._useBufferCanvas=function(e){var t;if(!this.getStage())return!1;if(null!==(t=this.attrs.perfectDrawEnabled)&&void 0!==t&&!t)return!1;var n=e||this.hasFill(),r=this.hasStroke(),a=1!==this.getAbsoluteOpacity();if(n&&r&&a)return!0;var i=this.hasShadow(),s=this.shadowForStrokeEnabled();return!!(n&&r&&i&&s)},n.prototype.setStrokeHitEnabled=function(e){s.Util.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),e?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)},n.prototype.getStrokeHitEnabled=function(){return 0!==this.hitStrokeWidth()},n.prototype.getSelfRect=function(){var e=this.size();return{x:this._centroid?-e.width/2:0,y:this._centroid?-e.height/2:0,width:e.width,height:e.height}},n.prototype.getClientRect=function(e){void 0===e&&(e={});var t=e.skipTransform,n=e.relativeTo,r=this.getSelfRect(),a=!e.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,i=r.width+a,s=r.height+a,o=!e.skipShadow&&this.hasShadow(),d=o?this.shadowOffsetX():0,u=o?this.shadowOffsetY():0,l=i+Math.abs(d),c=s+Math.abs(u),h=o&&this.shadowBlur()||0,_=l+2*h,f=c+2*h,m=0;Math.round(a/2)!==a/2&&(m=1);var p={width:_+m,height:f+m,x:-Math.round(a/2+h)+Math.min(d,0)+r.x,y:-Math.round(a/2+h)+Math.min(u,0)+r.y};return t?p:this._transformedRect(p,n)},n.prototype.drawScene=function(e,t){var n,r,a=this.getLayer(),i=e||a.getCanvas(),s=i.getContext(),o=this._getCanvasCache(),d=this.getSceneFunc(),u=this.hasShadow(),l=i.isCache,c=i.isCache,h=t===this;if(!this.isVisible()&&!l)return this;if(o){s.save();var _=this.getAbsoluteTransform(t).getMatrix();return s.transform(_[0],_[1],_[2],_[3],_[4],_[5]),this._drawCachedSceneCanvas(s),s.restore(),this}if(!d)return this;if(s.save(),this._useBufferCanvas()&&!c){(r=(n=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this);var f=this.getAbsoluteTransform(t).getMatrix();r.transform(f[0],f[1],f[2],f[3],f[4],f[5]),d.call(this,r,this),r.restore();var m=n.pixelRatio;u&&s._applyShadow(this),s._applyOpacity(this),s._applyGlobalCompositeOperation(this),s.drawImage(n._canvas,0,0,n.width/m,n.height/m)}else s._applyLineJoin(this),h||(f=this.getAbsoluteTransform(t).getMatrix(),s.transform(f[0],f[1],f[2],f[3],f[4],f[5]),s._applyOpacity(this),s._applyGlobalCompositeOperation(this)),u&&s._applyShadow(this),d.call(this,s,this);return s.restore(),this},n.prototype.drawHit=function(e,t){if(!this.shouldDrawHit(t))return this;var n=this.getLayer(),r=e||n.hitCanvas,a=r&&r.getContext(),i=this.hitFunc()||this.sceneFunc(),o=this._getCanvasCache(),d=o&&o.hit;if(this.colorKey||(console.log(this),s.Util.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()")),d){a.save();var u=this.getAbsoluteTransform(t).getMatrix();return a.transform(u[0],u[1],u[2],u[3],u[4],u[5]),this._drawCachedHitCanvas(a),a.restore(),this}if(!i)return this;if(a.save(),a._applyLineJoin(this),this!==t){var l=this.getAbsoluteTransform(t).getMatrix();a.transform(l[0],l[1],l[2],l[3],l[4],l[5])}return i.call(this,a,this),a.restore(),this},n.prototype.drawHitFromCache=function(e){void 0===e&&(e=0);var t,n,r,a,i,o=this._getCanvasCache(),d=this._getCachedSceneCanvas(),u=o.hit,l=u.getContext(),c=u.getWidth(),h=u.getHeight();l.clear(),l.drawImage(d._canvas,0,0,c,h);try{for(r=(n=(t=l.getImageData(0,0,c,h)).data).length,a=s.Util._hexToRgb(this.colorKey),i=0;i<r;i+=4)n[i+3]>e?(n[i]=a.r,n[i+1]=a.g,n[i+2]=a.b,n[i+3]=255):n[i+3]=0;l.putImageData(t,0,0)}catch(e){s.Util.error("Unable to draw hit graph from cached scene canvas. "+e.message)}return this},n.prototype.hasPointerCapture=function(e){return c.hasPointerCapture(e,this)},n.prototype.setPointerCapture=function(e){c.setPointerCapture(e,this)},n.prototype.releaseCapture=function(e){c.releaseCapture(e,this)},n}(d.Node);t.Shape=g,g.prototype._fillFunc=function(e){e.fill()},g.prototype._strokeFunc=function(e){e.stroke()},g.prototype._fillFuncHit=function(e){e.fill()},g.prototype._strokeFuncHit=function(e){e.stroke()},g.prototype._centroid=!1,g.prototype.nodeType="Shape",l._registerNode(g),g.prototype.eventListeners={},g.prototype.on.call(g.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(h)})),g.prototype.on.call(g.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(_)})),g.prototype.on.call(g.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva",(function(){this._clearCache(f)})),g.prototype.on.call(g.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(m)})),g.prototype.on.call(g.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(p)})),o.Factory.addGetterSetter(g,"stroke",void 0,u.getStringOrGradientValidator()),o.Factory.addGetterSetter(g,"strokeWidth",2,u.getNumberValidator()),o.Factory.addGetterSetter(g,"hitStrokeWidth","auto",u.getNumberOrAutoValidator()),o.Factory.addGetterSetter(g,"strokeHitEnabled",!0,u.getBooleanValidator()),o.Factory.addGetterSetter(g,"perfectDrawEnabled",!0,u.getBooleanValidator()),o.Factory.addGetterSetter(g,"shadowForStrokeEnabled",!0,u.getBooleanValidator()),o.Factory.addGetterSetter(g,"lineJoin"),o.Factory.addGetterSetter(g,"lineCap"),o.Factory.addGetterSetter(g,"sceneFunc"),o.Factory.addGetterSetter(g,"hitFunc"),o.Factory.addGetterSetter(g,"dash"),o.Factory.addGetterSetter(g,"dashOffset",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"shadowColor",void 0,u.getStringValidator()),o.Factory.addGetterSetter(g,"shadowBlur",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"shadowOpacity",1,u.getNumberValidator()),o.Factory.addComponentsGetterSetter(g,"shadowOffset",["x","y"]),o.Factory.addGetterSetter(g,"shadowOffsetX",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"shadowOffsetY",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternImage"),o.Factory.addGetterSetter(g,"fill",void 0,u.getStringOrGradientValidator()),o.Factory.addGetterSetter(g,"fillPatternX",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternY",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"fillLinearGradientColorStops"),o.Factory.addGetterSetter(g,"strokeLinearGradientColorStops"),o.Factory.addGetterSetter(g,"fillRadialGradientStartRadius",0),o.Factory.addGetterSetter(g,"fillRadialGradientEndRadius",0),o.Factory.addGetterSetter(g,"fillRadialGradientColorStops"),o.Factory.addGetterSetter(g,"fillPatternRepeat","repeat"),o.Factory.addGetterSetter(g,"fillEnabled",!0),o.Factory.addGetterSetter(g,"strokeEnabled",!0),o.Factory.addGetterSetter(g,"shadowEnabled",!0),o.Factory.addGetterSetter(g,"dashEnabled",!0),o.Factory.addGetterSetter(g,"strokeScaleEnabled",!0),o.Factory.addGetterSetter(g,"fillPriority","color"),o.Factory.addComponentsGetterSetter(g,"fillPatternOffset",["x","y"]),o.Factory.addGetterSetter(g,"fillPatternOffsetX",0,u.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternOffsetY",0,u.getNumberValidator()),o.Factory.addComponentsGetterSetter(g,"fillPatternScale",["x","y"]),o.Factory.addGetterSetter(g,"fillPatternScaleX",1,u.getNumberValidator()),o.Factory.addGetterSetter(g,"fillPatternScaleY",1,u.getNumberValidator()),o.Factory.addComponentsGetterSetter(g,"fillLinearGradientStartPoint",["x","y"]),o.Factory.addComponentsGetterSetter(g,"strokeLinearGradientStartPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillLinearGradientStartPointX",0),o.Factory.addGetterSetter(g,"strokeLinearGradientStartPointX",0),o.Factory.addGetterSetter(g,"fillLinearGradientStartPointY",0),o.Factory.addGetterSetter(g,"strokeLinearGradientStartPointY",0),o.Factory.addComponentsGetterSetter(g,"fillLinearGradientEndPoint",["x","y"]),o.Factory.addComponentsGetterSetter(g,"strokeLinearGradientEndPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillLinearGradientEndPointX",0),o.Factory.addGetterSetter(g,"strokeLinearGradientEndPointX",0),o.Factory.addGetterSetter(g,"fillLinearGradientEndPointY",0),o.Factory.addGetterSetter(g,"strokeLinearGradientEndPointY",0),o.Factory.addComponentsGetterSetter(g,"fillRadialGradientStartPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillRadialGradientStartPointX",0),o.Factory.addGetterSetter(g,"fillRadialGradientStartPointY",0),o.Factory.addComponentsGetterSetter(g,"fillRadialGradientEndPoint",["x","y"]),o.Factory.addGetterSetter(g,"fillRadialGradientEndPointX",0),o.Factory.addGetterSetter(g,"fillRadialGradientEndPointY",0),o.Factory.addGetterSetter(g,"fillPatternRotation",0),o.Factory.backCompat(g,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),s.Collection.mapMethods(g)},8342:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(8783),d=n(4417),u=n(4842),l=n(210),c=n(4417),h=n(8479),_="mouseout",f="mouseleave",m="mouseover",p="mouseenter",y="mousemove",g="mousedown",M="mouseup",v="pointermove",L="pointerdown",b="pointerup",k="contextmenu",Y="click",w="dblclick",D="touchstart",S="touchend",T="dbltap",x="touchmove",C="wheel",P=[p,g,y,M,_,D,x,S,m,C,k,L,v,b,"pointercancel","lostpointercapture"],H=P.length;function F(e,t){e.content.addEventListener(t,(function(n){e["_"+t](n)}),!1)}function O(e){return void 0===e&&(e={}),(e.clipFunc||e.clipWidth||e.clipHeight)&&i.Util.warn("Stage does not support clipping. Please use clip for Layers or Groups."),e}t.stages=[];var E=function(e){function n(n){var r=e.call(this,O(n))||this;return r._pointerPositions=[],r._changedPointerPositions=[],r._buildDOM(),r._bindContentEvents(),t.stages.push(r),r.on("widthChange.konva heightChange.konva",r._resizeDOM),r.on("visibleChange.konva",r._checkVisibility),r.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(function(){O(r.attrs)})),r._checkVisibility(),r}return a(n,e),n.prototype._validateAdd=function(e){var t="Layer"===e.getType(),n="FastLayer"===e.getType();t||n||i.Util.throw("You may only add layers to the stage.")},n.prototype._checkVisibility=function(){if(this.content){var e=this.visible()?"":"none";this.content.style.display=e}},n.prototype.setContainer=function(e){if("string"==typeof e){if("."===e.charAt(0)){var t=e.slice(1);e=document.getElementsByClassName(t)[0]}else{var n;n="#"!==e.charAt(0)?e:e.slice(1),e=document.getElementById(n)}if(!e)throw"Can not find container in document with id "+n}return this._setAttr("container",e),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),e.appendChild(this.content)),this},n.prototype.shouldDrawHit=function(){return!0},n.prototype.clear=function(){var e,t=this.children,n=t.length;for(e=0;e<n;e++)t[e].clear();return this},n.prototype.clone=function(e){return e||(e={}),e.container=document.createElement("div"),o.Container.prototype.clone.call(this,e)},n.prototype.destroy=function(){e.prototype.destroy.call(this);var n=this.content;n&&i.Util._isInDocument(n)&&this.container().removeChild(n);var r=t.stages.indexOf(this);return r>-1&&t.stages.splice(r,1),this},n.prototype.getPointerPosition=function(){var e=this._pointerPositions[0]||this._changedPointerPositions[0];return e?{x:e.x,y:e.y}:(i.Util.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)},n.prototype._getPointerById=function(e){return this._pointerPositions.find((function(t){return t.id===e}))},n.prototype.getPointersPositions=function(){return this._pointerPositions},n.prototype.getStage=function(){return this},n.prototype.getContent=function(){return this.content},n.prototype._toKonvaCanvas=function(e){(e=e||{}).x=e.x||0,e.y=e.y||0,e.width=e.width||this.width(),e.height=e.height||this.height();var t=new u.SceneCanvas({width:e.width,height:e.height,pixelRatio:e.pixelRatio||1}),n=t.getContext()._context,r=this.children;return(e.x||e.y)&&n.translate(-1*e.x,-1*e.y),r.each((function(t){if(t.isVisible()){var r=t._toKonvaCanvas(e);n.drawImage(r._canvas,e.x,e.y,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}})),t},n.prototype.getIntersection=function(e,t){if(!e)return null;var n,r,a=this.children;for(n=a.length-1;n>=0;n--)if(r=a[n].getIntersection(e,t))return r;return null},n.prototype._resizeDOM=function(){var e=this.width(),t=this.height();this.content&&(this.content.style.width=e+"px",this.content.style.height=t+"px"),this.bufferCanvas.setSize(e,t),this.bufferHitCanvas.setSize(e,t),this.children.each((function(n){n.setSize({width:e,height:t}),n.draw()}))},n.prototype.add=function(t){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}e.prototype.add.call(this,t);var r=this.children.length;return r>5&&i.Util.warn("The stage has "+r+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),t.setSize({width:this.width(),height:this.height()}),t.draw(),d.Konva.isBrowser&&this.content.appendChild(t.canvas._canvas),this},n.prototype.getParent=function(){return null},n.prototype.getLayer=function(){return null},n.prototype.hasPointerCapture=function(e){return h.hasPointerCapture(e,this)},n.prototype.setPointerCapture=function(e){h.setPointerCapture(e,this)},n.prototype.releaseCapture=function(e){h.releaseCapture(e,this)},n.prototype.getLayers=function(){return this.getChildren()},n.prototype._bindContentEvents=function(){if(d.Konva.isBrowser)for(var e=0;e<H;e++)F(this,P[e])},n.prototype._mouseenter=function(e){this.setPointersPositions(e),this._fire(p,{evt:e,target:this,currentTarget:this})},n.prototype._mouseover=function(e){this.setPointersPositions(e),this._fire("contentMouseover",{evt:e}),this._fire(m,{evt:e,target:this,currentTarget:this})},n.prototype._mouseout=function(e){var t;this.setPointersPositions(e);var n=(null===(t=this.targetShape)||void 0===t?void 0:t.getStage())?this.targetShape:null,r=!l.DD.isDragging||d.Konva.hitOnDragEnabled;n&&r?(n._fireAndBubble(_,{evt:e}),n._fireAndBubble(f,{evt:e}),this._fire(f,{evt:e,target:this,currentTarget:this}),this.targetShape=null):r&&(this._fire(f,{evt:e,target:this,currentTarget:this}),this._fire(_,{evt:e,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[],this._fire("contentMouseout",{evt:e})},n.prototype._mousemove=function(e){var t;if(d.Konva.UA.ieMobile)return this._touchmove(e);this.setPointersPositions(e);var n,r=i.Util._getFirstPointerId(e),a=(null===(t=this.targetShape)||void 0===t?void 0:t.getStage())?this.targetShape:null,s=!l.DD.isDragging||d.Konva.hitOnDragEnabled;s&&((n=this.getIntersection(this.getPointerPosition()))&&n.isListening()?s&&a!==n?(a&&(a._fireAndBubble(_,{evt:e,pointerId:r},n),a._fireAndBubble(f,{evt:e,pointerId:r},n)),n._fireAndBubble(m,{evt:e,pointerId:r},a),n._fireAndBubble(p,{evt:e,pointerId:r},a),n._fireAndBubble(y,{evt:e,pointerId:r}),this.targetShape=n):n._fireAndBubble(y,{evt:e,pointerId:r}):(a&&s&&(a._fireAndBubble(_,{evt:e,pointerId:r}),a._fireAndBubble(f,{evt:e,pointerId:r}),this._fire(m,{evt:e,target:this,currentTarget:this,pointerId:r}),this.targetShape=null),this._fire(y,{evt:e,target:this,currentTarget:this,pointerId:r})),this._fire("contentMousemove",{evt:e})),e.cancelable&&e.preventDefault()},n.prototype._mousedown=function(e){if(d.Konva.UA.ieMobile)return this._touchstart(e);this.setPointersPositions(e);var t=i.Util._getFirstPointerId(e),n=this.getIntersection(this.getPointerPosition());l.DD.justDragged=!1,d.Konva.listenClickTap=!0,n&&n.isListening()?(this.clickStartShape=n,n._fireAndBubble(g,{evt:e,pointerId:t})):this._fire(g,{evt:e,target:this,currentTarget:this,pointerId:t}),this._fire("contentMousedown",{evt:e})},n.prototype._mouseup=function(e){if(d.Konva.UA.ieMobile)return this._touchend(e);this.setPointersPositions(e);var t=i.Util._getFirstPointerId(e),n=this.getIntersection(this.getPointerPosition()),r=this.clickStartShape,a=this.clickEndShape,s=!1;d.Konva.inDblClickWindow?(s=!0,clearTimeout(this.dblTimeout)):l.DD.justDragged||(d.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){d.Konva.inDblClickWindow=!1}),d.Konva.dblClickWindow),n&&n.isListening()?(this.clickEndShape=n,n._fireAndBubble(M,{evt:e,pointerId:t}),d.Konva.listenClickTap&&r&&r._id===n._id&&(n._fireAndBubble(Y,{evt:e,pointerId:t}),s&&a&&a===n&&n._fireAndBubble(w,{evt:e,pointerId:t}))):(this.clickEndShape=null,this._fire(M,{evt:e,target:this,currentTarget:this,pointerId:t}),d.Konva.listenClickTap&&this._fire(Y,{evt:e,target:this,currentTarget:this,pointerId:t}),s&&this._fire(w,{evt:e,target:this,currentTarget:this,pointerId:t})),this._fire("contentMouseup",{evt:e}),d.Konva.listenClickTap&&(this._fire("contentClick",{evt:e}),s&&this._fire("contentDblclick",{evt:e})),d.Konva.listenClickTap=!1,e.cancelable&&e.preventDefault()},n.prototype._contextmenu=function(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble(k,{evt:e}):this._fire(k,{evt:e,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:e})},n.prototype._touchstart=function(e){var t=this;this.setPointersPositions(e);var n=!1;this._changedPointerPositions.forEach((function(r){var a=t.getIntersection(r);d.Konva.listenClickTap=!0,l.DD.justDragged=!1,a&&a.isListening()&&(d.Konva.captureTouchEventsEnabled&&a.setPointerCapture(r.id),t.tapStartShape=a,a._fireAndBubble(D,{evt:e,pointerId:r.id},t),n=!0,a.isListening()&&a.preventDefault()&&e.cancelable&&e.preventDefault())})),n||this._fire(D,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchstart",{evt:e})},n.prototype._touchmove=function(e){var t=this;if(this.setPointersPositions(e),!l.DD.isDragging||d.Konva.hitOnDragEnabled){var n=!1,r={};this._changedPointerPositions.forEach((function(a){var i=h.getCapturedShape(a.id)||t.getIntersection(a);i&&i.isListening()&&(r[i._id]||(r[i._id]=!0,i._fireAndBubble(x,{evt:e,pointerId:a.id}),n=!0,i.isListening()&&i.preventDefault()&&e.cancelable&&e.preventDefault()))})),n||this._fire(x,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchmove",{evt:e})}l.DD.isDragging&&l.DD.node.preventDefault()&&e.cancelable&&e.preventDefault()},n.prototype._touchend=function(e){var t=this;this.setPointersPositions(e);var n=this.tapEndShape,r=!1;d.Konva.inDblClickWindow?(r=!0,clearTimeout(this.dblTimeout)):l.DD.justDragged||(d.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){d.Konva.inDblClickWindow=!1}),d.Konva.dblClickWindow);var a=!1,i={},s=!1,o=!1;this._changedPointerPositions.forEach((function(u){var l=h.getCapturedShape(u.id)||t.getIntersection(u);l&&l.releaseCapture(u.id),l&&l.isListening()&&(i[l._id]||(i[l._id]=!0,t.tapEndShape=l,l._fireAndBubble(S,{evt:e,pointerId:u.id}),a=!0,d.Konva.listenClickTap&&l===t.tapStartShape&&(s=!0,l._fireAndBubble("tap",{evt:e,pointerId:u.id}),r&&n&&n===l&&(o=!0,l._fireAndBubble(T,{evt:e,pointerId:u.id}))),l.isListening()&&l.preventDefault()&&e.cancelable&&e.preventDefault()))})),a||this._fire(S,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),d.Konva.listenClickTap&&!s&&(this.tapEndShape=null,this._fire("tap",{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})),r&&!o&&this._fire(T,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchend",{evt:e}),d.Konva.listenClickTap&&(this._fire("contentTap",{evt:e}),r&&this._fire("contentDbltap",{evt:e})),this.preventDefault()&&e.cancelable&&e.preventDefault(),d.Konva.listenClickTap=!1},n.prototype._wheel=function(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble(C,{evt:e}):this._fire(C,{evt:e,target:this,currentTarget:this}),this._fire("contentWheel",{evt:e})},n.prototype._pointerdown=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(L,h.createEvent(e))}},n.prototype._pointermove=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(v,h.createEvent(e))}},n.prototype._pointerup=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(b,h.createEvent(e)),h.releaseCapture(e.pointerId)}},n.prototype._pointercancel=function(e){if(d.Konva._pointerEventsEnabled){this.setPointersPositions(e);var t=h.getCapturedShape(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(b,h.createEvent(e)),h.releaseCapture(e.pointerId)}},n.prototype._lostpointercapture=function(e){h.releaseCapture(e.pointerId)},n.prototype.setPointersPositions=function(e){var t=this,n=this._getContentPosition(),r=null,a=null;void 0!==(e=e||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],i.Collection.prototype.each.call(e.touches,(function(e){t._pointerPositions.push({id:e.identifier,x:(e.clientX-n.left)/n.scaleX,y:(e.clientY-n.top)/n.scaleY})})),i.Collection.prototype.each.call(e.changedTouches||e.touches,(function(e){t._changedPointerPositions.push({id:e.identifier,x:(e.clientX-n.left)/n.scaleX,y:(e.clientY-n.top)/n.scaleY})}))):(r=(e.clientX-n.left)/n.scaleX,a=(e.clientY-n.top)/n.scaleY,this.pointerPos={x:r,y:a},this._pointerPositions=[{x:r,y:a,id:i.Util._getFirstPointerId(e)}],this._changedPointerPositions=[{x:r,y:a,id:i.Util._getFirstPointerId(e)}])},n.prototype._setPointerPosition=function(e){i.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(e)},n.prototype._getContentPosition=function(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var e=this.content.getBoundingClientRect();return{top:e.top,left:e.left,scaleX:e.width/this.content.clientWidth||1,scaleY:e.height/this.content.clientHeight||1}},n.prototype._buildDOM=function(){if(this.bufferCanvas=new u.SceneCanvas({width:this.width(),height:this.height()}),this.bufferHitCanvas=new u.HitCanvas({pixelRatio:1,width:this.width(),height:this.height()}),d.Konva.isBrowser){var e=this.container();if(!e)throw"Stage has no container. A container is required.";e.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),e.appendChild(this.content),this._resizeDOM()}},n.prototype.cache=function(){return i.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this},n.prototype.clearCache=function(){return this},n.prototype.batchDraw=function(){return this.children.each((function(e){e.batchDraw()})),this},n}(o.Container);t.Stage=E,E.prototype.nodeType="Stage",c._registerNode(E),s.Factory.addGetterSetter(E,"container")},8017:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8588),a=n(6745),i=n(7939),s=n(4417),o={node:1,duration:1,easing:1,onFinish:1,yoyo:1},d=0,u=["fill","stroke","shadowColor"],l=function(){function e(e,t,n,r,a,i,s){this.prop=e,this.propFunc=t,this.begin=r,this._pos=r,this.duration=i,this._change=0,this.prevPos=0,this.yoyo=s,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=a-this.begin,this.pause()}return e.prototype.fire=function(e){var t=this[e];t&&t()},e.prototype.setTime=function(e){e>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():e<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=e,this.update())},e.prototype.getTime=function(){return this._time},e.prototype.setPosition=function(e){this.prevPos=this._pos,this.propFunc(e),this._pos=e},e.prototype.getPosition=function(e){return void 0===e&&(e=this._time),this.func(e,this.begin,this._change,this.duration)},e.prototype.play=function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},e.prototype.reverse=function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},e.prototype.seek=function(e){this.pause(),this._time=e,this.update(),this.fire("onSeek")},e.prototype.reset=function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},e.prototype.finish=function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},e.prototype.update=function(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")},e.prototype.onEnterFrame=function(){var e=this.getTimer()-this._startTime;2===this.state?this.setTime(e):3===this.state&&this.setTime(this.duration-e)},e.prototype.pause=function(){this.state=1,this.fire("onPause")},e.prototype.getTimer=function(){return(new Date).getTime()},e}(),c=function(){function e(n){var i,u,c=this,h=n.node,_=h._id,f=n.easing||t.Easings.Linear,m=!!n.yoyo;i=void 0===n.duration?.3:0===n.duration?.001:n.duration,this.node=h,this._id=d++;var p=h.getLayer()||(h instanceof s.Konva.Stage?h.getLayers():null);for(u in p||r.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new a.Animation((function(){c.tween.onEnterFrame()}),p),this.tween=new l(u,(function(e){c._tweenFunc(e)}),f,0,1,1e3*i,m),this._addListeners(),e.attrs[_]||(e.attrs[_]={}),e.attrs[_][this._id]||(e.attrs[_][this._id]={}),e.tweens[_]||(e.tweens[_]={}),n)void 0===o[u]&&this._addAttr(u,n[u]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset,this.onUpdate=n.onUpdate}return e.prototype._addAttr=function(t,n){var a,i,s,o,d,l,c,h,_=this.node,f=_._id;if((s=e.tweens[f][t])&&delete e.attrs[f][s][t],a=_.getAttr(t),r.Util._isArray(n))if(i=[],d=Math.max(n.length,a.length),"points"===t&&n.length!==a.length&&(n.length>a.length?(c=a,a=r.Util._prepareArrayForTween(a,n,_.closed())):(l=n,n=r.Util._prepareArrayForTween(n,a,_.closed()))),0===t.indexOf("fill"))for(o=0;o<d;o++)if(o%2==0)i.push(n[o]-a[o]);else{var m=r.Util.colorToRGBA(a[o]);h=r.Util.colorToRGBA(n[o]),a[o]=m,i.push({r:h.r-m.r,g:h.g-m.g,b:h.b-m.b,a:h.a-m.a})}else for(o=0;o<d;o++)i.push(n[o]-a[o]);else-1!==u.indexOf(t)?(a=r.Util.colorToRGBA(a),i={r:(h=r.Util.colorToRGBA(n)).r-a.r,g:h.g-a.g,b:h.b-a.b,a:h.a-a.a}):i=n-a;e.attrs[f][this._id][t]={start:a,diff:i,end:n,trueEnd:l,trueStart:c},e.tweens[f][t]=this._id},e.prototype._tweenFunc=function(t){var n,a,i,s,o,d,l,c,h=this.node,_=e.attrs[h._id][this._id];for(n in _){if(i=(a=_[n]).start,s=a.diff,c=a.end,r.Util._isArray(i))if(o=[],l=Math.max(i.length,c.length),0===n.indexOf("fill"))for(d=0;d<l;d++)d%2==0?o.push((i[d]||0)+s[d]*t):o.push("rgba("+Math.round(i[d].r+s[d].r*t)+","+Math.round(i[d].g+s[d].g*t)+","+Math.round(i[d].b+s[d].b*t)+","+(i[d].a+s[d].a*t)+")");else for(d=0;d<l;d++)o.push((i[d]||0)+s[d]*t);else o=-1!==u.indexOf(n)?"rgba("+Math.round(i.r+s.r*t)+","+Math.round(i.g+s.g*t)+","+Math.round(i.b+s.b*t)+","+(i.a+s.a*t)+")":i+s*t;h.setAttr(n,o)}},e.prototype._addListeners=function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){var n=t.node,r=e.attrs[n._id][t._id];r.points&&r.points.trueEnd&&n.setAttr("points",r.points.trueEnd),t.onFinish&&t.onFinish.call(t)},this.tween.onReset=function(){var n=t.node,r=e.attrs[n._id][t._id];r.points&&r.points.trueStart&&n.points(r.points.trueStart),t.onReset&&t.onReset()},this.tween.onUpdate=function(){t.onUpdate&&t.onUpdate.call(t)}},e.prototype.play=function(){return this.tween.play(),this},e.prototype.reverse=function(){return this.tween.reverse(),this},e.prototype.reset=function(){return this.tween.reset(),this},e.prototype.seek=function(e){return this.tween.seek(1e3*e),this},e.prototype.pause=function(){return this.tween.pause(),this},e.prototype.finish=function(){return this.tween.finish(),this},e.prototype.destroy=function(){var t,n=this.node._id,r=this._id,a=e.tweens[n];for(t in this.pause(),a)delete e.tweens[n][t];delete e.attrs[n][r]},e.attrs={},e.tweens={},e}();t.Tween=c,i.Node.prototype.to=function(e){var t=e.onFinish;e.node=this,e.onFinish=function(){this.destroy(),t&&t()},new c(e).play()},t.Easings={BackEaseIn:function(e,t,n,r){var a=1.70158;return n*(e/=r)*e*((a+1)*e-a)+t},BackEaseOut:function(e,t,n,r){var a=1.70158;return n*((e=e/r-1)*e*((a+1)*e+a)+1)+t},BackEaseInOut:function(e,t,n,r){var a=1.70158;return(e/=r/2)<1?n/2*(e*e*((1+(a*=1.525))*e-a))+t:n/2*((e-=2)*e*((1+(a*=1.525))*e+a)+2)+t},ElasticEaseIn:function(e,t,n,r,a,i){var s=0;return 0===e?t:1==(e/=r)?t+n:(i||(i=.3*r),!a||a<Math.abs(n)?(a=n,s=i/4):s=i/(2*Math.PI)*Math.asin(n/a),-a*Math.pow(2,10*(e-=1))*Math.sin((e*r-s)*(2*Math.PI)/i)+t)},ElasticEaseOut:function(e,t,n,r,a,i){var s=0;return 0===e?t:1==(e/=r)?t+n:(i||(i=.3*r),!a||a<Math.abs(n)?(a=n,s=i/4):s=i/(2*Math.PI)*Math.asin(n/a),a*Math.pow(2,-10*e)*Math.sin((e*r-s)*(2*Math.PI)/i)+n+t)},ElasticEaseInOut:function(e,t,n,r,a,i){var s=0;return 0===e?t:2==(e/=r/2)?t+n:(i||(i=r*(.3*1.5)),!a||a<Math.abs(n)?(a=n,s=i/4):s=i/(2*Math.PI)*Math.asin(n/a),e<1?a*Math.pow(2,10*(e-=1))*Math.sin((e*r-s)*(2*Math.PI)/i)*-.5+t:a*Math.pow(2,-10*(e-=1))*Math.sin((e*r-s)*(2*Math.PI)/i)*.5+n+t)},BounceEaseOut:function(e,t,n,r){return(e/=r)<1/2.75?n*(7.5625*e*e)+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t},BounceEaseIn:function(e,n,r,a){return r-t.Easings.BounceEaseOut(a-e,0,r,a)+n},BounceEaseInOut:function(e,n,r,a){return e<a/2?.5*t.Easings.BounceEaseIn(2*e,0,r,a)+n:.5*t.Easings.BounceEaseOut(2*e-a,0,r,a)+.5*r+n},EaseIn:function(e,t,n,r){return n*(e/=r)*e+t},EaseOut:function(e,t,n,r){return-n*(e/=r)*(e-2)+t},EaseInOut:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},StrongEaseIn:function(e,t,n,r){return n*(e/=r)*e*e*e*e+t},StrongEaseOut:function(e,t,n,r){return n*((e=e/r-1)*e*e*e*e+1)+t},StrongEaseInOut:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t},Linear:function(e,t,n,r){return n*e/r+t}}},8588:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4417),a=function(){function e(){}return e.toCollection=function(t){var n,r=new e,a=t.length;for(n=0;n<a;n++)r.push(t[n]);return r},e._mapMethod=function(t){e.prototype[t]=function(){var e,n=this.length,r=[].slice.call(arguments);for(e=0;e<n;e++)this[e][t].apply(this[e],r);return this}},e.mapMethods=function(t){var n=t.prototype;for(var r in n)e._mapMethod(r)},e}();t.Collection=a,a.prototype=[],a.prototype.each=function(e){for(var t=0;t<this.length;t++)e(this[t],t)},a.prototype.toArray=function(){var e,t=[],n=this.length;for(e=0;e<n;e++)t.push(this[e]);return t};var i=function(){function e(e){void 0===e&&(e=[1,0,0,1,0,0]),this.dirty=!1,this.m=e&&e.slice()||[1,0,0,1,0,0]}return e.prototype.reset=function(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0},e.prototype.copy=function(){return new e(this.m)},e.prototype.copyInto=function(e){e.m[0]=this.m[0],e.m[1]=this.m[1],e.m[2]=this.m[2],e.m[3]=this.m[3],e.m[4]=this.m[4],e.m[5]=this.m[5]},e.prototype.point=function(e){var t=this.m;return{x:t[0]*e.x+t[2]*e.y+t[4],y:t[1]*e.x+t[3]*e.y+t[5]}},e.prototype.translate=function(e,t){return this.m[4]+=this.m[0]*e+this.m[2]*t,this.m[5]+=this.m[1]*e+this.m[3]*t,this},e.prototype.scale=function(e,t){return this.m[0]*=e,this.m[1]*=e,this.m[2]*=t,this.m[3]*=t,this},e.prototype.rotate=function(e){var t=Math.cos(e),n=Math.sin(e),r=this.m[0]*t+this.m[2]*n,a=this.m[1]*t+this.m[3]*n,i=this.m[0]*-n+this.m[2]*t,s=this.m[1]*-n+this.m[3]*t;return this.m[0]=r,this.m[1]=a,this.m[2]=i,this.m[3]=s,this},e.prototype.getTranslation=function(){return{x:this.m[4],y:this.m[5]}},e.prototype.skew=function(e,t){var n=this.m[0]+this.m[2]*t,r=this.m[1]+this.m[3]*t,a=this.m[2]+this.m[0]*e,i=this.m[3]+this.m[1]*e;return this.m[0]=n,this.m[1]=r,this.m[2]=a,this.m[3]=i,this},e.prototype.multiply=function(e){var t=this.m[0]*e.m[0]+this.m[2]*e.m[1],n=this.m[1]*e.m[0]+this.m[3]*e.m[1],r=this.m[0]*e.m[2]+this.m[2]*e.m[3],a=this.m[1]*e.m[2]+this.m[3]*e.m[3],i=this.m[0]*e.m[4]+this.m[2]*e.m[5]+this.m[4],s=this.m[1]*e.m[4]+this.m[3]*e.m[5]+this.m[5];return this.m[0]=t,this.m[1]=n,this.m[2]=r,this.m[3]=a,this.m[4]=i,this.m[5]=s,this},e.prototype.invert=function(){var e=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),t=this.m[3]*e,n=-this.m[1]*e,r=-this.m[2]*e,a=this.m[0]*e,i=e*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),s=e*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=t,this.m[1]=n,this.m[2]=r,this.m[3]=a,this.m[4]=i,this.m[5]=s,this},e.prototype.getMatrix=function(){return this.m},e.prototype.setAbsolutePosition=function(e,t){var n=this.m[0],r=this.m[1],a=this.m[2],i=this.m[3],s=this.m[4],o=(n*(t-this.m[5])-r*(e-s))/(n*i-r*a),d=(e-s-a*o)/n;return this.translate(d,o)},e.prototype.decompose=function(){var e=this.m[0],n=this.m[1],r=this.m[2],a=this.m[3],i=e*a-n*r,s={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=e||0!=n){var o=Math.sqrt(e*e+n*n);s.rotation=n>0?Math.acos(e/o):-Math.acos(e/o),s.scaleX=o,s.scaleY=i/o,s.skewX=(e*r+n*a)/i,s.skewY=0}else if(0!=r||0!=a){var d=Math.sqrt(r*r+a*a);s.rotation=Math.PI/2-(a>0?Math.acos(-r/d):-Math.acos(r/d)),s.scaleX=i/d,s.scaleY=d,s.skewX=0,s.skewY=(e*r+n*a)/i}return s.rotation=t.Util._getRotation(s.rotation),s},e}();t.Transform=i;var s=Math.PI/180,o=180/Math.PI,d="Konva error: ",u={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},l=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,c=[];t.Util={_isElement:function(e){return!(!e||1!=e.nodeType)},_isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},_isPlainObject:function(e){return!!e&&e.constructor===Object},_isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},_isNumber:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&!isNaN(e)&&isFinite(e)},_isString:function(e){return"[object String]"===Object.prototype.toString.call(e)},_isBoolean:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},isObject:function(e){return e instanceof Object},isValidSelector:function(e){if("string"!=typeof e)return!1;var t=e[0];return"#"===t||"."===t||t===t.toUpperCase()},_sign:function(e){return 0===e?0:e>0?1:-1},requestAnimFrame:function(e){c.push(e),1===c.length&&requestAnimationFrame((function(){var e=c;c=[],e.forEach((function(e){e()}))}))},createCanvasElement:function(){var e=document.createElement("canvas");try{e.style=e.style||{}}catch(e){}return e},createImageElement:function(){return document.createElement("img")},_isInDocument:function(e){for(;e=e.parentNode;)if(e==document)return!0;return!1},_simplifyArray:function(e){var n,r,a=[],i=e.length,s=t.Util;for(n=0;n<i;n++)r=e[n],s._isNumber(r)?r=Math.round(1e3*r)/1e3:s._isString(r)||(r=r.toString()),a.push(r);return a},_urlToImage:function(e,t){var n=new r.glob.Image;n.onload=function(){t(n)},n.src=e},_rgbToHex:function(e,t,n){return((1<<24)+(e<<16)+(t<<8)+n).toString(16).slice(1)},_hexToRgb:function(e){e=e.replace("#","");var t=parseInt(e,16);return{r:t>>16&255,g:t>>8&255,b:255&t}},getRandomColor:function(){for(var e=(16777215*Math.random()<<0).toString(16);e.length<6;)e="0"+e;return"#"+e},get:function(e,t){return void 0===e?t:e},getRGB:function(e){var t;return e in u?{r:(t=u[e])[0],g:t[1],b:t[2]}:"#"===e[0]?this._hexToRgb(e.substring(1)):"rgb("===e.substr(0,4)?(t=l.exec(e.replace(/ /g,"")),{r:parseInt(t[1],10),g:parseInt(t[2],10),b:parseInt(t[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(e){return e=e||"black",t.Util._namedColorToRBA(e)||t.Util._hex3ColorToRGBA(e)||t.Util._hex6ColorToRGBA(e)||t.Util._rgbColorToRGBA(e)||t.Util._rgbaColorToRGBA(e)||t.Util._hslColorToRGBA(e)},_namedColorToRBA:function(e){var t=u[e.toLowerCase()];return t?{r:t[0],g:t[1],b:t[2],a:1}:null},_rgbColorToRGBA:function(e){if(0===e.indexOf("rgb(")){var t=(e=e.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:1}}},_rgbaColorToRGBA:function(e){if(0===e.indexOf("rgba(")){var t=(e=e.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:t[3]}}},_hex6ColorToRGBA:function(e){if("#"===e[0]&&7===e.length)return{r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(e){if("#"===e[0]&&4===e.length)return{r:parseInt(e[1]+e[1],16),g:parseInt(e[2]+e[2],16),b:parseInt(e[3]+e[3],16),a:1}},_hslColorToRGBA:function(e){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(e)){var t,n=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e),r=(n[0],n.slice(1)),a=Number(r[0])/360,i=Number(r[1])/100,s=Number(r[2])/100,o=void 0,d=void 0;if(0===i)return d=255*s,{r:Math.round(d),g:Math.round(d),b:Math.round(d),a:1};for(var u=2*s-(t=s<.5?s*(1+i):s+i-s*i),l=[0,0,0],c=0;c<3;c++)(o=a+1/3*-(c-1))<0&&o++,o>1&&o--,d=6*o<1?u+6*(t-u)*o:2*o<1?t:3*o<2?u+(t-u)*(2/3-o)*6:u,l[c]=255*d;return{r:Math.round(l[0]),g:Math.round(l[1]),b:Math.round(l[2]),a:1}}},haveIntersection:function(e,t){return!(t.x>e.x+e.width||t.x+t.width<e.x||t.y>e.y+e.height||t.y+t.height<e.y)},cloneObject:function(e){var t={};for(var n in e)this._isPlainObject(e[n])?t[n]=this.cloneObject(e[n]):this._isArray(e[n])?t[n]=this.cloneArray(e[n]):t[n]=e[n];return t},cloneArray:function(e){return e.slice(0)},_degToRad:function(e){return e*s},_radToDeg:function(e){return e*o},_getRotation:function(e){return r.Konva.angleDeg?t.Util._radToDeg(e):e},_capitalize:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},throw:function(e){throw new Error(d+e)},error:function(e){console.error(d+e)},warn:function(e){r.Konva.showWarnings&&console.warn("Konva warning: "+e)},extend:function(e,t){function n(){this.constructor=e}n.prototype=t.prototype;var r=e.prototype;for(var a in e.prototype=new n,r)r.hasOwnProperty(a)&&(e.prototype[a]=r[a]);e.__super__=t.prototype,e.super=t},_getControlPoints:function(e,t,n,r,a,i,s){var o=Math.sqrt(Math.pow(n-e,2)+Math.pow(r-t,2)),d=Math.sqrt(Math.pow(a-n,2)+Math.pow(i-r,2)),u=s*o/(o+d),l=s*d/(o+d);return[n-u*(a-e),r-u*(i-t),n+l*(a-e),r+l*(i-t)]},_expandPoints:function(e,n){var r,a,i=e.length,s=[];for(r=2;r<i-2;r+=2)a=t.Util._getControlPoints(e[r-2],e[r-1],e[r],e[r+1],e[r+2],e[r+3],n),s.push(a[0]),s.push(a[1]),s.push(e[r]),s.push(e[r+1]),s.push(a[2]),s.push(a[3]);return s},each:function(e,t){for(var n in e)t(n,e[n])},_inRange:function(e,t,n){return t<=e&&e<n},_getProjectionToSegment:function(e,t,n,r,a,i){var s,o,d,u=(e-n)*(e-n)+(t-r)*(t-r);if(0==u)s=e,o=t,d=(a-n)*(a-n)+(i-r)*(i-r);else{var l=((a-e)*(n-e)+(i-t)*(r-t))/u;l<0?(s=e,o=t,d=(e-a)*(e-a)+(t-i)*(t-i)):l>1?(s=n,o=r,d=(n-a)*(n-a)+(r-i)*(r-i)):d=((s=e+l*(n-e))-a)*(s-a)+((o=t+l*(r-t))-i)*(o-i)}return[s,o,d]},_getProjectionToLine:function(e,n,r){var a=t.Util.cloneObject(e),i=Number.MAX_VALUE;return n.forEach((function(s,o){if(r||o!==n.length-1){var d=n[(o+1)%n.length],u=t.Util._getProjectionToSegment(s.x,s.y,d.x,d.y,e.x,e.y),l=u[0],c=u[1],h=u[2];h<i&&(a.x=l,a.y=c,i=h)}})),a},_prepareArrayForTween:function(e,n,r){var a,i=[],s=[];if(e.length>n.length){var o=n;n=e,e=o}for(a=0;a<e.length;a+=2)i.push({x:e[a],y:e[a+1]});for(a=0;a<n.length;a+=2)s.push({x:n[a],y:n[a+1]});var d=[];return s.forEach((function(e){var n=t.Util._getProjectionToLine(e,i,r);d.push(n.x),d.push(n.y)})),d},_prepareToStringify:function(e){var n;for(var r in e.visitedByCircularReferenceRemoval=!0,e)if(e.hasOwnProperty(r)&&e[r]&&"object"==typeof e[r])if(n=Object.getOwnPropertyDescriptor(e,r),e[r].visitedByCircularReferenceRemoval||t.Util._isElement(e[r])){if(!n.configurable)return null;delete e[r]}else if(null===t.Util._prepareToStringify(e[r])){if(!n.configurable)return null;delete e[r]}return delete e.visitedByCircularReferenceRemoval,e},_assign:function(e,t){for(var n in t)e[n]=t[n];return e},_getFirstPointerId:function(e){return e.touches?e.changedTouches[0].identifier:999}}},3774:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4417),a=n(8588);function i(e){return a.Util._isString(e)?'"'+e+'"':"[object Number]"===Object.prototype.toString.call(e)||a.Util._isBoolean(e)?e:Object.prototype.toString.call(e)}t.RGBComponent=function(e){return e>255?255:e<0?0:Math.round(e)},t.alphaComponent=function(e){return e>1?1:e<1e-4?1e-4:e},t.getNumberValidator=function(){if(r.Konva.isUnminified)return function(e,t){return a.Util._isNumber(e)||a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a number.'),e}},t.getNumberOrArrayOfNumbersValidator=function(e){if(r.Konva.isUnminified)return function(t,n){var r=a.Util._isNumber(t),s=a.Util._isArray(t)&&t.length==e;return r||s||a.Util.warn(i(t)+' is a not valid value for "'+n+'" attribute. The value should be a number or Array<number>('+e+")"),t}},t.getNumberOrAutoValidator=function(){if(r.Konva.isUnminified)return function(e,t){return a.Util._isNumber(e)||"auto"===e||a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a number or "auto".'),e}},t.getStringValidator=function(){if(r.Konva.isUnminified)return function(e,t){return a.Util._isString(e)||a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a string.'),e}},t.getStringOrGradientValidator=function(){if(r.Konva.isUnminified)return function(e,t){var n=a.Util._isString(e),r="[object CanvasGradient]"===Object.prototype.toString.call(e);return n||r||a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a string or a native gradient.'),e}},t.getFunctionValidator=function(){if(r.Konva.isUnminified)return function(e,t){return a.Util._isFunction(e)||a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a function.'),e}},t.getNumberArrayValidator=function(){if(r.Konva.isUnminified)return function(e,t){return a.Util._isArray(e)?e.forEach((function(e){a.Util._isNumber(e)||a.Util.warn('"'+t+'" attribute has non numeric element '+e+". Make sure that all elements are numbers.")})):a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a array of numbers.'),e}},t.getBooleanValidator=function(){if(r.Konva.isUnminified)return function(e,t){return!0===e||!1===e||a.Util.warn(i(e)+' is a not valid value for "'+t+'" attribute. The value should be a boolean.'),e}},t.getComponentValidator=function(e){if(r.Konva.isUnminified)return function(t,n){return a.Util.isObject(t)||a.Util.warn(i(t)+' is a not valid value for "'+n+'" attribute. The value should be an object with properties '+e),t}}},3986:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4417),a=n(8588),i=n(7939),s=n(8783),o=n(8342),d=n(4415),u=n(3980),l=n(8985),c=n(210),h=n(7955),_=n(6745),f=n(8017),m=n(3442),p=n(4842);t.Konva=a.Util._assign(r.Konva,{Collection:a.Collection,Util:a.Util,Transform:a.Transform,Node:i.Node,ids:i.ids,names:i.names,Container:s.Container,Stage:o.Stage,stages:o.stages,Layer:d.Layer,FastLayer:u.FastLayer,Group:l.Group,DD:c.DD,Shape:h.Shape,shapes:h.shapes,Animation:_.Animation,Tween:f.Tween,Easings:f.Easings,Context:m.Context,Canvas:p.Canvas})},2076:(e,t,n)=>{"use strict";var r=n(3986),a=n(119),i=n(2064),s=n(7643),o=n(535),d=n(1298),u=n(6067),l=n(7149),c=n(7339),h=n(5244),_=n(1785),f=n(657),m=n(8986),p=n(1964),y=n(3787),g=n(2831),M=n(9516),v=n(9846),L=n(2527),b=n(6672),k=n(5309),Y=n(1695),w=n(9621),D=n(1179),S=n(7194),T=n(3925),x=n(5751),C=n(6588),P=n(3565),H=n(5929),F=n(7233),O=n(8590),E=n(8280),j=n(3438),A=n(6703),N=n(1665),R=n(1863);t.S=r.Konva.Util._assign(r.Konva,{Arc:a.Arc,Arrow:i.Arrow,Circle:s.Circle,Ellipse:o.Ellipse,Image:d.Image,Label:u.Label,Tag:u.Tag,Line:l.Line,Path:c.Path,Rect:h.Rect,RegularPolygon:_.RegularPolygon,Ring:f.Ring,Sprite:m.Sprite,Star:p.Star,Text:y.Text,TextPath:g.TextPath,Transformer:M.Transformer,Wedge:v.Wedge,Filters:{Blur:L.Blur,Brighten:b.Brighten,Contrast:k.Contrast,Emboss:Y.Emboss,Enhance:w.Enhance,Grayscale:D.Grayscale,HSL:S.HSL,HSV:T.HSV,Invert:x.Invert,Kaleidoscope:C.Kaleidoscope,Mask:P.Mask,Noise:H.Noise,Pixelate:F.Pixelate,Posterize:O.Posterize,RGB:E.RGB,RGBA:j.RGBA,Sepia:A.Sepia,Solarize:N.Solarize,Threshold:R.Threshold}})},2527:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);function s(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var o=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],d=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];t.Blur=function(e){var t=Math.round(this.blurRadius());t>0&&function(e,t){var n,r,a,i,u,l,c,h,_,f,m,p,y,g,M,v,L,b,k,Y,w,D,S,T,x=e.data,C=e.width,P=e.height,H=t+t+1,F=C-1,O=P-1,E=t+1,j=E*(E+1)/2,A=new s,N=null,R=A,W=null,I=null,z=o[t],G=d[t];for(a=1;a<H;a++)R=R.next=new s,a===E&&(N=R);for(R.next=A,c=l=0,r=0;r<P;r++){for(v=L=b=k=h=_=f=m=0,p=E*(Y=x[l]),y=E*(w=x[l+1]),g=E*(D=x[l+2]),M=E*(S=x[l+3]),h+=j*Y,_+=j*w,f+=j*D,m+=j*S,R=A,a=0;a<E;a++)R.r=Y,R.g=w,R.b=D,R.a=S,R=R.next;for(a=1;a<E;a++)i=l+((F<a?F:a)<<2),h+=(R.r=Y=x[i])*(T=E-a),_+=(R.g=w=x[i+1])*T,f+=(R.b=D=x[i+2])*T,m+=(R.a=S=x[i+3])*T,v+=Y,L+=w,b+=D,k+=S,R=R.next;for(W=A,I=N,n=0;n<C;n++)x[l+3]=S=m*z>>G,0!==S?(S=255/S,x[l]=(h*z>>G)*S,x[l+1]=(_*z>>G)*S,x[l+2]=(f*z>>G)*S):x[l]=x[l+1]=x[l+2]=0,h-=p,_-=y,f-=g,m-=M,p-=W.r,y-=W.g,g-=W.b,M-=W.a,i=c+((i=n+t+1)<F?i:F)<<2,h+=v+=W.r=x[i],_+=L+=W.g=x[i+1],f+=b+=W.b=x[i+2],m+=k+=W.a=x[i+3],W=W.next,p+=Y=I.r,y+=w=I.g,g+=D=I.b,M+=S=I.a,v-=Y,L-=w,b-=D,k-=S,I=I.next,l+=4;c+=C}for(n=0;n<C;n++){for(L=b=k=v=_=f=m=h=0,p=E*(Y=x[l=n<<2]),y=E*(w=x[l+1]),g=E*(D=x[l+2]),M=E*(S=x[l+3]),h+=j*Y,_+=j*w,f+=j*D,m+=j*S,R=A,a=0;a<E;a++)R.r=Y,R.g=w,R.b=D,R.a=S,R=R.next;for(u=C,a=1;a<=t;a++)l=u+n<<2,h+=(R.r=Y=x[l])*(T=E-a),_+=(R.g=w=x[l+1])*T,f+=(R.b=D=x[l+2])*T,m+=(R.a=S=x[l+3])*T,v+=Y,L+=w,b+=D,k+=S,R=R.next,a<O&&(u+=C);for(l=n,W=A,I=N,r=0;r<P;r++)x[3+(i=l<<2)]=S=m*z>>G,S>0?(S=255/S,x[i]=(h*z>>G)*S,x[i+1]=(_*z>>G)*S,x[i+2]=(f*z>>G)*S):x[i]=x[i+1]=x[i+2]=0,h-=p,_-=y,f-=g,m-=M,p-=W.r,y-=W.g,g-=W.b,M-=W.a,i=n+((i=r+E)<O?i:O)*C<<2,h+=v+=W.r=x[i],_+=L+=W.g=x[i+1],f+=b+=W.b=x[i+2],m+=k+=W.a=x[i+3],W=W.next,p+=Y=I.r,y+=w=I.g,g+=D=I.b,M+=S=I.a,v-=Y,L-=w,b-=D,k-=S,I=I.next,l+=C}}(e,t)},r.Factory.addGetterSetter(a.Node,"blurRadius",0,i.getNumberValidator(),r.Factory.afterSetFilter)},6672:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.Brighten=function(e){var t,n=255*this.brightness(),r=e.data,a=r.length;for(t=0;t<a;t+=4)r[t]+=n,r[t+1]+=n,r[t+2]+=n},r.Factory.addGetterSetter(a.Node,"brightness",0,i.getNumberValidator(),r.Factory.afterSetFilter)},5309:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.Contrast=function(e){var t,n=Math.pow((this.contrast()+100)/100,2),r=e.data,a=r.length,i=150,s=150,o=150;for(t=0;t<a;t+=4)i=r[t],s=r[t+1],o=r[t+2],i/=255,i-=.5,i*=n,i+=.5,s/=255,s-=.5,s*=n,s+=.5,o/=255,o-=.5,o*=n,o+=.5,i=(i*=255)<0?0:i>255?255:i,s=(s*=255)<0?0:s>255?255:s,o=(o*=255)<0?0:o>255?255:o,r[t]=i,r[t+1]=s,r[t+2]=o},r.Factory.addGetterSetter(a.Node,"contrast",0,i.getNumberValidator(),r.Factory.afterSetFilter)},1695:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(8588),s=n(3774);t.Emboss=function(e){var t=10*this.embossStrength(),n=255*this.embossWhiteLevel(),r=this.embossDirection(),a=this.embossBlend(),s=0,o=0,d=e.data,u=e.width,l=e.height,c=4*u,h=l;switch(r){case"top-left":s=-1,o=-1;break;case"top":s=-1,o=0;break;case"top-right":s=-1,o=1;break;case"right":s=0,o=1;break;case"bottom-right":s=1,o=1;break;case"bottom":s=1,o=0;break;case"bottom-left":s=1,o=-1;break;case"left":s=0,o=-1;break;default:i.Util.error("Unknown emboss direction: "+r)}do{var _=(h-1)*c,f=s;h+f<1&&(f=0),h+f>l&&(f=0);var m=(h-1+f)*u*4,p=u;do{var y=_+4*(p-1),g=o;p+g<1&&(g=0),p+g>u&&(g=0);var M=m+4*(p-1+g),v=d[y]-d[M],L=d[y+1]-d[M+1],b=d[y+2]-d[M+2],k=v,Y=k>0?k:-k;if((L>0?L:-L)>Y&&(k=L),(b>0?b:-b)>Y&&(k=b),k*=t,a){var w=d[y]+k,D=d[y+1]+k,S=d[y+2]+k;d[y]=w>255?255:w<0?0:w,d[y+1]=D>255?255:D<0?0:D,d[y+2]=S>255?255:S<0?0:S}else{var T=n-k;T<0?T=0:T>255&&(T=255),d[y]=d[y+1]=d[y+2]=T}}while(--p)}while(--h)},r.Factory.addGetterSetter(a.Node,"embossStrength",.5,s.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"embossWhiteLevel",.5,s.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"embossDirection","top-left",null,r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"embossBlend",!1,null,r.Factory.afterSetFilter)},9621:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);function s(e,t,n,r,a){var i=n-t,s=a-r;return 0===i?r+s/2:0===s?r:s*((e-t)/i)+r}t.Enhance=function(e){var t,n,r,a,i=e.data,o=i.length,d=i[0],u=d,l=i[1],c=l,h=i[2],_=h,f=this.enhance();if(0!==f){for(a=0;a<o;a+=4)(t=i[a+0])<d?d=t:t>u&&(u=t),(n=i[a+1])<l?l=n:n>c&&(c=n),(r=i[a+2])<h?h=r:r>_&&(_=r);var m,p,y,g,M,v,L,b,k;for(u===d&&(u=255,d=0),c===l&&(c=255,l=0),_===h&&(_=255,h=0),f>0?(p=u+f*(255-u),y=d-f*(d-0),M=c+f*(255-c),v=l-f*(l-0),b=_+f*(255-_),k=h-f*(h-0)):(p=u+f*(u-(m=.5*(u+d))),y=d+f*(d-m),M=c+f*(c-(g=.5*(c+l))),v=l+f*(l-g),b=_+f*(_-(L=.5*(_+h))),k=h+f*(h-L)),a=0;a<o;a+=4)i[a+0]=s(i[a+0],d,u,y,p),i[a+1]=s(i[a+1],l,c,v,M),i[a+2]=s(i[a+2],h,_,k,b)}},r.Factory.addGetterSetter(a.Node,"enhance",0,i.getNumberValidator(),r.Factory.afterSetFilter)},1179:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Grayscale=function(e){var t,n,r=e.data,a=r.length;for(t=0;t<a;t+=4)n=.34*r[t]+.5*r[t+1]+.16*r[t+2],r[t]=n,r[t+1]=n,r[t+2]=n}},7194:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);r.Factory.addGetterSetter(a.Node,"hue",0,i.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"saturation",0,i.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"luminance",0,i.getNumberValidator(),r.Factory.afterSetFilter),t.HSL=function(e){var t,n,r,a,i,s=e.data,o=s.length,d=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,l=127*this.luminance(),c=1*d*Math.cos(u*Math.PI/180),h=1*d*Math.sin(u*Math.PI/180),_=.299+.701*c+.167*h,f=.587-.587*c+.33*h,m=.114-.114*c-.497*h,p=.299-.299*c-.328*h,y=.587+.413*c+.035*h,g=.114-.114*c+.293*h,M=.299-.3*c+1.25*h,v=.587-.586*c-1.05*h,L=.114+.886*c-.2*h;for(t=0;t<o;t+=4)n=s[t+0],r=s[t+1],a=s[t+2],i=s[t+3],s[t+0]=_*n+f*r+m*a+l,s[t+1]=p*n+y*r+g*a+l,s[t+2]=M*n+v*r+L*a+l,s[t+3]=i}},3925:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.HSV=function(e){var t,n,r,a,i,s=e.data,o=s.length,d=Math.pow(2,this.value()),u=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,c=d*u*Math.cos(l*Math.PI/180),h=d*u*Math.sin(l*Math.PI/180),_=.299*d+.701*c+.167*h,f=.587*d-.587*c+.33*h,m=.114*d-.114*c-.497*h,p=.299*d-.299*c-.328*h,y=.587*d+.413*c+.035*h,g=.114*d-.114*c+.293*h,M=.299*d-.3*c+1.25*h,v=.587*d-.586*c-1.05*h,L=.114*d+.886*c-.2*h;for(t=0;t<o;t+=4)n=s[t+0],r=s[t+1],a=s[t+2],i=s[t+3],s[t+0]=_*n+f*r+m*a,s[t+1]=p*n+y*r+g*a,s[t+2]=M*n+v*r+L*a,s[t+3]=i},r.Factory.addGetterSetter(a.Node,"hue",0,i.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"saturation",0,i.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"value",0,i.getNumberValidator(),r.Factory.afterSetFilter)},5751:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Invert=function(e){var t,n=e.data,r=n.length;for(t=0;t<r;t+=4)n[t]=255-n[t],n[t+1]=255-n[t+1],n[t+2]=255-n[t+2]}},6588:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(8588),s=n(3774);t.Kaleidoscope=function(e){var t,n,r,a,s,o,d,u,l,c=e.width,h=e.height,_=Math.round(this.kaleidoscopePower()),f=Math.round(this.kaleidoscopeAngle()),m=Math.floor(c*(f%360)/360);if(!(_<1)){var p=i.Util.createCanvasElement();p.width=c,p.height=h;var y=p.getContext("2d").getImageData(0,0,c,h);!function(e,t,n){var r,a,i,s,o=e.data,d=t.data,u=e.width,l=e.height,c=n.polarCenterX||u/2,h=n.polarCenterY||l/2,_=0,f=0,m=0,p=0,y=Math.sqrt(c*c+h*h);a=u-c,i=l-h,y=(s=Math.sqrt(a*a+i*i))>y?s:y;var g,M,v,L,b=l,k=u,Y=360/k*Math.PI/180;for(M=0;M<k;M+=1)for(v=Math.sin(M*Y),L=Math.cos(M*Y),g=0;g<b;g+=1)a=Math.floor(c+y*g/b*L),_=o[0+(r=4*((i=Math.floor(h+y*g/b*v))*u+a))],f=o[r+1],m=o[r+2],p=o[r+3],d[0+(r=4*(M+g*u))]=_,d[r+1]=f,d[r+2]=m,d[r+3]=p}(e,y,{polarCenterX:c/2,polarCenterY:h/2});for(var g=c/Math.pow(2,_);g<=8;)g*=2,_-=1;var M=g=Math.ceil(g),v=0,L=M,b=1;for(m+g>c&&(v=M,L=0,b=-1),n=0;n<h;n+=1)for(t=v;t!==L;t+=b)u=4*(c*n+Math.round(t+m)%c),a=y.data[u+0],s=y.data[u+1],o=y.data[u+2],d=y.data[u+3],l=4*(c*n+t),y.data[l+0]=a,y.data[l+1]=s,y.data[l+2]=o,y.data[l+3]=d;for(n=0;n<h;n+=1)for(M=Math.floor(g),r=0;r<_;r+=1){for(t=0;t<M+1;t+=1)u=4*(c*n+t),a=y.data[u+0],s=y.data[u+1],o=y.data[u+2],d=y.data[u+3],l=4*(c*n+2*M-t-1),y.data[l+0]=a,y.data[l+1]=s,y.data[l+2]=o,y.data[l+3]=d;M*=2}!function(e,t,n){var r,a,i,s,o,d,u=e.data,l=t.data,c=e.width,h=e.height,_=n.polarCenterX||c/2,f=n.polarCenterY||h/2,m=0,p=0,y=0,g=0,M=Math.sqrt(_*_+f*f);a=c-_,i=h-f,M=(d=Math.sqrt(a*a+i*i))>M?d:M;var v,L,b,k=h,Y=c,w=n.polarRotation||0;for(a=0;a<c;a+=1)for(i=0;i<h;i+=1)s=a-_,o=i-f,v=Math.sqrt(s*s+o*o)*k/M,L=(L=(180*Math.atan2(o,s)/Math.PI+360+w)%360)*Y/360,b=Math.floor(L),m=u[0+(r=4*(Math.floor(v)*c+b))],p=u[r+1],y=u[r+2],g=u[r+3],l[0+(r=4*(i*c+a))]=m,l[r+1]=p,l[r+2]=y,l[r+3]=g}(y,e,{polarRotation:0})}},r.Factory.addGetterSetter(a.Node,"kaleidoscopePower",2,s.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"kaleidoscopeAngle",0,s.getNumberValidator(),r.Factory.afterSetFilter)},3565:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);function s(e,t,n){var r=4*(n*e.width+t),a=[];return a.push(e.data[r++],e.data[r++],e.data[r++],e.data[r++]),a}function o(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)+Math.pow(e[2]-t[2],2))}t.Mask=function(e){var t=function(e,t){var n=s(e,0,0),r=s(e,e.width-1,0),a=s(e,0,e.height-1),i=s(e,e.width-1,e.height-1),d=t||10;if(o(n,r)<d&&o(r,i)<d&&o(i,a)<d&&o(a,n)<d){for(var u=function(e){for(var t=[0,0,0],n=0;n<e.length;n++)t[0]+=e[n][0],t[1]+=e[n][1],t[2]+=e[n][2];return t[0]/=e.length,t[1]/=e.length,t[2]/=e.length,t}([r,n,i,a]),l=[],c=0;c<e.width*e.height;c++){var h=o(u,[e.data[4*c],e.data[4*c+1],e.data[4*c+2]]);l[c]=h<d?0:255}return l}}(e,this.threshold());return t&&function(e,t){for(var n=0;n<e.width*e.height;n++)e.data[4*n+3]=t[n]}(e,t=function(e,t,n){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(r.length)),i=Math.floor(a/2),s=[],o=0;o<n;o++)for(var d=0;d<t;d++){for(var u=o*t+d,l=0,c=0;c<a;c++)for(var h=0;h<a;h++){var _=o+c-i,f=d+h-i;if(_>=0&&_<n&&f>=0&&f<t){var m=r[c*a+h];l+=e[_*t+f]*m}}s[u]=l}return s}(t=function(e,t,n){for(var r=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(r.length)),i=Math.floor(a/2),s=[],o=0;o<n;o++)for(var d=0;d<t;d++){for(var u=o*t+d,l=0,c=0;c<a;c++)for(var h=0;h<a;h++){var _=o+c-i,f=d+h-i;if(_>=0&&_<n&&f>=0&&f<t){var m=r[c*a+h];l+=e[_*t+f]*m}}s[u]=l>=1020?255:0}return s}(t=function(e,t,n){for(var r=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(r.length)),i=Math.floor(a/2),s=[],o=0;o<n;o++)for(var d=0;d<t;d++){for(var u=o*t+d,l=0,c=0;c<a;c++)for(var h=0;h<a;h++){var _=o+c-i,f=d+h-i;if(_>=0&&_<n&&f>=0&&f<t){var m=r[c*a+h];l+=e[_*t+f]*m}}s[u]=2040===l?255:0}return s}(t,e.width,e.height),e.width,e.height),e.width,e.height)),e},r.Factory.addGetterSetter(a.Node,"threshold",0,i.getNumberValidator(),r.Factory.afterSetFilter)},5929:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.Noise=function(e){var t,n=255*this.noise(),r=e.data,a=r.length,i=n/2;for(t=0;t<a;t+=4)r[t+0]+=i-2*i*Math.random(),r[t+1]+=i-2*i*Math.random(),r[t+2]+=i-2*i*Math.random()},r.Factory.addGetterSetter(a.Node,"noise",.2,i.getNumberValidator(),r.Factory.afterSetFilter)},7233:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(8588),i=n(7939),s=n(3774);t.Pixelate=function(e){var t,n,r,i,s,o,d,u,l,c,h,_,f,m,p=Math.ceil(this.pixelSize()),y=e.width,g=e.height,M=Math.ceil(y/p),v=Math.ceil(g/p),L=e.data;if(p<=0)a.Util.error("pixelSize value can not be <= 0");else for(_=0;_<M;_+=1)for(f=0;f<v;f+=1){for(i=0,s=0,o=0,d=0,l=(u=_*p)+p,h=(c=f*p)+p,m=0,t=u;t<l;t+=1)if(!(t>=y))for(n=c;n<h;n+=1)n>=g||(i+=L[0+(r=4*(y*n+t))],s+=L[r+1],o+=L[r+2],d+=L[r+3],m+=1);for(i/=m,s/=m,o/=m,d/=m,t=u;t<l;t+=1)if(!(t>=y))for(n=c;n<h;n+=1)n>=g||(L[0+(r=4*(y*n+t))]=i,L[r+1]=s,L[r+2]=o,L[r+3]=d)}},r.Factory.addGetterSetter(i.Node,"pixelSize",8,s.getNumberValidator(),r.Factory.afterSetFilter)},8590:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.Posterize=function(e){var t,n=Math.round(254*this.levels())+1,r=e.data,a=r.length,i=255/n;for(t=0;t<a;t+=1)r[t]=Math.floor(r[t]/i)*i},r.Factory.addGetterSetter(a.Node,"levels",.5,i.getNumberValidator(),r.Factory.afterSetFilter)},8280:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.RGB=function(e){var t,n,r=e.data,a=r.length,i=this.red(),s=this.green(),o=this.blue();for(t=0;t<a;t+=4)n=(.34*r[t]+.5*r[t+1]+.16*r[t+2])/255,r[t]=n*i,r[t+1]=n*s,r[t+2]=n*o,r[t+3]=r[t+3]},r.Factory.addGetterSetter(a.Node,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),r.Factory.addGetterSetter(a.Node,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),r.Factory.addGetterSetter(a.Node,"blue",0,i.RGBComponent,r.Factory.afterSetFilter)},3438:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.RGBA=function(e){var t,n,r=e.data,a=r.length,i=this.red(),s=this.green(),o=this.blue(),d=this.alpha();for(t=0;t<a;t+=4)n=1-d,r[t]=i*d+r[t]*n,r[t+1]=s*d+r[t+1]*n,r[t+2]=o*d+r[t+2]*n},r.Factory.addGetterSetter(a.Node,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),r.Factory.addGetterSetter(a.Node,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),r.Factory.addGetterSetter(a.Node,"blue",0,i.RGBComponent,r.Factory.afterSetFilter),r.Factory.addGetterSetter(a.Node,"alpha",1,(function(e){return this._filterUpToDate=!1,e>1?1:e<0?0:e}))},6703:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sepia=function(e){var t,n,r,a,i=e.data,s=i.length;for(t=0;t<s;t+=4)n=i[t+0],r=i[t+1],a=i[t+2],i[t+0]=Math.min(255,.393*n+.769*r+.189*a),i[t+1]=Math.min(255,.349*n+.686*r+.168*a),i[t+2]=Math.min(255,.272*n+.534*r+.131*a)}},1665:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Solarize=function(e){var t=e.data,n=e.width,r=4*n,a=e.height;do{var i=(a-1)*r,s=n;do{var o=i+4*(s-1),d=t[o],u=t[o+1],l=t[o+2];d>127&&(d=255-d),u>127&&(u=255-u),l>127&&(l=255-l),t[o]=d,t[o+1]=u,t[o+2]=l}while(--s)}while(--a)}},1863:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1455),a=n(7939),i=n(3774);t.Threshold=function(e){var t,n=255*this.threshold(),r=e.data,a=r.length;for(t=0;t<a;t+=1)r[t]=r[t]<n?0:255},r.Factory.addGetterSetter(a.Node,"threshold",.5,i.getNumberValidator(),r.Factory.afterSetFilter)},185:(e,t,n)=>{var r=n(2076).S;r._injectGlobal(r),t.default=r,e.exports=t.default},119:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),u=n(3774),l=n(4417),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){var t=d.Konva.getAngle(this.angle()),n=this.clockwise();e.beginPath(),e.arc(0,0,this.outerRadius(),0,t,n),e.arc(0,0,this.innerRadius(),t,0,!n),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.outerRadius()},t.prototype.getHeight=function(){return 2*this.outerRadius()},t.prototype.setWidth=function(e){this.outerRadius(e/2)},t.prototype.setHeight=function(e){this.outerRadius(e/2)},t}(o.Shape);t.Arc=c,c.prototype._centroid=!0,c.prototype.className="Arc",c.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l._registerNode(c),s.Factory.addGetterSetter(c,"innerRadius",0,u.getNumberValidator()),s.Factory.addGetterSetter(c,"outerRadius",0,u.getNumberValidator()),s.Factory.addGetterSetter(c,"angle",0,u.getNumberValidator()),s.Factory.addGetterSetter(c,"clockwise",!1,u.getBooleanValidator()),i.Collection.mapMethods(c)},2064:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7149),d=n(3774),u=n(4417),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(t){e.prototype._sceneFunc.call(this,t);var n=2*Math.PI,r=this.points(),a=r,i=0!==this.tension()&&r.length>4;i&&(a=this.getTensionPoints());var s,o,d=r.length;i?(s=r[d-2]-(a[a.length-2]+a[a.length-4])/2,o=r[d-1]-(a[a.length-1]+a[a.length-3])/2):(s=r[d-2]-r[d-4],o=r[d-1]-r[d-3]);var u=(Math.atan2(o,s)+n)%n,l=this.pointerLength(),c=this.pointerWidth();t.save(),t.beginPath(),t.translate(r[d-2],r[d-1]),t.rotate(u),t.moveTo(0,0),t.lineTo(-l,c/2),t.lineTo(-l,-c/2),t.closePath(),t.restore(),this.pointerAtBeginning()&&(t.save(),t.translate(r[0],r[1]),i?(s=(a[0]+a[2])/2-r[0],o=(a[1]+a[3])/2-r[1]):(s=r[2]-r[0],o=r[3]-r[1]),t.rotate((Math.atan2(-o,-s)+n)%n),t.moveTo(0,0),t.lineTo(-l,c/2),t.lineTo(-l,-c/2),t.closePath(),t.restore());var h=this.dashEnabled();h&&(this.attrs.dashEnabled=!1,t.setLineDash([])),t.fillStrokeShape(this),h&&(this.attrs.dashEnabled=!0)},t.prototype.getSelfRect=function(){var t=e.prototype.getSelfRect.call(this),n=this.pointerWidth()/2;return{x:t.x-n,y:t.y-n,width:t.width+2*n,height:t.height+2*n}},t}(o.Line);t.Arrow=l,l.prototype.className="Arrow",u._registerNode(l),s.Factory.addGetterSetter(l,"pointerLength",10,d.getNumberValidator()),s.Factory.addGetterSetter(l,"pointerWidth",10,d.getNumberValidator()),s.Factory.addGetterSetter(l,"pointerAtBeginning",!1),i.Collection.mapMethods(l)},7643:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),u=n(4417),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){e.beginPath(),e.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radius()},t.prototype.getHeight=function(){return 2*this.radius()},t.prototype.setWidth=function(e){this.radius()!==e/2&&this.radius(e/2)},t.prototype.setHeight=function(e){this.radius()!==e/2&&this.radius(e/2)},t}(o.Shape);t.Circle=l,l.prototype._centroid=!0,l.prototype.className="Circle",l.prototype._attrsAffectingSize=["radius"],u._registerNode(l),s.Factory.addGetterSetter(l,"radius",0,d.getNumberValidator()),i.Collection.mapMethods(l)},535:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),u=n(4417),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.radiusX(),n=this.radiusY();e.beginPath(),e.save(),t!==n&&e.scale(1,n/t),e.arc(0,0,t,0,2*Math.PI,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radiusX()},t.prototype.getHeight=function(){return 2*this.radiusY()},t.prototype.setWidth=function(e){this.radiusX(e/2)},t.prototype.setHeight=function(e){this.radiusY(e/2)},t}(o.Shape);t.Ellipse=l,l.prototype.className="Ellipse",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["radiusX","radiusY"],u._registerNode(l),s.Factory.addComponentsGetterSetter(l,"radius",["x","y"]),s.Factory.addGetterSetter(l,"radiusX",0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"radiusY",0,d.getNumberValidator()),i.Collection.mapMethods(l)},1298:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),u=n(4417),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._useBufferCanvas=function(){return e.prototype._useBufferCanvas.call(this,!0)},t.prototype._sceneFunc=function(e){var t,n=this.getWidth(),r=this.getHeight(),a=this.attrs.image;if(a){var i=this.attrs.cropWidth,s=this.attrs.cropHeight;t=i&&s?[a,this.cropX(),this.cropY(),i,s,0,0,n,r]:[a,0,0,n,r]}(this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,n,r),e.closePath(),e.fillStrokeShape(this)),a&&e.drawImage.apply(e,t)},t.prototype._hitFunc=function(e){var t=this.width(),n=this.height();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){var e,t;return null!==(e=this.attrs.width)&&void 0!==e?e:(null===(t=this.image())||void 0===t?void 0:t.width)||0},t.prototype.getHeight=function(){var e,t;return null!==(e=this.attrs.height)&&void 0!==e?e:(null===(t=this.image())||void 0===t?void 0:t.height)||0},t.fromURL=function(e,n){var r=i.Util.createImageElement();r.onload=function(){var e=new t({image:r});n(e)},r.crossOrigin="Anonymous",r.src=e},t}(o.Shape);t.Image=l,l.prototype.className="Image",u._registerNode(l),s.Factory.addGetterSetter(l,"image"),s.Factory.addComponentsGetterSetter(l,"crop",["x","y","width","height"]),s.Factory.addGetterSetter(l,"cropX",0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"cropY",0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"cropWidth",0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"cropHeight",0,d.getNumberValidator()),i.Collection.mapMethods(l)},6067:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(8985),u=n(3774),l=n(4417),c=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],h="up",_="right",f="down",m="left",p=c.length,y=function(e){function t(t){var n=e.call(this,t)||this;return n.on("add.konva",(function(e){this._addListeners(e.child),this._sync()})),n}return a(t,e),t.prototype.getText=function(){return this.find("Text")[0]},t.prototype.getTag=function(){return this.find("Tag")[0]},t.prototype._addListeners=function(e){var t,n=this,r=function(){n._sync()};for(t=0;t<p;t++)e.on(c[t]+"Change.konva",r)},t.prototype.getWidth=function(){return this.getText().width()},t.prototype.getHeight=function(){return this.getText().height()},t.prototype._sync=function(){var e,t,n,r,a,i,s,o=this.getText(),d=this.getTag();if(o&&d){switch(e=o.width(),t=o.height(),n=d.pointerDirection(),r=d.pointerWidth(),s=d.pointerHeight(),a=0,i=0,n){case h:a=e/2,i=-1*s;break;case _:a=e+r,i=t/2;break;case f:a=e/2,i=t+s;break;case m:a=-1*r,i=t/2}d.setAttrs({x:-1*a,y:-1*i,width:e,height:t}),o.setAttrs({x:-1*a,y:-1*i})}},t}(d.Group);t.Label=y,y.prototype.className="Label",l._registerNode(y),i.Collection.mapMethods(y);var g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.width(),n=this.height(),r=this.pointerDirection(),a=this.pointerWidth(),i=this.pointerHeight(),s=this.cornerRadius(),o=0,d=0,u=0,l=0;"number"==typeof s?o=d=u=l=Math.min(s,t/2,n/2):(o=Math.min(s[0]||0,t/2,n/2),d=Math.min(s[1]||0,t/2,n/2),l=Math.min(s[2]||0,t/2,n/2),u=Math.min(s[3]||0,t/2,n/2)),e.beginPath(),e.moveTo(o,0),r===h&&(e.lineTo((t-a)/2,0),e.lineTo(t/2,-1*i),e.lineTo((t+a)/2,0)),e.lineTo(t-d,0),e.arc(t-d,d,d,3*Math.PI/2,0,!1),r===_&&(e.lineTo(t,(n-i)/2),e.lineTo(t+a,n/2),e.lineTo(t,(n+i)/2)),e.lineTo(t,n-l),e.arc(t-l,n-l,l,0,Math.PI/2,!1),r===f&&(e.lineTo((t+a)/2,n),e.lineTo(t/2,n+i),e.lineTo((t-a)/2,n)),e.lineTo(u,n),e.arc(u,n-u,u,Math.PI/2,Math.PI,!1),r===m&&(e.lineTo(0,(n+i)/2),e.lineTo(-1*a,n/2),e.lineTo(0,(n-i)/2)),e.lineTo(0,o),e.arc(o,o,o,Math.PI,3*Math.PI/2,!1),e.closePath(),e.fillStrokeShape(this)},t.prototype.getSelfRect=function(){var e=0,t=0,n=this.pointerWidth(),r=this.pointerHeight(),a=this.pointerDirection(),i=this.width(),s=this.height();return a===h?(t-=r,s+=r):a===f?s+=r:a===m?(e-=1.5*n,i+=n):a===_&&(i+=1.5*n),{x:e,y:t,width:i,height:s}},t}(o.Shape);t.Tag=g,g.prototype.className="Tag",l._registerNode(g),s.Factory.addGetterSetter(g,"pointerDirection","none"),s.Factory.addGetterSetter(g,"pointerWidth",0,u.getNumberValidator()),s.Factory.addGetterSetter(g,"pointerHeight",0,u.getNumberValidator()),s.Factory.addGetterSetter(g,"cornerRadius",0,u.getNumberOrArrayOfNumbersValidator(4)),i.Collection.mapMethods(g)},7149:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,o=i.length;s<o;s++,a++)r[a]=i[s];return r};Object.defineProperty(t,"__esModule",{value:!0});var s=n(8588),o=n(1455),d=n(7955),u=n(3774),l=n(4417),c=function(e){function t(t){var n=e.call(this,t)||this;return n.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")})),n}return a(t,e),t.prototype._sceneFunc=function(e){var t,n,r,a=this.points(),i=a.length,s=this.tension(),o=this.closed(),d=this.bezier();if(i){if(e.beginPath(),e.moveTo(a[0],a[1]),0!==s&&i>4){for(n=(t=this.getTensionPoints()).length,r=o?0:4,o||e.quadraticCurveTo(t[0],t[1],t[2],t[3]);r<n-2;)e.bezierCurveTo(t[r++],t[r++],t[r++],t[r++],t[r++],t[r++]);o||e.quadraticCurveTo(t[n-2],t[n-1],a[i-2],a[i-1])}else if(d)for(r=2;r<i;)e.bezierCurveTo(a[r++],a[r++],a[r++],a[r++],a[r++],a[r++]);else for(r=2;r<i;r+=2)e.lineTo(a[r],a[r+1]);o?(e.closePath(),e.fillStrokeShape(this)):e.strokeShape(this)}},t.prototype.getTensionPoints=function(){return this._getCache("tensionPoints",this._getTensionPoints)},t.prototype._getTensionPoints=function(){return this.closed()?this._getTensionPointsClosed():s.Util._expandPoints(this.points(),this.tension())},t.prototype._getTensionPointsClosed=function(){var e=this.points(),t=e.length,n=this.tension(),r=s.Util._getControlPoints(e[t-2],e[t-1],e[0],e[1],e[2],e[3],n),a=s.Util._getControlPoints(e[t-4],e[t-3],e[t-2],e[t-1],e[0],e[1],n),i=s.Util._expandPoints(e,n);return[r[2],r[3]].concat(i).concat([a[0],a[1],e[t-2],e[t-1],a[2],a[3],r[0],r[1],e[0],e[1]])},t.prototype.getWidth=function(){return this.getSelfRect().width},t.prototype.getHeight=function(){return this.getSelfRect().height},t.prototype.getSelfRect=function(){var e=this.points();if(e.length<4)return{x:e[0]||0,y:e[1]||0,width:0,height:0};for(var t,n,r=(e=0!==this.tension()?i([e[0],e[1]],this._getTensionPoints(),[e[e.length-2],e[e.length-1]]):this.points())[0],a=e[0],s=e[1],o=e[1],d=0;d<e.length/2;d++)t=e[2*d],n=e[2*d+1],r=Math.min(r,t),a=Math.max(a,t),s=Math.min(s,n),o=Math.max(o,n);return{x:r,y:s,width:a-r,height:o-s}},t}(d.Shape);t.Line=c,c.prototype.className="Line",c.prototype._attrsAffectingSize=["points","bezier","tension"],l._registerNode(c),o.Factory.addGetterSetter(c,"closed",!1),o.Factory.addGetterSetter(c,"bezier",!1),o.Factory.addGetterSetter(c,"tension",0,u.getNumberValidator()),o.Factory.addGetterSetter(c,"points",[],u.getNumberArrayValidator()),s.Collection.mapMethods(c)},7339:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),u=function(e){function t(n){var r=e.call(this,n)||this;r.dataArray=[],r.pathLength=0,r.dataArray=t.parsePathData(r.data()),r.pathLength=0;for(var a=0;a<r.dataArray.length;++a)r.pathLength+=r.dataArray[a].pathLength;return r.on("dataChange.konva",(function(){this.dataArray=t.parsePathData(this.data()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength})),r}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.dataArray;e.beginPath();for(var n=!1,r=0;r<t.length;r++){var a=t[r].command,i=t[r].points;switch(a){case"L":e.lineTo(i[0],i[1]);break;case"M":e.moveTo(i[0],i[1]);break;case"C":e.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case"Q":e.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case"A":var s=i[0],o=i[1],d=i[2],u=i[3],l=i[4],c=i[5],h=i[6],_=i[7],f=d>u?d:u,m=d>u?1:d/u,p=d>u?u/d:1;e.translate(s,o),e.rotate(h),e.scale(m,p),e.arc(0,0,f,l,l+c,1-_),e.scale(1/m,1/p),e.rotate(-h),e.translate(-s,-o);break;case"z":n=!0,e.closePath()}}n||this.hasFill()?e.fillStrokeShape(this):e.strokeShape(this)},t.prototype.getSelfRect=function(){var e=[];this.dataArray.forEach((function(n){if("A"===n.command){var r=n.points[4],a=n.points[5],i=n.points[4]+a,s=Math.PI/180;if(Math.abs(r-i)<s&&(s=Math.abs(r-i)),a<0)for(var o=r-s;o>i;o-=s){var d=t.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],o,0);e.push(d.x,d.y)}else for(o=r+s;o<i;o+=s)d=t.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],o,0),e.push(d.x,d.y)}else if("C"===n.command)for(o=0;o<=1;o+=.01)d=t.getPointOnCubicBezier(o,n.start.x,n.start.y,n.points[0],n.points[1],n.points[2],n.points[3],n.points[4],n.points[5]),e.push(d.x,d.y);else e=e.concat(n.points)}));for(var n,r,a=e[0],i=e[0],s=e[1],o=e[1],d=0;d<e.length/2;d++)n=e[2*d],r=e[2*d+1],isNaN(n)||(a=Math.min(a,n),i=Math.max(i,n)),isNaN(r)||(s=Math.min(s,r),o=Math.max(o,r));return{x:Math.round(a),y:Math.round(s),width:Math.round(i-a),height:Math.round(o-s)}},t.prototype.getLength=function(){return this.pathLength},t.prototype.getPointAtLength=function(e){var n,r=0,a=this.dataArray.length;if(!a)return null;for(;r<a&&e>this.dataArray[r].pathLength;)e-=this.dataArray[r].pathLength,++r;if(r===a)return{x:(n=this.dataArray[r-1].points.slice(-2))[0],y:n[1]};if(e<.01)return{x:(n=this.dataArray[r].points.slice(0,2))[0],y:n[1]};var i=this.dataArray[r],s=i.points;switch(i.command){case"L":return t.getPointOnLine(e,i.start.x,i.start.y,s[0],s[1]);case"C":return t.getPointOnCubicBezier(e/i.pathLength,i.start.x,i.start.y,s[0],s[1],s[2],s[3],s[4],s[5]);case"Q":return t.getPointOnQuadraticBezier(e/i.pathLength,i.start.x,i.start.y,s[0],s[1],s[2],s[3]);case"A":var o=s[0],d=s[1],u=s[2],l=s[3],c=s[4],h=s[5],_=s[6];return c+=h*e/i.pathLength,t.getPointOnEllipticalArc(o,d,u,l,c,_)}return null},t.getLineLength=function(e,t,n,r){return Math.sqrt((n-e)*(n-e)+(r-t)*(r-t))},t.getPointOnLine=function(e,t,n,r,a,i,s){void 0===i&&(i=t),void 0===s&&(s=n);var o=(a-n)/(r-t+1e-8),d=Math.sqrt(e*e/(1+o*o));r<t&&(d*=-1);var u,l=o*d;if(r===t)u={x:i,y:s+l};else if((s-n)/(i-t+1e-8)===o)u={x:i+d,y:s+l};else{var c,h,_=this.getLineLength(t,n,r,a);if(_<1e-8)return;var f=(i-t)*(r-t)+(s-n)*(a-n);c=t+(f/=_*_)*(r-t),h=n+f*(a-n);var m=this.getLineLength(i,s,c,h),p=Math.sqrt(e*e-m*m);d=Math.sqrt(p*p/(1+o*o)),r<t&&(d*=-1),u={x:c+d,y:h+(l=o*d)}}return u},t.getPointOnCubicBezier=function(e,t,n,r,a,i,s,o,d){function u(e){return e*e*e}function l(e){return 3*e*e*(1-e)}function c(e){return 3*e*(1-e)*(1-e)}function h(e){return(1-e)*(1-e)*(1-e)}return{x:o*u(e)+i*l(e)+r*c(e)+t*h(e),y:d*u(e)+s*l(e)+a*c(e)+n*h(e)}},t.getPointOnQuadraticBezier=function(e,t,n,r,a,i,s){function o(e){return e*e}function d(e){return 2*e*(1-e)}function u(e){return(1-e)*(1-e)}return{x:i*o(e)+r*d(e)+t*u(e),y:s*o(e)+a*d(e)+n*u(e)}},t.getPointOnEllipticalArc=function(e,t,n,r,a,i){var s=Math.cos(i),o=Math.sin(i),d=n*Math.cos(a),u=r*Math.sin(a);return{x:e+(d*s-u*o),y:t+(d*o+u*s)}},t.parsePathData=function(e){if(!e)return[];var t=e,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];t=t.replace(new RegExp(" ","g"),",");for(var r=0;r<n.length;r++)t=t.replace(new RegExp(n[r],"g"),"|"+n[r]);var a,i=t.split("|"),s=[],o=[],d=0,u=0,l=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<i.length;r++){var c=i[r],h=c.charAt(0);for(c=c.slice(1),o.length=0;a=l.exec(c);)o.push(a[0]);for(var _=[],f=0,m=o.length;f<m;f++){var p=parseFloat(o[f]);isNaN(p)?_.push(0):_.push(p)}for(;_.length>0&&!isNaN(_[0]);){var y,g,M,v,L,b,k,Y,w,D,S=null,T=[],x=d,C=u;switch(h){case"l":d+=_.shift(),u+=_.shift(),S="L",T.push(d,u);break;case"L":d=_.shift(),u=_.shift(),T.push(d,u);break;case"m":var P=_.shift(),H=_.shift();if(d+=P,u+=H,S="M",s.length>2&&"z"===s[s.length-1].command)for(var F=s.length-2;F>=0;F--)if("M"===s[F].command){d=s[F].points[0]+P,u=s[F].points[1]+H;break}T.push(d,u),h="l";break;case"M":d=_.shift(),u=_.shift(),S="M",T.push(d,u),h="L";break;case"h":d+=_.shift(),S="L",T.push(d,u);break;case"H":d=_.shift(),S="L",T.push(d,u);break;case"v":u+=_.shift(),S="L",T.push(d,u);break;case"V":u=_.shift(),S="L",T.push(d,u);break;case"C":T.push(_.shift(),_.shift(),_.shift(),_.shift()),d=_.shift(),u=_.shift(),T.push(d,u);break;case"c":T.push(d+_.shift(),u+_.shift(),d+_.shift(),u+_.shift()),d+=_.shift(),u+=_.shift(),S="C",T.push(d,u);break;case"S":g=d,M=u,"C"===(y=s[s.length-1]).command&&(g=d+(d-y.points[2]),M=u+(u-y.points[3])),T.push(g,M,_.shift(),_.shift()),d=_.shift(),u=_.shift(),S="C",T.push(d,u);break;case"s":g=d,M=u,"C"===(y=s[s.length-1]).command&&(g=d+(d-y.points[2]),M=u+(u-y.points[3])),T.push(g,M,d+_.shift(),u+_.shift()),d+=_.shift(),u+=_.shift(),S="C",T.push(d,u);break;case"Q":T.push(_.shift(),_.shift()),d=_.shift(),u=_.shift(),T.push(d,u);break;case"q":T.push(d+_.shift(),u+_.shift()),d+=_.shift(),u+=_.shift(),S="Q",T.push(d,u);break;case"T":g=d,M=u,"Q"===(y=s[s.length-1]).command&&(g=d+(d-y.points[0]),M=u+(u-y.points[1])),d=_.shift(),u=_.shift(),S="Q",T.push(g,M,d,u);break;case"t":g=d,M=u,"Q"===(y=s[s.length-1]).command&&(g=d+(d-y.points[0]),M=u+(u-y.points[1])),d+=_.shift(),u+=_.shift(),S="Q",T.push(g,M,d,u);break;case"A":v=_.shift(),L=_.shift(),b=_.shift(),k=_.shift(),Y=_.shift(),w=d,D=u,d=_.shift(),u=_.shift(),S="A",T=this.convertEndpointToCenterParameterization(w,D,d,u,k,Y,v,L,b);break;case"a":v=_.shift(),L=_.shift(),b=_.shift(),k=_.shift(),Y=_.shift(),w=d,D=u,d+=_.shift(),u+=_.shift(),S="A",T=this.convertEndpointToCenterParameterization(w,D,d,u,k,Y,v,L,b)}s.push({command:S||h,points:T,start:{x,y:C},pathLength:this.calcLength(x,C,S||h,T)})}"z"!==h&&"Z"!==h||s.push({command:"z",points:[],start:void 0,pathLength:0})}return s},t.calcLength=function(e,n,r,a){var i,s,o,d,u=t;switch(r){case"L":return u.getLineLength(e,n,a[0],a[1]);case"C":for(i=0,s=u.getPointOnCubicBezier(0,e,n,a[0],a[1],a[2],a[3],a[4],a[5]),d=.01;d<=1;d+=.01)o=u.getPointOnCubicBezier(d,e,n,a[0],a[1],a[2],a[3],a[4],a[5]),i+=u.getLineLength(s.x,s.y,o.x,o.y),s=o;return i;case"Q":for(i=0,s=u.getPointOnQuadraticBezier(0,e,n,a[0],a[1],a[2],a[3]),d=.01;d<=1;d+=.01)o=u.getPointOnQuadraticBezier(d,e,n,a[0],a[1],a[2],a[3]),i+=u.getLineLength(s.x,s.y,o.x,o.y),s=o;return i;case"A":i=0;var l=a[4],c=a[5],h=a[4]+c,_=Math.PI/180;if(Math.abs(l-h)<_&&(_=Math.abs(l-h)),s=u.getPointOnEllipticalArc(a[0],a[1],a[2],a[3],l,0),c<0)for(d=l-_;d>h;d-=_)o=u.getPointOnEllipticalArc(a[0],a[1],a[2],a[3],d,0),i+=u.getLineLength(s.x,s.y,o.x,o.y),s=o;else for(d=l+_;d<h;d+=_)o=u.getPointOnEllipticalArc(a[0],a[1],a[2],a[3],d,0),i+=u.getLineLength(s.x,s.y,o.x,o.y),s=o;return o=u.getPointOnEllipticalArc(a[0],a[1],a[2],a[3],h,0),i+u.getLineLength(s.x,s.y,o.x,o.y)}return 0},t.convertEndpointToCenterParameterization=function(e,t,n,r,a,i,s,o,d){var u=d*(Math.PI/180),l=Math.cos(u)*(e-n)/2+Math.sin(u)*(t-r)/2,c=-1*Math.sin(u)*(e-n)/2+Math.cos(u)*(t-r)/2,h=l*l/(s*s)+c*c/(o*o);h>1&&(s*=Math.sqrt(h),o*=Math.sqrt(h));var _=Math.sqrt((s*s*(o*o)-s*s*(c*c)-o*o*(l*l))/(s*s*(c*c)+o*o*(l*l)));a===i&&(_*=-1),isNaN(_)&&(_=0);var f=_*s*c/o,m=_*-o*l/s,p=(e+n)/2+Math.cos(u)*f-Math.sin(u)*m,y=(t+r)/2+Math.sin(u)*f+Math.cos(u)*m,g=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1])},M=function(e,t){return(e[0]*t[0]+e[1]*t[1])/(g(e)*g(t))},v=function(e,t){return(e[0]*t[1]<e[1]*t[0]?-1:1)*Math.acos(M(e,t))},L=v([1,0],[(l-f)/s,(c-m)/o]),b=[(l-f)/s,(c-m)/o],k=[(-1*l-f)/s,(-1*c-m)/o],Y=v(b,k);return M(b,k)<=-1&&(Y=Math.PI),M(b,k)>=1&&(Y=0),0===i&&Y>0&&(Y-=2*Math.PI),1===i&&Y<0&&(Y+=2*Math.PI),[p,y,s,o,L,Y,u,i]},t}(o.Shape);t.Path=u,u.prototype.className="Path",u.prototype._attrsAffectingSize=["data"],d._registerNode(u),s.Factory.addGetterSetter(u,"data"),i.Collection.mapMethods(u)},5244:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),u=n(3774),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.cornerRadius(),n=this.width(),r=this.height();if(e.beginPath(),t){var a=0,i=0,s=0,o=0;"number"==typeof t?a=i=s=o=Math.min(t,n/2,r/2):(a=Math.min(t[0]||0,n/2,r/2),i=Math.min(t[1]||0,n/2,r/2),o=Math.min(t[2]||0,n/2,r/2),s=Math.min(t[3]||0,n/2,r/2)),e.moveTo(a,0),e.lineTo(n-i,0),e.arc(n-i,i,i,3*Math.PI/2,0,!1),e.lineTo(n,r-o),e.arc(n-o,r-o,o,0,Math.PI/2,!1),e.lineTo(s,r),e.arc(s,r-s,s,Math.PI/2,Math.PI,!1),e.lineTo(0,a),e.arc(a,a,a,Math.PI,3*Math.PI/2,!1)}else e.rect(0,0,n,r);e.closePath(),e.fillStrokeShape(this)},t}(o.Shape);t.Rect=l,l.prototype.className="Rect",d._registerNode(l),s.Factory.addGetterSetter(l,"cornerRadius",0,u.getNumberOrArrayOfNumbersValidator(4)),i.Collection.mapMethods(l)},1785:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),u=n(4417),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){var t,n,r,a=this.sides(),i=this.radius();for(e.beginPath(),e.moveTo(0,0-i),t=1;t<a;t++)n=i*Math.sin(2*t*Math.PI/a),r=-1*i*Math.cos(2*t*Math.PI/a),e.lineTo(n,r);e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radius()},t.prototype.getHeight=function(){return 2*this.radius()},t.prototype.setWidth=function(e){this.radius(e/2)},t.prototype.setHeight=function(e){this.radius(e/2)},t}(o.Shape);t.RegularPolygon=l,l.prototype.className="RegularPolygon",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["radius"],u._registerNode(l),s.Factory.addGetterSetter(l,"radius",0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"sides",0,d.getNumberValidator()),i.Collection.mapMethods(l)},657:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),u=n(4417),l=2*Math.PI,c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){e.beginPath(),e.arc(0,0,this.innerRadius(),0,l,!1),e.moveTo(this.outerRadius(),0),e.arc(0,0,this.outerRadius(),l,0,!0),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.outerRadius()},t.prototype.getHeight=function(){return 2*this.outerRadius()},t.prototype.setWidth=function(e){this.outerRadius(e/2)},t.prototype.setHeight=function(e){this.outerRadius(e/2)},t}(o.Shape);t.Ring=c,c.prototype.className="Ring",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["innerRadius","outerRadius"],u._registerNode(c),s.Factory.addGetterSetter(c,"innerRadius",0,d.getNumberValidator()),s.Factory.addGetterSetter(c,"outerRadius",0,d.getNumberValidator()),i.Collection.mapMethods(c)},8986:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(6745),u=n(3774),l=n(4417),c=function(e){function t(t){var n=e.call(this,t)||this;return n._updated=!0,n.anim=new d.Animation((function(){var e=n._updated;return n._updated=!1,e})),n.on("animationChange.konva",(function(){this.frameIndex(0)})),n.on("frameIndexChange.konva",(function(){this._updated=!0})),n.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())})),n}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.animation(),n=this.frameIndex(),r=4*n,a=this.animations()[t],i=this.frameOffsets(),s=a[r+0],o=a[r+1],d=a[r+2],u=a[r+3],l=this.image();if((this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,d,u),e.closePath(),e.fillStrokeShape(this)),l)if(i){var c=i[t],h=2*n;e.drawImage(l,s,o,d,u,c[h+0],c[h+1],d,u)}else e.drawImage(l,s,o,d,u,0,0,d,u)},t.prototype._hitFunc=function(e){var t=this.animation(),n=this.frameIndex(),r=4*n,a=this.animations()[t],i=this.frameOffsets(),s=a[r+2],o=a[r+3];if(e.beginPath(),i){var d=i[t],u=2*n;e.rect(d[u+0],d[u+1],s,o)}else e.rect(0,0,s,o);e.closePath(),e.fillShape(this)},t.prototype._useBufferCanvas=function(){return e.prototype._useBufferCanvas.call(this,!0)},t.prototype._setInterval=function(){var e=this;this.interval=setInterval((function(){e._updateIndex()}),1e3/this.frameRate())},t.prototype.start=function(){if(!this.isRunning()){var e=this.getLayer();this.anim.setLayers(e),this._setInterval(),this.anim.start()}},t.prototype.stop=function(){this.anim.stop(),clearInterval(this.interval)},t.prototype.isRunning=function(){return this.anim.isRunning()},t.prototype._updateIndex=function(){var e=this.frameIndex(),t=this.animation();e<this.animations()[t].length/4-1?this.frameIndex(e+1):this.frameIndex(0)},t}(o.Shape);t.Sprite=c,c.prototype.className="Sprite",l._registerNode(c),s.Factory.addGetterSetter(c,"animation"),s.Factory.addGetterSetter(c,"animations"),s.Factory.addGetterSetter(c,"frameOffsets"),s.Factory.addGetterSetter(c,"image"),s.Factory.addGetterSetter(c,"frameIndex",0,u.getNumberValidator()),s.Factory.addGetterSetter(c,"frameRate",17,u.getNumberValidator()),s.Factory.backCompat(c,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),i.Collection.mapMethods(c)},1964:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(3774),u=n(4417),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.innerRadius(),n=this.outerRadius(),r=this.numPoints();e.beginPath(),e.moveTo(0,0-n);for(var a=1;a<2*r;a++){var i=a%2==0?n:t,s=i*Math.sin(a*Math.PI/r),o=-1*i*Math.cos(a*Math.PI/r);e.lineTo(s,o)}e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.outerRadius()},t.prototype.getHeight=function(){return 2*this.outerRadius()},t.prototype.setWidth=function(e){this.outerRadius(e/2)},t.prototype.setHeight=function(e){this.outerRadius(e/2)},t}(o.Shape);t.Star=l,l.prototype.className="Star",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["innerRadius","outerRadius"],u._registerNode(l),s.Factory.addGetterSetter(l,"numPoints",5,d.getNumberValidator()),s.Factory.addGetterSetter(l,"innerRadius",0,d.getNumberValidator()),s.Factory.addGetterSetter(l,"outerRadius",0,d.getNumberValidator()),i.Collection.mapMethods(l)},3787:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),u=n(3774),l=n(4417);function c(e){return Array.from(e)}t.stringToArray=c;var h,_="auto",f="justify",m="left",p="middle",y="normal",g=" ",M="…",v=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],L=v.length;function b(){return h||(h=i.Util.createCanvasElement().getContext("2d"))}var k=function(e){function t(t){var n=e.call(this,function(e){return(e=e||{}).fillLinearGradientColorStops||e.fillRadialGradientColorStops||e.fillPatternImage||(e.fill=e.fill||"black"),e}(t))||this;n._partialTextX=0,n._partialTextY=0;for(var r=0;r<L;r++)n.on(v[r]+"Change.konva",n._setTextData);return n._setTextData(),n}return a(t,e),t.prototype._sceneFunc=function(e){var t=this.textArr,n=t.length;if(this.text()){var r,a=this.padding(),i=this.fontSize(),s=this.lineHeight()*i,o=this.verticalAlign(),d=0,u=this.align(),l=this.getWidth(),h=this.letterSpacing(),_=this.fill(),y=this.textDecoration(),g=-1!==y.indexOf("underline"),M=-1!==y.indexOf("line-through"),v=0,L=(v=s/2,0),b=0;for(e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",p),e.setAttr("textAlign",m),o===p?d=(this.getHeight()-n*s-2*a)/2:"bottom"===o&&(d=this.getHeight()-n*s-2*a),e.translate(a,d+a),r=0;r<n;r++){L=0,b=0;var k,Y,w,D=t[r],S=D.text,T=D.width,x=r!==n-1;if(e.save(),"right"===u?L+=l-T-2*a:"center"===u&&(L+=(l-T-2*a)/2),g&&(e.save(),e.beginPath(),e.moveTo(L,v+b+Math.round(i/2)),Y=0==(k=S.split(" ").length-1),w=u===f&&x&&!Y?l-2*a:T,e.lineTo(L+Math.round(w),v+b+Math.round(i/2)),e.lineWidth=i/15,e.strokeStyle=_,e.stroke(),e.restore()),M&&(e.save(),e.beginPath(),e.moveTo(L,v+b),Y=0==(k=S.split(" ").length-1),w=u===f&&x&&!Y?l-2*a:T,e.lineTo(L+Math.round(w),v+b),e.lineWidth=i/15,e.strokeStyle=_,e.stroke(),e.restore()),0!==h||u===f){k=S.split(" ").length-1;for(var C=c(S),P=0;P<C.length;P++){var H=C[P];" "===H&&r!==n-1&&u===f&&(L+=(l-2*a-T)/k),this._partialTextX=L,this._partialTextY=v+b,this._partialText=H,e.fillStrokeShape(this),L+=this.measureSize(H).width+h}}else this._partialTextX=L,this._partialTextY=v+b,this._partialText=S,e.fillStrokeShape(this);e.restore(),n>1&&(v+=s)}}},t.prototype._hitFunc=function(e){var t=this.getWidth(),n=this.getHeight();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)},t.prototype.setText=function(e){var t=i.Util._isString(e)?e:null==e?"":e+"";return this._setAttr("text",t),this},t.prototype.getWidth=function(){return this.attrs.width===_||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width},t.prototype.getHeight=function(){return this.attrs.height===_||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height},t.prototype.getTextWidth=function(){return this.textWidth},t.prototype.getTextHeight=function(){return i.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},t.prototype.measureSize=function(e){var t,n=b(),r=this.fontSize();return n.save(),n.font=this._getContextFont(),t=n.measureText(e),n.restore(),{width:t.width,height:r}},t.prototype._getContextFont=function(){return d.Konva.UA.isIE?this.fontStyle()+g+this.fontSize()+"px "+this.fontFamily():this.fontStyle()+g+this.fontVariant()+g+(this.fontSize()+"px ")+this.fontFamily().split(",").map((function(e){var t=(e=e.trim()).indexOf(" ")>=0,n=e.indexOf('"')>=0||e.indexOf("'")>=0;return t&&!n&&(e='"'+e+'"'),e})).join(", ")},t.prototype._addTextLine=function(e){this.align()===f&&(e=e.trim());var t=this._getTextWidth(e);return this.textArr.push({text:e,width:t})},t.prototype._getTextWidth=function(e){var t=this.letterSpacing(),n=e.length;return b().measureText(e).width+(n?t*(n-1):0)},t.prototype._setTextData=function(){var e=this.text().split("\n"),t=+this.fontSize(),n=0,r=this.lineHeight()*t,a=this.attrs.width,i=this.attrs.height,s=a!==_&&void 0!==a,o=i!==_&&void 0!==i,d=this.padding(),u=a-2*d,l=i-2*d,c=0,h=this.wrap(),f="none"!==h,m="char"!==h&&f,p=this.ellipsis();this.textArr=[],b().font=this._getContextFont();for(var y=p?this._getTextWidth(M):0,v=0,L=e.length;v<L;++v){var k=e[v],Y=this._getTextWidth(k);if(s&&Y>u)for(;k.length>0;){for(var w=0,D=k.length,S="",T=0;w<D;){var x=w+D>>>1,C=k.slice(0,x+1),P=this._getTextWidth(C)+y;P<=u?(w=x+1,S=C+(p?M:""),T=P):D=x}if(!S)break;if(m){var H,F=k[S.length];(H=(F===g||"-"===F)&&T<=u?S.length:Math.max(S.lastIndexOf(g),S.lastIndexOf("-"))+1)>0&&(w=H,S=S.slice(0,w),T=this._getTextWidth(S))}if(S=S.trimRight(),this._addTextLine(S),n=Math.max(n,T),c+=r,!f||o&&c+r>l){var O=this.textArr[this.textArr.length-1];O&&p&&(this._getTextWidth(O.text+M)<u||(O.text=O.text.slice(0,O.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(O.text+M));break}if((k=(k=k.slice(w)).trimLeft()).length>0&&(Y=this._getTextWidth(k))<=u){this._addTextLine(k),c+=r,n=Math.max(n,Y);break}}else this._addTextLine(k),c+=r,n=Math.max(n,Y);if(o&&c+r>l)break}this.textHeight=t,this.textWidth=n},t.prototype.getStrokeScaleEnabled=function(){return!0},t}(o.Shape);t.Text=k,k.prototype._fillFunc=function(e){e.fillText(this._partialText,this._partialTextX,this._partialTextY)},k.prototype._strokeFunc=function(e){e.strokeText(this._partialText,this._partialTextX,this._partialTextY)},k.prototype.className="Text",k.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight"],l._registerNode(k),s.Factory.overWriteSetter(k,"width",u.getNumberOrAutoValidator()),s.Factory.overWriteSetter(k,"height",u.getNumberOrAutoValidator()),s.Factory.addGetterSetter(k,"fontFamily","Arial"),s.Factory.addGetterSetter(k,"fontSize",12,u.getNumberValidator()),s.Factory.addGetterSetter(k,"fontStyle",y),s.Factory.addGetterSetter(k,"fontVariant",y),s.Factory.addGetterSetter(k,"padding",0,u.getNumberValidator()),s.Factory.addGetterSetter(k,"align",m),s.Factory.addGetterSetter(k,"verticalAlign","top"),s.Factory.addGetterSetter(k,"lineHeight",1,u.getNumberValidator()),s.Factory.addGetterSetter(k,"wrap","word"),s.Factory.addGetterSetter(k,"ellipsis",!1,u.getBooleanValidator()),s.Factory.addGetterSetter(k,"letterSpacing",0,u.getNumberValidator()),s.Factory.addGetterSetter(k,"text","",u.getStringValidator()),s.Factory.addGetterSetter(k,"textDecoration",""),i.Collection.mapMethods(k)},2831:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(7339),u=n(3787),l=n(3774),c=n(4417),h="normal";function _(e){e.fillText(this.partialText,0,0)}function f(e){e.strokeText(this.partialText,0,0)}var m=function(e){function t(t){var n=e.call(this,t)||this;return n.dummyCanvas=i.Util.createCanvasElement(),n.dataArray=[],n.dataArray=d.Path.parsePathData(n.attrs.data),n.on("dataChange.konva",(function(){this.dataArray=d.Path.parsePathData(this.attrs.data),this._setTextData()})),n.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",n._setTextData),t&&t.getKerning&&(i.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),n.kerningFunc(t.getKerning)),n._setTextData(),n}return a(t,e),t.prototype._sceneFunc=function(e){e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",this.textBaseline()),e.setAttr("textAlign","left"),e.save();var t=this.textDecoration(),n=this.fill(),r=this.fontSize(),a=this.glyphInfo;"underline"===t&&e.beginPath();for(var i=0;i<a.length;i++){e.save();var s=a[i].p0;e.translate(s.x,s.y),e.rotate(a[i].rotation),this.partialText=a[i].text,e.fillStrokeShape(this),"underline"===t&&(0===i&&e.moveTo(0,r/2+1),e.lineTo(r,r/2+1)),e.restore()}"underline"===t&&(e.strokeStyle=n,e.lineWidth=r/20,e.stroke()),e.restore()},t.prototype._hitFunc=function(e){e.beginPath();var t=this.glyphInfo;if(t.length>=1){var n=t[0].p0;e.moveTo(n.x,n.y)}for(var r=0;r<t.length;r++){var a=t[r].p1;e.lineTo(a.x,a.y)}e.setAttr("lineWidth",this.fontSize()),e.setAttr("strokeStyle",this.colorKey),e.stroke()},t.prototype.getTextWidth=function(){return this.textWidth},t.prototype.getTextHeight=function(){return i.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},t.prototype.setText=function(e){return u.Text.prototype.setText.call(this,e)},t.prototype._getContextFont=function(){return u.Text.prototype._getContextFont.call(this)},t.prototype._getTextSize=function(e){var t=this.dummyCanvas.getContext("2d");t.save(),t.font=this._getContextFont();var n=t.measureText(e);return t.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}},t.prototype._setTextData=function(){var e=this,t=this._getTextSize(this.attrs.text),n=this.letterSpacing(),r=this.align(),a=this.kerningFunc();this.textWidth=t.width,this.textHeight=t.height;var i=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var s=0,o=0;o<e.dataArray.length;o++)e.dataArray[o].pathLength>0&&(s+=e.dataArray[o].pathLength);var l=0;"center"===r&&(l=Math.max(0,s/2-i/2)),"right"===r&&(l=Math.max(0,s-i));for(var c,h,_,f=u.stringToArray(this.text()),m=this.text().split(" ").length-1,p=-1,y=0,g=function(){y=0;for(var t=e.dataArray,n=p+1;n<t.length;n++){if(t[n].pathLength>0)return p=n,t[n];"M"===t[n].command&&(c={x:t[n].points[0],y:t[n].points[1]})}return{}},M=function(t){var a=e._getTextSize(t).width+n;" "===t&&"justify"===r&&(a+=(s-i)/m);var o=0,u=0;for(h=void 0;Math.abs(a-o)/a>.01&&u<50;){u++;for(var l=o;void 0===_;)(_=g())&&l+_.pathLength<a&&(l+=_.pathLength,_=void 0);if(_==={}||void 0===c)return;var f=!1;switch(_.command){case"L":d.Path.getLineLength(c.x,c.y,_.points[0],_.points[1])>a?h=d.Path.getPointOnLine(a,c.x,c.y,_.points[0],_.points[1],c.x,c.y):_=void 0;break;case"A":var p=_.points[4],M=_.points[5],v=_.points[4]+M;0===y?y=p+1e-8:a>o?y+=Math.PI/180*M/Math.abs(M):y-=Math.PI/360*M/Math.abs(M),(M<0&&y<v||M>=0&&y>v)&&(y=v,f=!0),h=d.Path.getPointOnEllipticalArc(_.points[0],_.points[1],_.points[2],_.points[3],y,_.points[6]);break;case"C":0===y?y=a>_.pathLength?1e-8:a/_.pathLength:a>o?y+=(a-o)/_.pathLength:y-=(o-a)/_.pathLength,y>1&&(y=1,f=!0),h=d.Path.getPointOnCubicBezier(y,_.start.x,_.start.y,_.points[0],_.points[1],_.points[2],_.points[3],_.points[4],_.points[5]);break;case"Q":0===y?y=a/_.pathLength:a>o?y+=(a-o)/_.pathLength:y-=(o-a)/_.pathLength,y>1&&(y=1,f=!0),h=d.Path.getPointOnQuadraticBezier(y,_.start.x,_.start.y,_.points[0],_.points[1],_.points[2],_.points[3])}void 0!==h&&(o=d.Path.getLineLength(c.x,c.y,h.x,h.y)),f&&(f=!1,_=void 0)}},v=l/(e._getTextSize("C").width+n)-1,L=0;L<v&&(M("C"),void 0!==c&&void 0!==h);L++)c=h;for(var b=0;b<f.length&&(M(f[b]),void 0!==c&&void 0!==h);b++){var k=d.Path.getLineLength(c.x,c.y,h.x,h.y),Y=0;if(a)try{Y=a(f[b-1],f[b])*this.fontSize()}catch(e){Y=0}c.x+=Y,h.x+=Y,this.textWidth+=Y;var w=d.Path.getPointOnLine(Y+k/2,c.x,c.y,h.x,h.y),D=Math.atan2(h.y-c.y,h.x-c.x);this.glyphInfo.push({transposeX:w.x,transposeY:w.y,text:f[b],rotation:D,p0:c,p1:h}),c=h}},t.prototype.getSelfRect=function(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var e=[];this.glyphInfo.forEach((function(t){e.push(t.p0.x),e.push(t.p0.y),e.push(t.p1.x),e.push(t.p1.y)}));for(var t,n,r=e[0]||0,a=e[0]||0,i=e[1]||0,s=e[1]||0,o=0;o<e.length/2;o++)t=e[2*o],n=e[2*o+1],r=Math.min(r,t),a=Math.max(a,t),i=Math.min(i,n),s=Math.max(s,n);var d=this.fontSize();return{x:r-d/2,y:i-d/2,width:a-r+d,height:s-i+d}},t}(o.Shape);t.TextPath=m,m.prototype._fillFunc=_,m.prototype._strokeFunc=f,m.prototype._fillFuncHit=_,m.prototype._strokeFuncHit=f,m.prototype.className="TextPath",m.prototype._attrsAffectingSize=["text","fontSize","data"],c._registerNode(m),s.Factory.addGetterSetter(m,"data"),s.Factory.addGetterSetter(m,"fontFamily","Arial"),s.Factory.addGetterSetter(m,"fontSize",12,l.getNumberValidator()),s.Factory.addGetterSetter(m,"fontStyle",h),s.Factory.addGetterSetter(m,"align","left"),s.Factory.addGetterSetter(m,"letterSpacing",0,l.getNumberValidator()),s.Factory.addGetterSetter(m,"textBaseline","middle"),s.Factory.addGetterSetter(m,"fontVariant",h),s.Factory.addGetterSetter(m,"text",""),s.Factory.addGetterSetter(m,"textDecoration",null),s.Factory.addGetterSetter(m,"kerningFunc",null),i.Collection.mapMethods(m)},9516:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=n(8588),o=n(1455),d=n(7939),u=n(7955),l=n(5244),c=n(8985),h=n(4417),_=n(3774),f=n(4417),m=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((function(e){return e+".tr-konva"})).join(" "),p="nodesRect",y=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((function(e){return e+".tr-konva"})).join(" "),g={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135},M="ontouchstart"in h.Konva._global,v=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function L(e,t,n){var r=n.x+(e.x-n.x)*Math.cos(t)-(e.y-n.y)*Math.sin(t),a=n.y+(e.x-n.x)*Math.sin(t)+(e.y-n.y)*Math.cos(t);return i(i({},e),{rotation:e.rotation+t,x:r,y:a})}var b=function(e){function t(t){var n=e.call(this,t)||this;return n._transforming=!1,n._createElements(),n._handleMouseMove=n._handleMouseMove.bind(n),n._handleMouseUp=n._handleMouseUp.bind(n),n.update=n.update.bind(n),n.on(m,n.update),n.getNode()&&n.update(),n}return a(t,e),t.prototype.attachTo=function(e){return this.setNode(e),this},t.prototype.setNode=function(e){return s.Util.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([e])},t.prototype.getNode=function(){return this._nodes&&this._nodes[0]},t.prototype.setNodes=function(e){var t=this;return void 0===e&&(e=[]),this._nodes&&this._nodes.length&&this.detach(),this._nodes=e,1===e.length?this.rotation(e[0].rotation()):this.rotation(0),this._nodes.forEach((function(e){var n=e._attrsAffectingSize.map((function(e){return e+"Change.tr-konva"})).join(" "),r=function(){1===t.nodes().length&&t.rotation(t.nodes()[0].rotation()),t._resetTransformCache(),t._transforming||t.isDragging()||t.update()};e.on(n,r),e.on(y,r),e.on("_clearTransformCache.tr-konva",r),e.on("xChange.tr-konva yChange.tr-konva",r),t._proxyDrag(e)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this},t.prototype._proxyDrag=function(e){var t,n=this;e.on("dragstart.tr-konva",(function(r){t=e.getAbsolutePosition(),n.isDragging()||e===n.findOne(".back")||n.startDrag(r,!1)})),e.on("dragmove.tr-konva",(function(r){if(t){var a=e.getAbsolutePosition(),i=a.x-t.x,s=a.y-t.y;n.nodes().forEach((function(t){if(t!==e&&!t.isDragging()){var n=t.getAbsolutePosition();t.setAbsolutePosition({x:n.x+i,y:n.y+s}),t.startDrag(r)}})),t=null}}))},t.prototype.getNodes=function(){return this._nodes||[]},t.prototype.getActiveAnchor=function(){return this._movingAnchorName},t.prototype.detach=function(){this._nodes&&this._nodes.forEach((function(e){e.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()},t.prototype._resetTransformCache=function(){this._clearCache(p),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},t.prototype._getNodeRect=function(){return this._getCache(p,this.__getNodeRect)},t.prototype.__getNodeShape=function(e,t,n){void 0===t&&(t=this.rotation());var r=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),a=e.getAbsoluteScale(n),i=e.getAbsolutePosition(n),s=r.x*a.x-e.offsetX()*a.x,o=r.y*a.y-e.offsetY()*a.y,d=(h.Konva.getAngle(e.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return L({x:i.x+s*Math.cos(d)+o*Math.sin(-d),y:i.y+o*Math.cos(d)+s*Math.sin(d),width:r.width*a.x,height:r.height*a.y,rotation:d},-h.Konva.getAngle(t),{x:0,y:0})},t.prototype.__getNodeRect=function(){var e=this;if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};var t=[];this.nodes().map((function(n){var r=n.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:e.ignoreStroke()}),a=[{x:r.x,y:r.y},{x:r.x+r.width,y:r.y},{x:r.x+r.width,y:r.y+r.height},{x:r.x,y:r.y+r.height}],i=n.getAbsoluteTransform();a.forEach((function(e){var n=i.point(e);t.push(n)}))}));var n,r,a,i,o=new s.Transform;o.rotate(-h.Konva.getAngle(this.rotation())),t.forEach((function(e){var t=o.point(e);void 0===n&&(n=a=t.x,r=i=t.y),n=Math.min(n,t.x),r=Math.min(r,t.y),a=Math.max(a,t.x),i=Math.max(i,t.y)})),o.invert();var d=o.point({x:n,y:r});return{x:d.x,y:d.y,width:a-n,height:i-r,rotation:h.Konva.getAngle(this.rotation())}},t.prototype.getX=function(){return this._getNodeRect().x},t.prototype.getY=function(){return this._getNodeRect().y},t.prototype.getWidth=function(){return this._getNodeRect().width},t.prototype.getHeight=function(){return this._getNodeRect().height},t.prototype._createElements=function(){this._createBack(),v.forEach(function(e){this._createAnchor(e)}.bind(this)),this._createAnchor("rotater")},t.prototype._createAnchor=function(e){var t=this,n=new l.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:e+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:M?10:"auto"}),r=this;n.on("mousedown touchstart",(function(e){r._handleMouseDown(e)})),n.on("dragstart",(function(e){n.stopDrag(),e.cancelBubble=!0})),n.on("dragend",(function(e){e.cancelBubble=!0})),n.on("mouseenter",(function(){var r=h.Konva.getAngle(t.rotation()),a=function(e,t){if("rotater"===e)return"crosshair";t+=s.Util._degToRad(g[e]||0);var n=(s.Util._radToDeg(t)%360+360)%360;return s.Util._inRange(n,337.5,360)||s.Util._inRange(n,0,22.5)?"ns-resize":s.Util._inRange(n,22.5,67.5)?"nesw-resize":s.Util._inRange(n,67.5,112.5)?"ew-resize":s.Util._inRange(n,112.5,157.5)?"nwse-resize":s.Util._inRange(n,157.5,202.5)?"ns-resize":s.Util._inRange(n,202.5,247.5)?"nesw-resize":s.Util._inRange(n,247.5,292.5)?"ew-resize":s.Util._inRange(n,292.5,337.5)?"nwse-resize":(s.Util.error("Transformer has unknown angle for cursor detection: "+n),"pointer")}(e,r);n.getStage().content.style.cursor=a,t._cursorChange=!0})),n.on("mouseout",(function(){n.getStage().content.style.cursor="",t._cursorChange=!1})),this.add(n)},t.prototype._createBack=function(){var e=this,t=new u.Shape({name:"back",width:0,height:0,draggable:!0,sceneFunc:function(e){var t=this.getParent(),n=t.padding();e.beginPath(),e.rect(-n,-n,this.width()+2*n,this.height()+2*n),e.moveTo(this.width()/2,-n),t.rotateEnabled()&&e.lineTo(this.width()/2,-t.rotateAnchorOffset()*s.Util._sign(this.height())-n),e.fillStrokeShape(this)},hitFunc:function(t,n){if(e.shouldOverdrawWholeArea()){var r=e.padding();t.beginPath(),t.rect(-r,-r,n.width()+2*r,n.height()+2*r),t.fillStrokeShape(n)}}});this.add(t),this._proxyDrag(t),t.on("dragstart",(function(e){e.cancelBubble=!0})),t.on("dragmove",(function(e){e.cancelBubble=!0})),t.on("dragend",(function(e){e.cancelBubble=!0}))},t.prototype._handleMouseDown=function(e){this._movingAnchorName=e.target.name().split(" ")[0];var t=this._getNodeRect(),n=t.width,r=t.height,a=Math.sqrt(Math.pow(n,2)+Math.pow(r,2));this.sin=Math.abs(r/a),this.cos=Math.abs(n/a),window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0;var i=e.target.getAbsolutePosition(),s=e.target.getStage().getPointerPosition();this._anchorDragOffset={x:s.x-i.x,y:s.y-i.y},this._fire("transformstart",{evt:e,target:this.getNode()}),this.getNode()._fire("transformstart",{evt:e,target:this.getNode()})},t.prototype._handleMouseMove=function(e){var t,n,r,a=this.findOne("."+this._movingAnchorName),i=a.getStage();i.setPointersPositions(e);var s=i.getPointerPosition(),o={x:s.x-this._anchorDragOffset.x,y:s.y-this._anchorDragOffset.y},d=a.getAbsolutePosition();a.setAbsolutePosition(o);var u=a.getAbsolutePosition();if(d.x!==u.x||d.y!==u.y)if("rotater"!==this._movingAnchorName){var l=this.keepRatio()||e.shiftKey,c=this.centeredScaling()||e.altKey;if("top-left"===this._movingAnchorName){if(l){var _=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};r=Math.sqrt(Math.pow(_.x-a.x(),2)+Math.pow(_.y-a.y(),2));var f=this.findOne(".top-left").x()>_.x?-1:1,m=this.findOne(".top-left").y()>_.y?-1:1;t=r*this.cos*f,n=r*this.sin*m,this.findOne(".top-left").x(_.x-t),this.findOne(".top-left").y(_.y-n)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(a.y());else if("top-right"===this._movingAnchorName){l&&(_=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()},r=Math.sqrt(Math.pow(a.x()-_.x,2)+Math.pow(_.y-a.y(),2)),f=this.findOne(".top-right").x()<_.x?-1:1,m=this.findOne(".top-right").y()>_.y?-1:1,t=r*this.cos*f,n=r*this.sin*m,this.findOne(".top-right").x(_.x+t),this.findOne(".top-right").y(_.y-n));var p=a.position();this.findOne(".top-left").y(p.y),this.findOne(".bottom-right").x(p.x)}else"middle-left"===this._movingAnchorName?this.findOne(".top-left").x(a.x()):"middle-right"===this._movingAnchorName?this.findOne(".bottom-right").x(a.x()):"bottom-left"===this._movingAnchorName?(l&&(_=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()},r=Math.sqrt(Math.pow(_.x-a.x(),2)+Math.pow(a.y()-_.y,2)),f=_.x<a.x()?-1:1,m=a.y()<_.y?-1:1,t=r*this.cos*f,n=r*this.sin*m,a.x(_.x-t),a.y(_.y+n)),p=a.position(),this.findOne(".top-left").x(p.x),this.findOne(".bottom-right").y(p.y)):"bottom-center"===this._movingAnchorName?this.findOne(".bottom-right").y(a.y()):"bottom-right"===this._movingAnchorName?l&&(_=c?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()},r=Math.sqrt(Math.pow(a.x()-_.x,2)+Math.pow(a.y()-_.y,2)),f=this.findOne(".bottom-right").x()<_.x?-1:1,m=this.findOne(".bottom-right").y()<_.y?-1:1,t=r*this.cos*f,n=r*this.sin*m,this.findOne(".bottom-right").x(_.x+t),this.findOne(".bottom-right").y(_.y+n)):console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(c=this.centeredScaling()||e.altKey){var y=this.findOne(".top-left"),g=this.findOne(".bottom-right"),M=y.x(),v=y.y(),b=this.getWidth()-g.x(),k=this.getHeight()-g.y();g.move({x:-M,y:-v}),y.move({x:b,y:k})}var Y=this.findOne(".top-left").getAbsolutePosition();t=Y.x,n=Y.y;var w=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),D=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:t,y:n,width:w,height:D,rotation:h.Konva.getAngle(this.rotation())},e)}else{var S=this._getNodeRect();t=a.x()-S.width/2,n=-a.y()+S.height/2;var T=Math.atan2(-n,t)+Math.PI/2;S.height<0&&(T-=Math.PI);var x=h.Konva.getAngle(this.rotation())+T,C=h.Konva.getAngle(this.rotationSnapTolerance()),P=function(e,t){return L(e,t,function(e){return{x:e.x+e.width/2*Math.cos(e.rotation)+e.height/2*Math.sin(-e.rotation),y:e.y+e.height/2*Math.cos(e.rotation)+e.width/2*Math.sin(e.rotation)}}(e))}(S,function(e,t,n){for(var r=t,a=0;a<e.length;a++){var i=h.Konva.getAngle(e[a]),s=Math.abs(i-t)%(2*Math.PI);Math.min(s,2*Math.PI-s)<n&&(r=i)}return r}(this.rotationSnaps(),x,C)-S.rotation);this._fitNodesInto(P,e)}},t.prototype._handleMouseUp=function(e){this._removeEvents(e)},t.prototype.getAbsoluteTransform=function(){return this.getTransform()},t.prototype._removeEvents=function(e){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0);var t=this.getNode();this._fire("transformend",{evt:e,target:t}),t&&t.fire("transformend",{evt:e,target:t}),this._movingAnchorName=null}},t.prototype._fitNodesInto=function(e,t){var n=this,r=this._getNodeRect();if(s.Util._inRange(e.width,2*-this.padding()-1,1))this.update();else if(s.Util._inRange(e.height,2*-this.padding()-1,1))this.update();else{var a=new s.Transform;if(a.rotate(h.Konva.getAngle(this.rotation())),this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("left")>=0){var i=a.point({x:2*-this.padding(),y:0});e.x+=i.x,e.y+=i.y,e.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y}else this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("right")>=0&&(i=a.point({x:2*this.padding(),y:0}),this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y,e.width+=2*this.padding());if(this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("top")>=0?(i=a.point({x:0,y:2*-this.padding()}),e.x+=i.x,e.y+=i.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y,e.height+=2*this.padding()):this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("bottom")>=0&&(i=a.point({x:0,y:2*this.padding()}),this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=i.x,this._anchorDragOffset.y-=i.y,e.height+=2*this.padding()),this.boundBoxFunc()){var o=this.boundBoxFunc()(r,e);o?e=o:s.Util.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}var d=1e7,u=new s.Transform;u.translate(r.x,r.y),u.rotate(r.rotation),u.scale(r.width/d,r.height/d);var l=new s.Transform;l.translate(e.x,e.y),l.rotate(e.rotation),l.scale(e.width/d,e.height/d);var c=l.multiply(u.invert());this._nodes.forEach((function(e){var r=e.getParent().getAbsoluteTransform(),a=e.getTransform().copy();a.translate(e.offsetX(),e.offsetY());var i=new s.Transform;i.multiply(r.copy().invert()).multiply(c).multiply(r).multiply(a);var o=i.decompose();e.setAttrs(o),n._fire("transform",{evt:t,target:e}),e._fire("transform",{evt:t,target:e})})),this.rotation(s.Util._getRotation(e.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}},t.prototype.forceUpdate=function(){this._resetTransformCache(),this.update()},t.prototype._batchChangeChild=function(e,t){this.findOne(e).setAttrs(t)},t.prototype.update=function(){var e=this,t=this._getNodeRect();this.rotation(s.Util._getRotation(t.rotation));var n=t.width,r=t.height,a=this.enabledAnchors(),i=this.resizeEnabled(),o=this.padding(),d=this.anchorSize();this.find("._anchor").each((function(t){t.setAttrs({width:d,height:d,offsetX:d/2,offsetY:d/2,stroke:e.anchorStroke(),strokeWidth:e.anchorStrokeWidth(),fill:e.anchorFill(),cornerRadius:e.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:d/2+o,offsetY:d/2+o,visible:i&&a.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:n/2,y:0,offsetY:d/2+o,visible:i&&a.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:n,y:0,offsetX:d/2-o,offsetY:d/2+o,visible:i&&a.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:r/2,offsetX:d/2+o,visible:i&&a.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:n,y:r/2,offsetX:d/2-o,visible:i&&a.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:r,offsetX:d/2+o,offsetY:d/2-o,visible:i&&a.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:n/2,y:r,offsetY:d/2-o,visible:i&&a.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:n,y:r,offsetX:d/2-o,offsetY:d/2-o,visible:i&&a.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:n/2,y:-this.rotateAnchorOffset()*s.Util._sign(r)-o,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:n,height:r,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0})},t.prototype.isTransforming=function(){return this._transforming},t.prototype.stopTransform=function(){if(this._transforming){this._removeEvents();var e=this.findOne("."+this._movingAnchorName);e&&e.stopDrag()}},t.prototype.destroy=function(){return this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),c.Group.prototype.destroy.call(this),this.detach(),this._removeEvents(),this},t.prototype.toObject=function(){return d.Node.prototype.toObject.call(this)},t}(c.Group);t.Transformer=b,b.prototype.className="Transformer",f._registerNode(b),o.Factory.addGetterSetter(b,"enabledAnchors",v,(function(e){return e instanceof Array||s.Util.warn("enabledAnchors value should be an array"),e instanceof Array&&e.forEach((function(e){-1===v.indexOf(e)&&s.Util.warn("Unknown anchor name: "+e+". Available names are: "+v.join(", "))})),e||[]})),o.Factory.addGetterSetter(b,"resizeEnabled",!0),o.Factory.addGetterSetter(b,"anchorSize",10,_.getNumberValidator()),o.Factory.addGetterSetter(b,"rotateEnabled",!0),o.Factory.addGetterSetter(b,"rotationSnaps",[]),o.Factory.addGetterSetter(b,"rotateAnchorOffset",50,_.getNumberValidator()),o.Factory.addGetterSetter(b,"rotationSnapTolerance",5,_.getNumberValidator()),o.Factory.addGetterSetter(b,"borderEnabled",!0),o.Factory.addGetterSetter(b,"anchorStroke","rgb(0, 161, 255)"),o.Factory.addGetterSetter(b,"anchorStrokeWidth",1,_.getNumberValidator()),o.Factory.addGetterSetter(b,"anchorFill","white"),o.Factory.addGetterSetter(b,"anchorCornerRadius",0,_.getNumberValidator()),o.Factory.addGetterSetter(b,"borderStroke","rgb(0, 161, 255)"),o.Factory.addGetterSetter(b,"borderStrokeWidth",1,_.getNumberValidator()),o.Factory.addGetterSetter(b,"borderDash"),o.Factory.addGetterSetter(b,"keepRatio",!0),o.Factory.addGetterSetter(b,"centeredScaling",!1),o.Factory.addGetterSetter(b,"ignoreStroke",!1),o.Factory.addGetterSetter(b,"padding",0,_.getNumberValidator()),o.Factory.addGetterSetter(b,"node"),o.Factory.addGetterSetter(b,"nodes"),o.Factory.addGetterSetter(b,"boundBoxFunc"),o.Factory.addGetterSetter(b,"shouldOverdrawWholeArea",!1),o.Factory.backCompat(b,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),s.Collection.mapMethods(b)},9846:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(8588),s=n(1455),o=n(7955),d=n(4417),u=n(3774),l=n(4417),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype._sceneFunc=function(e){e.beginPath(),e.arc(0,0,this.radius(),0,d.Konva.getAngle(this.angle()),this.clockwise()),e.lineTo(0,0),e.closePath(),e.fillStrokeShape(this)},t.prototype.getWidth=function(){return 2*this.radius()},t.prototype.getHeight=function(){return 2*this.radius()},t.prototype.setWidth=function(e){this.radius(e/2)},t.prototype.setHeight=function(e){this.radius(e/2)},t}(o.Shape);t.Wedge=c,c.prototype.className="Wedge",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["radius"],l._registerNode(c),s.Factory.addGetterSetter(c,"radius",0,u.getNumberValidator()),s.Factory.addGetterSetter(c,"angle",0,u.getNumberValidator()),s.Factory.addGetterSetter(c,"clockwise",!1),s.Factory.backCompat(c,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),i.Collection.mapMethods(c)},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,s){var o=t(r),d=n[e][t(r)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,s){var o=n(t),d=r[e][n(t)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=r(t),d=a[e][r(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},1560:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var r=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":s=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},94:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},8529:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(r(e)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return a+(1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return a+(1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami");case"d":return t||r?"en dan":"enim dnem";case"dd":return a+(1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi");case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+(1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci");case"y":return t||r?"eno leto":"enim letom";case"yy":return a+(1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function u(e){return void 0===e}function l(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function h(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function _(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function f(e,t,n,r){return wt(e,t,n,r,!0).utc()}function m(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=m(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function y(e){var t=f(NaN);return null!=e?_(m(t),e):m(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=a.momentProperties=[],M=!1;function v(e,t){var n,r,a;if(u(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),u(t._i)||(e._i=t._i),u(t._f)||(e._f=t._f),u(t._l)||(e._l=t._l),u(t._strict)||(e._strict=t._strict),u(t._tzm)||(e._tzm=t._tzm),u(t._isUTC)||(e._isUTC=t._isUTC),u(t._offset)||(e._offset=t._offset),u(t._pf)||(e._pf=m(t)),u(t._locale)||(e._locale=t._locale),g.length>0)for(n=0;n<g.length;n++)u(a=t[r=g[n]])||(e[r]=a);return e}function L(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,a.updateOffset(this),M=!1)}function b(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function k(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return _((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,s,d=[];for(i=0;i<arguments.length;i++){if(r="","object"==typeof arguments[i]){for(s in r+="\n["+i+"] ",arguments[0])o(arguments[0],s)&&(r+=s+": "+arguments[0][s]+", ");r=r.slice(0,-2)}else r=arguments[i];d.push(r)}k(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var w,D={};function S(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),D[e]||(k(t),D[e]=!0)}function T(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,r=_({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(r[n]={},_(r[n],e[n]),_(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(r[n]=_({},r[n]));return r}function C(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function P(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var H=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,O={},E={};function j(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(E[e]=a),t&&(E[t[0]]=function(){return P(a.apply(this,arguments),t[1],t[2])}),n&&(E[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function A(e,t){return e.isValid()?(t=N(t,e.localeData()),O[t]=O[t]||function(e){var t,n,r,a=e.match(H);for(t=0,n=a.length;t<n;t++)E[a[t]]?a[t]=E[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=T(a[r])?a[r].call(t,e):a[r];return i}}(t),O[t](e)):e.localeData().invalidDate()}function N(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,r),F.lastIndex=0,n-=1;return e}var R={};function W(e,t){var n=e.toLowerCase();R[n]=R[n+"s"]=R[t]=e}function I(e){return"string"==typeof e?R[e]||R[e.toLowerCase()]:void 0}function z(e){var t,n,r={};for(n in e)o(e,n)&&(t=I(n))&&(r[t]=e[n]);return r}var G={};function U(e,t){G[e]=t}function B(e){return e%4==0&&e%100!=0||e%400==0}function V(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function J(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=V(t)),n}function K(e,t){return function(n){return null!=n?(X(this,e,n),a.updateOffset(this,t),this):q(this,e)}}function q(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function X(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&B(e.year())&&1===e.month()&&29===e.date()?(n=J(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),be(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var $,Q=/\d/,Z=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,re=/\d\d?/,ae=/\d\d\d\d?/,ie=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,ue=/\d+/,le=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,he=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function fe(e,t,n){$[e]=T(t)?t:function(e,r){return e&&n?n:t}}function me(e,t){return o($,e)?$[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}$={};var ye={};function ge(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),l(t)&&(r=function(e,n){n[t]=J(e)}),n=0;n<e.length;n++)ye[e[n]]=r}function Me(e,t){ge(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function ve(e,t,n){null!=t&&o(ye,e)&&ye[e](t,n._a,n,e)}var Le;function be(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?B(e)?29:28:31-r%7%2}Le=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},j("M",["MM",2],"Mo",(function(){return this.month()+1})),j("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),j("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),W("month","M"),U("month",8),fe("M",re),fe("MM",re,Z),fe("MMM",(function(e,t){return t.monthsShortRegex(e)})),fe("MMMM",(function(e,t){return t.monthsRegex(e)})),ge(["M","MM"],(function(e,t){t[1]=J(e)-1})),ge(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:m(n).invalidMonth=e}));var ke="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ye="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),we=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,De=_e,Se=_e;function Te(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=f([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Le.call(this._shortMonthsParse,s))?a:null:-1!==(a=Le.call(this._longMonthsParse,s))?a:null:"MMM"===t?-1!==(a=Le.call(this._shortMonthsParse,s))||-1!==(a=Le.call(this._longMonthsParse,s))?a:null:-1!==(a=Le.call(this._longMonthsParse,s))||-1!==(a=Le.call(this._shortMonthsParse,s))?a:null}function xe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=J(t);else if(!l(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),be(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ce(e){return null!=e?(xe(this,e),a.updateOffset(this,!0),this):q(this,"Month")}function Pe(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=f([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=pe(r[t]),a[t]=pe(a[t]);for(t=0;t<24;t++)i[t]=pe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function He(e){return B(e)?366:365}j("Y",0,0,(function(){var e=this.year();return e<=9999?P(e,4):"+"+e})),j(0,["YY",2],0,(function(){return this.year()%100})),j(0,["YYYY",4],0,"year"),j(0,["YYYYY",5],0,"year"),j(0,["YYYYYY",6,!0],0,"year"),W("year","y"),U("year",1),fe("Y",le),fe("YY",re,Z),fe("YYYY",oe,te),fe("YYYYY",de,ne),fe("YYYYYY",de,ne),ge(["YYYYY","YYYYYY"],0),ge("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):J(e)})),ge("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),ge("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return J(e)+(J(e)>68?1900:2e3)};var Fe=K("FullYear",!0);function Oe(e,t,n,r,a,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,r,a,i,s),o}function Ee(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function je(e,t,n){var r=7+t-n;return-(7+Ee(e,0,r).getUTCDay()-t)%7+r-1}function Ae(e,t,n,r,a){var i,s,o=1+7*(t-1)+(7+n-r)%7+je(e,r,a);return o<=0?s=He(i=e-1)+o:o>He(e)?(i=e+1,s=o-He(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Ne(e,t,n){var r,a,i=je(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?r=s+Re(a=e.year()-1,t,n):s>Re(e.year(),t,n)?(r=s-Re(e.year(),t,n),a=e.year()+1):(a=e.year(),r=s),{week:r,year:a}}function Re(e,t,n){var r=je(e,t,n),a=je(e+1,t,n);return(He(e)-r+a)/7}j("w",["ww",2],"wo","week"),j("W",["WW",2],"Wo","isoWeek"),W("week","w"),W("isoWeek","W"),U("week",5),U("isoWeek",5),fe("w",re),fe("ww",re,Z),fe("W",re),fe("WW",re,Z),Me(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=J(e)}));function We(e,t){return e.slice(t,7).concat(e.slice(0,t))}j("d",0,"do","day"),j("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),j("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),j("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),j("e",0,0,"weekday"),j("E",0,0,"isoWeekday"),W("day","d"),W("weekday","e"),W("isoWeekday","E"),U("day",11),U("weekday",11),U("isoWeekday",11),fe("d",re),fe("e",re),fe("E",re),fe("dd",(function(e,t){return t.weekdaysMinRegex(e)})),fe("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),fe("dddd",(function(e,t){return t.weekdaysRegex(e)})),Me(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:m(n).invalidWeekday=e})),Me(["d","e","E"],(function(e,t,n,r){t[r]=J(e)}));var Ie="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ge="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ue=_e,Be=_e,Ve=_e;function Je(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=f([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Le.call(this._weekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Le.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=Le.call(this._minWeekdaysParse,s))?a:null:"dddd"===t?-1!==(a=Le.call(this._weekdaysParse,s))||-1!==(a=Le.call(this._shortWeekdaysParse,s))||-1!==(a=Le.call(this._minWeekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Le.call(this._shortWeekdaysParse,s))||-1!==(a=Le.call(this._weekdaysParse,s))||-1!==(a=Le.call(this._minWeekdaysParse,s))?a:null:-1!==(a=Le.call(this._minWeekdaysParse,s))||-1!==(a=Le.call(this._weekdaysParse,s))||-1!==(a=Le.call(this._shortWeekdaysParse,s))?a:null}function Ke(){function e(e,t){return t.length-e.length}var t,n,r,a,i,s=[],o=[],d=[],u=[];for(t=0;t<7;t++)n=f([2e3,1]).day(t),r=pe(this.weekdaysMin(n,"")),a=pe(this.weekdaysShort(n,"")),i=pe(this.weekdays(n,"")),s.push(r),o.push(a),d.push(i),u.push(r),u.push(a),u.push(i);s.sort(e),o.sort(e),d.sort(e),u.sort(e),this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function qe(){return this.hours()%12||12}function Xe(e,t){j(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function $e(e,t){return t._meridiemParse}j("H",["HH",2],0,"hour"),j("h",["hh",2],0,qe),j("k",["kk",2],0,(function(){return this.hours()||24})),j("hmm",0,0,(function(){return""+qe.apply(this)+P(this.minutes(),2)})),j("hmmss",0,0,(function(){return""+qe.apply(this)+P(this.minutes(),2)+P(this.seconds(),2)})),j("Hmm",0,0,(function(){return""+this.hours()+P(this.minutes(),2)})),j("Hmmss",0,0,(function(){return""+this.hours()+P(this.minutes(),2)+P(this.seconds(),2)})),Xe("a",!0),Xe("A",!1),W("hour","h"),U("hour",13),fe("a",$e),fe("A",$e),fe("H",re),fe("h",re),fe("k",re),fe("HH",re,Z),fe("hh",re,Z),fe("kk",re,Z),fe("hmm",ae),fe("hmmss",ie),fe("Hmm",ae),fe("Hmmss",ie),ge(["H","HH"],3),ge(["k","kk"],(function(e,t,n){var r=J(e);t[3]=24===r?0:r})),ge(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ge(["h","hh"],(function(e,t,n){t[3]=J(e),m(n).bigHour=!0})),ge("hmm",(function(e,t,n){var r=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r)),m(n).bigHour=!0})),ge("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r,2)),t[5]=J(e.substr(a)),m(n).bigHour=!0})),ge("Hmm",(function(e,t,n){var r=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r))})),ge("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r,2)),t[5]=J(e.substr(a))}));var Qe=K("Hours",!0);var Ze,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:ke,monthsShort:Ye,week:{dow:0,doy:6},weekdays:Ie,weekdaysMin:Ge,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var r=null;if(void 0===tt[t]&&e&&e.exports)try{r=Ze._abbr,n(6700)("./"+t),st(r)}catch(e){tt[t]=null}return tt[t]}function st(e,t){var n;return e&&((n=u(t)?dt(e):ot(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function ot(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new C(x(r,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),st(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=at(e[i]).split("-")).length,n=(n=at(e[i+1]))?n.split("-"):null;t>0;){if(r=it(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}i++}return Ze}(e)}function ut(e){var t,n=e._a;return n&&-2===m(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>be(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,m(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),m(e)._overflowWeeks&&-1===t&&(t=7),m(e)._overflowWeekday&&-1===t&&(t=8),m(e).overflow=t),e}var lt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ht=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],ft=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],mt=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,r,a,i,s,o=e._i,d=lt.exec(o)||ct.exec(o);if(d){for(m(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[1])){a=_t[t][0],r=!1!==_t[t][2];break}if(null==a)return void(e._isValid=!1);if(d[3]){for(t=0,n=ft.length;t<n;t++)if(ft[t][1].exec(d[3])){i=(d[2]||" ")+ft[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(d[4]){if(!ht.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=a+(i||"")+(s||""),kt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function vt(e){var t,n,r,a,i,s,o,d,u=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){if(n=u[4],r=u[3],a=u[2],i=u[5],s=u[6],o=u[7],d=[Mt(n),Ye.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(s,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(m(n).weekdayMismatch=!0,n._isValid=!1,!1)}(u[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return yt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(u[8],u[9],u[10]),e._d=Ee.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),m(e).rfc2822=!0}else e._isValid=!1}function Lt(e,t,n){return null!=e?e:null!=t?t:n}function bt(e){var t,n,r,i,s,o=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,i,s,o,d,u;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,s=4,n=Lt(t.GG,e._a[0],Ne(Dt(),1,4).year),r=Lt(t.W,1),((a=Lt(t.E,1))<1||a>7)&&(d=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,u=Ne(Dt(),i,s),n=Lt(t.gg,e._a[0],u.year),r=Lt(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(d=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(d=!0)):a=i),r<1||r>Re(n,i,s)?m(e)._overflowWeeks=!0:null!=d?m(e)._overflowWeekday=!0:(o=Ae(n,r,a,i,s),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Lt(e._a[0],r[0]),(e._dayOfYear>He(s)||0===e._dayOfYear)&&(m(e)._overflowDayOfYear=!0),n=Ee(s,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ee:Oe).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(m(e).weekdayMismatch=!0)}}function kt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],m(e).empty=!0;var t,n,r,i,s,o,d=""+e._i,u=d.length,l=0;for(r=N(e._f,e._locale).match(H)||[],t=0;t<r.length;t++)i=r[t],(n=(d.match(me(i,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&m(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),l+=n.length),E[i]?(n?m(e).empty=!1:m(e).unusedTokens.push(i),ve(i,n,e)):e._strict&&!n&&m(e).unusedTokens.push(i);m(e).charsLeftOver=u-l,d.length>0&&m(e).unusedInput.push(d),e._a[3]<=12&&!0===m(e).bigHour&&e._a[3]>0&&(m(e).bigHour=void 0),m(e).parsedDateParts=e._a.slice(0),m(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=m(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),bt(e),ut(e)}else vt(e);else gt(e)}function Yt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new L(ut(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,s,o=!1;if(0===e._f.length)return m(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,s=!1,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],kt(t),p(t)&&(s=!0),i+=m(t).charsLeftOver,i+=10*m(t).unusedTokens.length,m(t).score=i,o?i<r&&(r=i,n=t):(null==r||i<r||s)&&(r=i,n=t,s&&(o=!0));_(e,n||t)}(e):n?kt(e):function(e){var t=e._i;u(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=mt.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,vt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=h(t.slice(0),(function(e){return parseInt(e,10)})),bt(e)):s(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=h([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),bt(e)}}(e):l(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function wt(e,t,n,r,a){var o,u={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(s(e)&&d(e)||i(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=e,u._f=t,u._strict=r,(o=new L(ut(Yt(u))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Dt(e,t,n,r){return wt(e,t,n,r,!1)}a.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var St=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),Tt=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function xt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Ct=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Pt(e){var t=z(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,d=t.hour||0,u=t.minute||0,l=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1;for(t in e)if(o(e,t)&&(-1===Le.call(Ct,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Ct.length;++n)if(e[Ct[n]]){if(r)return!1;parseFloat(e[Ct[n]])!==J(e[Ct[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*l+6e4*u+1e3*d*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=dt(),this._bubble()}function Ht(e){return e instanceof Pt}function Ft(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ot(e,t){j(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+P(~~(e/60),2)+t+P(~~e%60,2)}))}Ot("Z",":"),Ot("ZZ",""),fe("Z",he),fe("ZZ",he),ge(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=jt(he,e)}));var Et=/([\+\-]|\d\d)/gi;function jt(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(Et)||["-",0,0])[1]+J(n[2]))?0:"+"===n[0]?r:-r}function At(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(b(e)||c(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Dt(e).local()}function Nt(e){return-Math.round(e._d.getTimezoneOffset())}function Rt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Wt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,It=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function zt(e,t){var n,r,a,i,s,d,u=e,c=null;return Ht(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:l(e)||!isNaN(+e)?(u={},t?u[t]=+e:u.milliseconds=+e):(c=Wt.exec(e))?(n="-"===c[1]?-1:1,u={y:0,d:J(c[2])*n,h:J(c[3])*n,m:J(c[4])*n,s:J(c[5])*n,ms:J(Ft(1e3*c[6]))*n}):(c=It.exec(e))?(n="-"===c[1]?-1:1,u={y:Gt(c[2],n),M:Gt(c[3],n),w:Gt(c[4],n),d:Gt(c[5],n),h:Gt(c[6],n),m:Gt(c[7],n),s:Gt(c[8],n)}):null==u?u={}:"object"==typeof u&&("from"in u||"to"in u)&&(i=Dt(u.from),s=Dt(u.to),a=i.isValid()&&s.isValid()?(s=At(s,i),i.isBefore(s)?d=Ut(i,s):((d=Ut(s,i)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(u={}).ms=a.milliseconds,u.M=a.months),r=new Pt(u),Ht(e)&&o(e,"_locale")&&(r._locale=e._locale),Ht(e)&&o(e,"_isValid")&&(r._isValid=e._isValid),r}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Ut(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Bt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Vt(this,zt(n,r),e),this}}function Vt(e,t,n,r){var i=t._milliseconds,s=Ft(t._days),o=Ft(t._months);e.isValid()&&(r=null==r||r,o&&xe(e,q(e,"Month")+o*n),s&&X(e,"Date",q(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,s||o))}zt.fn=Pt.prototype,zt.invalid=function(){return zt(NaN)};var Jt=Bt(1,"add"),Kt=Bt(-1,"subtract");function qt(e){return"string"==typeof e||e instanceof String}function Xt(e){return b(e)||c(e)||qt(e)||l(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!l(t)&&qt(e)})).length),t&&n}(e)||function(e){var t,n,r=s(e)&&!d(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<i.length;t+=1)n=i[t],a=a||o(e,n);return r&&a}(e)||null==e}function $t(e){var t,n=s(e)&&!d(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||o(e,a[t]);return n&&r}function Qt(e,t){if(e.date()<t.date())return-Qt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Zt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,rn=6e4,an=36e5,sn=126227808e5;function on(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function un(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function ln(e,t){return t.erasAbbrRegex(e)}function cn(){var e,t,n=[],r=[],a=[],i=[],s=this.eras();for(e=0,t=s.length;e<t;++e)r.push(pe(s[e].name)),n.push(pe(s[e].abbr)),a.push(pe(s[e].narrow)),i.push(pe(s[e].name)),i.push(pe(s[e].abbr)),i.push(pe(s[e].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+r.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+a.join("|")+")","i")}function hn(e,t){j(0,[e,e.length],0,t)}function _n(e,t,n,r,a){var i;return null==e?Ne(this,r,a).year:(t>(i=Re(e,r,a))&&(t=i),fn.call(this,e,t,n,r,a))}function fn(e,t,n,r,a){var i=Ae(e,t,n,r,a),s=Ee(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}j("N",0,0,"eraAbbr"),j("NN",0,0,"eraAbbr"),j("NNN",0,0,"eraAbbr"),j("NNNN",0,0,"eraName"),j("NNNNN",0,0,"eraNarrow"),j("y",["y",1],"yo","eraYear"),j("y",["yy",2],0,"eraYear"),j("y",["yyy",3],0,"eraYear"),j("y",["yyyy",4],0,"eraYear"),fe("N",ln),fe("NN",ln),fe("NNN",ln),fe("NNNN",(function(e,t){return t.erasNameRegex(e)})),fe("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ge(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?m(n).era=a:m(n).invalidEra=e})),fe("y",ue),fe("yy",ue),fe("yyy",ue),fe("yyyy",ue),fe("yo",(function(e,t){return t._eraYearOrdinalRegex||ue})),ge(["y","yy","yyy","yyyy"],0),ge(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),j(0,["gg",2],0,(function(){return this.weekYear()%100})),j(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),hn("gggg","weekYear"),hn("ggggg","weekYear"),hn("GGGG","isoWeekYear"),hn("GGGGG","isoWeekYear"),W("weekYear","gg"),W("isoWeekYear","GG"),U("weekYear",1),U("isoWeekYear",1),fe("G",le),fe("g",le),fe("GG",re,Z),fe("gg",re,Z),fe("GGGG",oe,te),fe("gggg",oe,te),fe("GGGGG",de,ne),fe("ggggg",de,ne),Me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=J(e)})),Me(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),j("Q",0,"Qo","quarter"),W("quarter","Q"),U("quarter",7),fe("Q",Q),ge("Q",(function(e,t){t[1]=3*(J(e)-1)})),j("D",["DD",2],"Do","date"),W("date","D"),U("date",9),fe("D",re),fe("DD",re,Z),fe("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ge(["D","DD"],2),ge("Do",(function(e,t){t[2]=J(e.match(re)[0])}));var mn=K("Date",!0);j("DDD",["DDDD",3],"DDDo","dayOfYear"),W("dayOfYear","DDD"),U("dayOfYear",4),fe("DDD",se),fe("DDDD",ee),ge(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=J(e)})),j("m",["mm",2],0,"minute"),W("minute","m"),U("minute",14),fe("m",re),fe("mm",re,Z),ge(["m","mm"],4);var pn=K("Minutes",!1);j("s",["ss",2],0,"second"),W("second","s"),U("second",15),fe("s",re),fe("ss",re,Z),ge(["s","ss"],5);var yn,gn,Mn=K("Seconds",!1);for(j("S",0,0,(function(){return~~(this.millisecond()/100)})),j(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),j(0,["SSS",3],0,"millisecond"),j(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),j(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),j(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),j(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),j(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),j(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),W("millisecond","ms"),U("millisecond",16),fe("S",se,Q),fe("SS",se,Z),fe("SSS",se,ee),yn="SSSS";yn.length<=9;yn+="S")fe(yn,ue);function vn(e,t){t[6]=J(1e3*("0."+e))}for(yn="S";yn.length<=9;yn+="S")ge(yn,vn);gn=K("Milliseconds",!1),j("z",0,0,"zoneAbbr"),j("zz",0,0,"zoneName");var Ln=L.prototype;function bn(e){return e}Ln.add=Jt,Ln.calendar=function(e,t){1===arguments.length&&(arguments[0]?Xt(arguments[0])?(e=arguments[0],t=void 0):$t(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Dt(),r=At(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",s=t&&(T(t[i])?t[i].call(this,n):t[i]);return this.format(s||this.localeData().calendar(i,this,Dt(n)))},Ln.clone=function(){return new L(this)},Ln.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=At(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=I(t)){case"year":i=Qt(this,r)/12;break;case"month":i=Qt(this,r);break;case"quarter":i=Qt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:V(i)},Ln.endOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?un:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=an-on(t+(this._isUTC?0:this.utcOffset()*rn),an)-1;break;case"minute":t=this._d.valueOf(),t+=rn-on(t,rn)-1;break;case"second":t=this._d.valueOf(),t+=nn-on(t,nn)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},Ln.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=A(this,e);return this.localeData().postformat(t)},Ln.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Dt(e).isValid())?zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.fromNow=function(e){return this.from(Dt(),e)},Ln.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Dt(e).isValid())?zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.toNow=function(e){return this.to(Dt(),e)},Ln.get=function(e){return T(this[e=I(e)])?this[e]():this},Ln.invalidAt=function(){return m(this).overflow},Ln.isAfter=function(e,t){var n=b(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Ln.isBefore=function(e,t){var n=b(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Ln.isBetween=function(e,t,n,r){var a=b(e)?e:Dt(e),i=b(t)?t:Dt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},Ln.isSame=function(e,t){var n,r=b(e)?e:Dt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Ln.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Ln.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Ln.isValid=function(){return p(this)},Ln.lang=en,Ln.locale=Zt,Ln.localeData=tn,Ln.max=Tt,Ln.min=St,Ln.parsingFlags=function(){return _({},m(this))},Ln.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:G[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e));for(n=0;n<r.length;n++)this[r[n].unit](e[r[n].unit])}else if(T(this[e=I(e)]))return this[e](t);return this},Ln.startOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?un:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=on(t+(this._isUTC?0:this.utcOffset()*rn),an);break;case"minute":t=this._d.valueOf(),t-=on(t,rn);break;case"second":t=this._d.valueOf(),t-=on(t,nn)}return this._d.setTime(t),a.updateOffset(this,!0),this},Ln.subtract=Kt,Ln.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Ln.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Ln.toDate=function(){return new Date(this.valueOf())},Ln.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?A(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",A(n,"Z")):A(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Ln.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Ln[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Ln.toJSON=function(){return this.isValid()?this.toISOString():null},Ln.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Ln.unix=function(){return Math.floor(this.valueOf()/1e3)},Ln.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Ln.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Ln.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},Ln.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},Ln.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},Ln.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},Ln.year=Fe,Ln.isLeapYear=function(){return B(this.year())},Ln.weekYear=function(e){return _n.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Ln.isoWeekYear=function(e){return _n.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Ln.quarter=Ln.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Ln.month=Ce,Ln.daysInMonth=function(){return be(this.year(),this.month())},Ln.week=Ln.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Ln.isoWeek=Ln.isoWeeks=function(e){var t=Ne(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Ln.weeksInYear=function(){var e=this.localeData()._week;return Re(this.year(),e.dow,e.doy)},Ln.weeksInWeekYear=function(){var e=this.localeData()._week;return Re(this.weekYear(),e.dow,e.doy)},Ln.isoWeeksInYear=function(){return Re(this.year(),1,4)},Ln.isoWeeksInISOWeekYear=function(){return Re(this.isoWeekYear(),1,4)},Ln.date=mn,Ln.day=Ln.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Ln.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Ln.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Ln.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Ln.hour=Ln.hours=Qe,Ln.minute=Ln.minutes=pn,Ln.second=Ln.seconds=Mn,Ln.millisecond=Ln.milliseconds=gn,Ln.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=jt(he,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Nt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?Vt(this,zt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Nt(this)},Ln.utc=function(e){return this.utcOffset(0,e)},Ln.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Nt(this),"m")),this},Ln.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=jt(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Ln.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Ln.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Ln.isLocal=function(){return!!this.isValid()&&!this._isUTC},Ln.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Ln.isUtc=Rt,Ln.isUTC=Rt,Ln.zoneAbbr=function(){return this._isUTC?"UTC":""},Ln.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Ln.dates=Y("dates accessor is deprecated. Use date instead.",mn),Ln.months=Y("months accessor is deprecated. Use month instead",Ce),Ln.years=Y("years accessor is deprecated. Use year instead",Fe),Ln.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Ln.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!u(this._isDSTShifted))return this._isDSTShifted;var e,t={};return v(t,this),(t=Yt(t))._a?(e=t._isUTC?f(t._a):Dt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&J(e[r])!==J(t[r]))&&s++;return s+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var kn=C.prototype;function Yn(e,t,n,r){var a=dt(),i=f().set(r,t);return a[n](i,e)}function wn(e,t,n){if(l(e)&&(t=e,e=void 0),e=e||"",null!=t)return Yn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Yn(e,r,n,"month");return a}function Dn(e,t,n,r){"boolean"==typeof e?(l(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,l(t)&&(n=t,t=void 0),t=t||"");var a,i=dt(),s=e?i._week.dow:0,o=[];if(null!=n)return Yn(t,(n+s)%7,r,"day");for(a=0;a<7;a++)o[a]=Yn(t,(a+s)%7,r,"day");return o}kn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return T(r)?r.call(t,n):r},kn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(H).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},kn.invalidDate=function(){return this._invalidDate},kn.ordinal=function(e){return this._ordinal.replace("%d",e)},kn.preparse=bn,kn.postformat=bn,kn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return T(a)?a(e,t,n,r):a.replace(/%d/i,e)},kn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(t):n.replace(/%s/i,t)},kn.set=function(e){var t,n;for(n in e)o(e,n)&&(T(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},kn.eras=function(e,t){var n,r,i,s=this._eras||dt("en")._eras;for(n=0,r=s.length;n<r;++n){switch(typeof s[n].since){case"string":i=a(s[n].since).startOf("day"),s[n].since=i.valueOf()}switch(typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":i=a(s[n].until).startOf("day").valueOf(),s[n].until=i.valueOf()}}return s},kn.erasParse=function(e,t,n){var r,a,i,s,o,d=this.eras();for(e=e.toUpperCase(),r=0,a=d.length;r<a;++r)if(i=d[r].name.toUpperCase(),s=d[r].abbr.toUpperCase(),o=d[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return d[r];break;case"NNNN":if(i===e)return d[r];break;case"NNNNN":if(o===e)return d[r]}else if([i,s,o].indexOf(e)>=0)return d[r]},kn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},kn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||cn.call(this),e?this._erasAbbrRegex:this._erasRegex},kn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||cn.call(this),e?this._erasNameRegex:this._erasRegex},kn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||cn.call(this),e?this._erasNarrowRegex:this._erasRegex},kn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||we).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},kn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[we.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},kn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return Te.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=f([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},kn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=Se),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},kn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=De),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},kn.week=function(e){return Ne(e,this._week.dow,this._week.doy).week},kn.firstDayOfYear=function(){return this._week.doy},kn.firstDayOfWeek=function(){return this._week.dow},kn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?We(n,this._week.dow):e?n[e.day()]:n},kn.weekdaysMin=function(e){return!0===e?We(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},kn.weekdaysShort=function(e){return!0===e?We(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},kn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Je.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=f([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},kn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ke.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Ue),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},kn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ke.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Be),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},kn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ke.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ve),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},kn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},kn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},st("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===J(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=Y("moment.lang is deprecated. Use moment.locale instead.",st),a.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",dt);var Sn=Math.abs;function Tn(e,t,n,r){var a=zt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function xn(e){return e<0?Math.floor(e):Math.ceil(e)}function Cn(e){return 4800*e/146097}function Pn(e){return 146097*e/4800}function Hn(e){return function(){return this.as(e)}}var Fn=Hn("ms"),On=Hn("s"),En=Hn("m"),jn=Hn("h"),An=Hn("d"),Nn=Hn("w"),Rn=Hn("M"),Wn=Hn("Q"),In=Hn("y");function zn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Gn=zn("milliseconds"),Un=zn("seconds"),Bn=zn("minutes"),Vn=zn("hours"),Jn=zn("days"),Kn=zn("months"),qn=zn("years");var Xn=Math.round,$n={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Qn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Zn=Math.abs;function er(e){return(e>0)-(e<0)||+e}function tr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,s,o,d=Zn(this._milliseconds)/1e3,u=Zn(this._days),l=Zn(this._months),c=this.asSeconds();return c?(e=V(d/60),t=V(e/60),d%=60,e%=60,n=V(l/12),l%=12,r=d?d.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=er(this._months)!==er(c)?"-":"",s=er(this._days)!==er(c)?"-":"",o=er(this._milliseconds)!==er(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(l?i+l+"M":"")+(u?s+u+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+r+"S":"")):"P0D"}var nr=Pt.prototype;return nr.isValid=function(){return this._isValid},nr.abs=function(){var e=this._data;return this._milliseconds=Sn(this._milliseconds),this._days=Sn(this._days),this._months=Sn(this._months),e.milliseconds=Sn(e.milliseconds),e.seconds=Sn(e.seconds),e.minutes=Sn(e.minutes),e.hours=Sn(e.hours),e.months=Sn(e.months),e.years=Sn(e.years),this},nr.add=function(e,t){return Tn(this,e,t,1)},nr.subtract=function(e,t){return Tn(this,e,t,-1)},nr.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=I(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Cn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Pn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},nr.asMilliseconds=Fn,nr.asSeconds=On,nr.asMinutes=En,nr.asHours=jn,nr.asDays=An,nr.asWeeks=Nn,nr.asMonths=Rn,nr.asQuarters=Wn,nr.asYears=In,nr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*J(this._months/12):NaN},nr._bubble=function(){var e,t,n,r,a,i=this._milliseconds,s=this._days,o=this._months,d=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*xn(Pn(o)+s),s=0,o=0),d.milliseconds=i%1e3,e=V(i/1e3),d.seconds=e%60,t=V(e/60),d.minutes=t%60,n=V(t/60),d.hours=n%24,s+=V(n/24),o+=a=V(Cn(s)),s-=xn(Pn(a)),r=V(o/12),o%=12,d.days=s,d.months=o,d.years=r,this},nr.clone=function(){return zt(this)},nr.get=function(e){return e=I(e),this.isValid()?this[e+"s"]():NaN},nr.milliseconds=Gn,nr.seconds=Un,nr.minutes=Bn,nr.hours=Vn,nr.days=Jn,nr.weeks=function(){return V(this.days()/7)},nr.months=Kn,nr.years=qn,nr.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=$n;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},$n,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),r=function(e,t,n,r){var a=zt(e).abs(),i=Xn(a.as("s")),s=Xn(a.as("m")),o=Xn(a.as("h")),d=Xn(a.as("d")),u=Xn(a.as("M")),l=Xn(a.as("w")),c=Xn(a.as("y")),h=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(h=h||l<=1&&["w"]||l<n.w&&["ww",l]),(h=h||u<=1&&["M"]||u<n.M&&["MM",u]||c<=1&&["y"]||["yy",c])[2]=t,h[3]=+e>0,h[4]=r,Qn.apply(null,h)}(this,!a,i,n=this.localeData()),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},nr.toISOString=tr,nr.toString=tr,nr.toJSON=tr,nr.locale=Zt,nr.localeData=tn,nr.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",tr),nr.lang=en,j("X",0,0,"unix"),j("x",0,0,"valueOf"),fe("x",le),fe("X",/[+-]?\d+(\.\d{1,3})?/),ge("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ge("x",(function(e,t,n){n._d=new Date(J(e))})),a.version="2.29.1",t=Dt,a.fn=Ln,a.min=function(){return xt("isBefore",[].slice.call(arguments,0))},a.max=function(){return xt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=f,a.unix=function(e){return Dt(1e3*e)},a.months=function(e,t){return wn(e,t,"months")},a.isDate=c,a.locale=st,a.invalid=y,a.duration=zt,a.isMoment=b,a.weekdays=function(e,t,n){return Dn(e,t,n,"weekdays")},a.parseZone=function(){return Dt.apply(null,arguments).parseZone()},a.localeData=dt,a.isDuration=Ht,a.monthsShort=function(e,t){return wn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Dn(e,t,n,"weekdaysMin")},a.defineLocale=ot,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(x(tt[e]._config,t)):(null!=(r=it(e))&&(a=r._config),t=x(a,t),null==r&&(t.abbr=e),(n=new C(t)).parentLocale=tt[e],tt[e]=n),st(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===st()&&st(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return w(tt)},a.weekdaysShort=function(e,t,n){return Dn(e,t,n,"weekdaysShort")},a.normalizeUnits=I,a.relativeTimeRounding=function(e){return void 0===e?Xn:"function"==typeof e&&(Xn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==$n[e]&&(void 0===t?$n[e]:($n[e]=t,"s"===e&&($n.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=Ln,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},7824:e=>{var t=1e3,n=60*t,r=60*n,a=24*r;function i(e,t,n,r){var a=t>=1.5*n;return Math.round(e/n)+" "+r+(a?"s":"")}e.exports=function(e,s){s=s||{};var o,d,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var s=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*a;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===u&&isFinite(e))return s.long?(o=e,(d=Math.abs(o))>=a?i(o,d,a,"day"):d>=r?i(o,d,r,"hour"):d>=n?i(o,d,n,"minute"):d>=t?i(o,d,t,"second"):o+" ms"):function(e){var i=Math.abs(e);return i>=a?Math.round(e/a)+"d":i>=r?Math.round(e/r)+"h":i>=n?Math.round(e/n)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},1830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,a=n.length;r<a;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},4187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,a,i=e,s=e.indexOf("["),o=e.indexOf("]");-1!=s&&-1!=o&&(e=e.substring(0,s)+e.substring(s,o).replace(/:/g,";")+e.substring(o,e.length));for(var d,u,l=t.exec(e||""),c={},h=14;h--;)c[n[h]]=l[h]||"";return-1!=s&&-1!=o&&(c.source=i,c.host=c.host.substring(1,c.host.length-1).replace(/;/g,":"),c.authority=c.authority.replace("[","").replace("]","").replace(/;/g,":"),c.ipv6uri=!0),c.pathNames=(r=c.path,a=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||a.splice(0,1),"/"==r.substr(r.length-1,1)&&a.splice(a.length-1,1),a),c.queryKey=(d=c.query,u={},d.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),c}},111:(e,t,n)=>{"use strict";t.__esModule=!0,t.didNotFindHydratableTextInstance=t.didNotFindHydratableInstance=t.didNotFindHydratableContainerTextInstance=t.didNotFindHydratableContainerInstance=t.didNotHydrateInstance=t.didNotHydrateContainerInstance=t.didNotMatchHydratedTextInstance=t.didNotMatchHydratedContainerTextInstance=t.hydrateTextInstance=t.hydrateInstance=t.getFirstHydratableChild=t.getNextHydratableSibling=t.canHydrateTextInstance=t.canHydrateInstance=t.supportsHydration=void 0;var r,a=(r=n(7441))&&r.__esModule?r:{default:r};function i(){(0,a.default)(!1,"The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.")}t.supportsHydration=!1,t.canHydrateInstance=i,t.canHydrateTextInstance=i,t.getNextHydratableSibling=i,t.getFirstHydratableChild=i,t.hydrateInstance=i,t.hydrateTextInstance=i,t.didNotMatchHydratedContainerTextInstance=i,t.didNotMatchHydratedTextInstance=i,t.didNotHydrateContainerInstance=i,t.didNotHydrateInstance=i,t.didNotFindHydratableContainerInstance=i,t.didNotFindHydratableContainerTextInstance=i,t.didNotFindHydratableInstance=i,t.didNotFindHydratableTextInstance=i},7559:(e,t,n)=>{"use strict";t.__esModule=!0,t.createHiddenTextInstance=t.cloneUnhiddenInstance=t.cloneHiddenInstance=t.replaceContainerChildren=t.finalizeContainerChildren=t.appendChildToContainerChildSet=t.createContainerChildSet=t.cloneInstance=t.supportsPersistence=void 0;var r,a=(r=n(7441))&&r.__esModule?r:{default:r};function i(){(0,a.default)(!1,"The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.")}t.supportsPersistence=!1,t.cloneInstance=i,t.createContainerChildSet=i,t.appendChildToContainerChildSet=i,t.finalizeContainerChildren=i,t.replaceContainerChildren=i,t.cloneHiddenInstance=i,t.cloneUnhiddenInstance=i,t.createHiddenTextInstance=i},8994:(e,t)=>{"use strict";t.__esModule=!0,t.getClosestInstanceFromNode=function(e){if(e[n])return e[n];for(;!e[n];){if(!e.parentNode)return null;e=e.parentNode}var t=e[n];return 5===t.tag||6===t.tag?t:null};var n="__reactInternalInstance$"+Math.random().toString(36).slice(2)},3286:(e,t,n)=>{"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(7201);n(185),e.exports=r({},a)},7201:(e,t,n)=>{"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=n(7294),o=n(7185),d=n(6525),u=n(8994),l=n(3632),c=n(7738),h=c.applyNodeProps,_=c.toggleStrictMode,f=function(e){function t(){return a(this,t),i(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){o.isBrowser&&(this._stage=new o.Stage({width:this.props.width,height:this.props.height,container:this._tagRef}),this._setRef(this._stage),h(this._stage,this.props),this._mountNode=p.createContainer(this._stage),p.updateContainer(this.props.children,this._mountNode,this))},t.prototype._setRef=function(e){var t=this.props.forwardedRef;t&&("function"==typeof t?t(e):t.current=e)},t.prototype.componentDidUpdate=function(e){o.isBrowser&&(this._setRef(this._stage),h(this._stage,this.props,e),p.updateContainer(this.props.children,this._mountNode,this))},t.prototype.componentWillUnmount=function(){o.isBrowser&&(this._setRef(null),p.updateContainer(null,this._mountNode,this),this._stage.destroy())},t.prototype.getStage=function(){return this._stage},t.prototype.render=function(){var e=this,t=this.props;return s.createElement("div",{ref:function(t){return e._tagRef=t},accessKey:t.accessKey,className:t.className,role:t.role,style:t.style,tabIndex:t.tabIndex,title:t.title})},t}(s.Component),m={};["Layer","FastLayer","Group","Label","Rect","Circle","Ellipse","Wedge","Line","Sprite","Image","Text","TextPath","Star","Ring","Arc","Tag","Path","RegularPolygon","Arrow","Shape","Transformer"].forEach((function(e){m[e]=e}));var p=d(l);p.injectIntoDevTools({findFiberByHostInstance:u.getClosestInstanceFromNode,bundleType:0,version:s.version,rendererPackageName:"react-konva",getInspectorDataForViewTag:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];console.log(t)}});var y=s.forwardRef((function(e,t){return s.createElement(f,r({},e,{forwardedRef:t}))}));e.exports=r({},m,{__matchRectVersion:!0,Stage:y,useStrictMode:_})},3632:(e,t,n)=>{"use strict";t.__esModule=!0,t.supportsMutation=t.isPrimaryRenderer=t.cancelPassiveEffects=t.schedulePassiveEffects=t.noTimeout=t.cancelTimeout=t.scheduleTimeout=t.cancelDeferredCallback=t.shouldYield=t.scheduleDeferredCallback=t.now=void 0;var r=n(7559);Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}));var a=n(111);Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})}));var i=n(3840);Object.defineProperty(t,"now",{enumerable:!0,get:function(){return i.unstable_now}}),Object.defineProperty(t,"scheduleDeferredCallback",{enumerable:!0,get:function(){return i.unstable_scheduleCallback}}),Object.defineProperty(t,"shouldYield",{enumerable:!0,get:function(){return i.unstable_shouldYield}}),Object.defineProperty(t,"cancelDeferredCallback",{enumerable:!0,get:function(){return i.unstable_cancelCallback}}),t.appendInitialChild=function(e,t){"string"!=typeof t?(e.add(t),(0,o.updatePicture)(e)):(0,d.default)(!1,'Don not use plain text as child of Konva.Node. You are using text: "%s"',t)},t.createInstance=function(e,t,n){var r=s.default[e];if(r){var a={},i={};for(var u in t)"on"===u.slice(0,2)?i[u]=t[u]:a[u]=t[u];var l=new r(a);return(0,o.applyNodeProps)(l,i),l}(0,d.default)(l,'Konva has no node with the type "%s". If you use minimal version of react-konva, just import required nodes into Konva: `import "konva/lib/shapes/%s"`  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html',e,e)},t.createTextInstance=function(e,t,n){(0,d.default)(!1,'Text components are not supported for now in ReactKonva. You text is: "'+e+'"')},t.finalizeInitialChildren=function(e,t,n){return!1},t.getPublicInstance=function(e){return e},t.prepareForCommit=function(){return null},t.prepareUpdate=function(e,t,n,r){return c},t.resetAfterCommit=function(){},t.resetTextContent=function(e){},t.shouldDeprioritizeSubtree=function(e,t){return!1},t.getRootHostContext=function(){return l},t.getChildHostContext=function(){return l},t.shouldSetTextContent=function(e,t){return!1},t.appendChild=function(e,t){t.parent===e?t.moveToTop():e.add(t),(0,o.updatePicture)(e)},t.appendChildToContainer=function(e,t){t.parent===e?t.moveToTop():e.add(t),(0,o.updatePicture)(e)},t.insertBefore=h,t.insertInContainerBefore=function(e,t,n){h(e,t,n)},t.removeChild=function(e,t){t.destroy(),t.off(o.EVENTS_NAMESPACE),(0,o.updatePicture)(e)},t.removeChildFromContainer=function(e,t){t.destroy(),t.off(o.EVENTS_NAMESPACE),(0,o.updatePicture)(e)},t.commitTextUpdate=function(e,t,n){(0,d.default)(!1,'Text components are not yet supported in ReactKonva. You text is: "'+n+'"')},t.commitMount=function(e,t,n){},t.commitUpdate=function(e,t,n,r,a){(0,o.applyNodeProps)(e,a,r)},t.hideInstance=function(e){e.hide(),(0,o.updatePicture)(e)},t.hideTextInstance=function(e){},t.unhideInstance=function(e,t){(null==t.visible||t.visible)&&e.show()},t.unhideTextInstance=function(e,t){},t.clearContainer=function(e){};var s=u(n(7185)),o=n(7738),d=u(n(7441));function u(e){return e&&e.__esModule?e:{default:e}}var l={},c={};function h(e,t,n){(0,d.default)(t!==n,"ReactKonva: Can not insert node before itself"),t._remove(),e.add(t),t.setZIndex(n.getZIndex()),(0,o.updatePicture)(e)}s.default.Node.prototype._applyProps=o.applyNodeProps,t.scheduleTimeout=setTimeout,t.cancelTimeout=clearTimeout,t.noTimeout=-1,t.schedulePassiveEffects=i.unstable_scheduleCallback,t.cancelPassiveEffects=i.unstable_cancelCallback,t.isPrimaryRenderer=!1,t.supportsMutation=!0},7441:e=>{"use strict";var t=function(e){if(void 0===e)throw new Error("invariant(...): Second argument must be a string.")};e.exports=function(e,n){for(var r=arguments.length,a=new Array(r>2?r-2:0),i=2;i<r;i++)a[i-2]=arguments[i];if(t(n),!e){var s;if(void 0===n)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var o=0;(s=new Error(n.replace(/%s/g,(function(){return String(a[o++])})))).name="Invariant Violation"}throw s.framesToPop=1,s}}},7738:(e,t)=>{"use strict";t.__esModule=!0,t.toggleStrictMode=function(e){s=e},t.applyNodeProps=function(e,t){var c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;if(t===c&&console.error("same props"),!r&&"zIndex"in t&&(console.warn(d),r=!0),!a&&t.draggable){var h=void 0!==t.x||void 0!==t.y,_=t.onDragEnd||t.onDragMove;h&&!_&&(console.warn(o),a=!0)}for(var f in c)if(!n[f]){var m="on"===f.slice(0,2),p=c[f]!==t[f];m&&p&&("content"===(k=f.substr(2).toLowerCase()).substr(0,7)&&(k="content"+k.substr(7,1).toUpperCase()+k.substr(8)),e.off(k,c[f]));var y=!t.hasOwnProperty(f);y&&e.setAttr(f,void 0)}var g=s||t._useStrictMode,M={},v=!1,L={};for(var f in t)if(!n[f]){m="on"===f.slice(0,2);var b=c[f]!==t[f];m&&b&&("content"===(k=f.substr(2).toLowerCase()).substr(0,7)&&(k="content"+k.substr(7,1).toUpperCase()+k.substr(8)),t[f]&&(L[k]=t[f])),!m&&(t[f]!==c[f]||g&&t[f]!==e.getAttr(f))&&(v=!0,M[f]=t[f])}for(var k in v&&(e.setAttrs(M),l(e)),L)e.on(k+i,L[k])},t.updatePicture=l;var n={children:!0,ref:!0,key:!0,style:!0,forwardedRef:!0,unstable_applyCache:!0,unstable_applyDrawHitFromCache:!0},r=!1,a=!1,i=t.EVENTS_NAMESPACE=".react-konva-event",s=!1,o="ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n",d='ReactKonva: You are using "zIndex" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n',u={};function l(e){var t=e.getLayer()||e.getStage();t&&t.batchDraw()}},7287:(e,t,n)=>{(e=n.nmd(e)).exports=function(t){var r={},a=n(7418),i=n(7294),s=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,u=60103,l=60106,c=60107,h=60108,_=60114,f=60109,m=60110,p=60112,y=60113,g=60120,M=60115,v=60116,L=60121,b=60129,k=60130,Y=60131;if("function"==typeof Symbol&&Symbol.for){var w=Symbol.for;u=w("react.element"),l=w("react.portal"),c=w("react.fragment"),h=w("react.strict_mode"),_=w("react.profiler"),f=w("react.provider"),m=w("react.context"),p=w("react.forward_ref"),y=w("react.suspense"),g=w("react.suspense_list"),M=w("react.memo"),v=w("react.lazy"),L=w("react.block"),w("react.scope"),b=w("react.debug_trace_mode"),k=w("react.offscreen"),Y=w("react.legacy_hidden")}var D="function"==typeof Symbol&&Symbol.iterator;function S(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}function T(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case c:return"Fragment";case l:return"Portal";case _:return"Profiler";case h:return"StrictMode";case y:return"Suspense";case g:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case m:return(e.displayName||"Context")+".Consumer";case f:return(e._context.displayName||"Context")+".Provider";case p:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return T(e.type);case L:return T(e._render);case v:t=e._payload,e=e._init;try{return T(e(t))}catch(e){}}return null}function x(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function C(e){if(x(e)!==e)throw Error(o(188))}function P(e){var t=e.alternate;if(!t){if(null===(t=x(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return C(a),e;if(i===r)return C(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var s=!1,d=a.child;d;){if(d===n){s=!0,n=a,r=i;break}if(d===r){s=!0,r=a,n=i;break}d=d.sibling}if(!s){for(d=i.child;d;){if(d===n){s=!0,n=i,r=a;break}if(d===r){s=!0,r=i,n=a;break}d=d.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}function H(e){if(!(e=P(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function F(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var O,E=t.getPublicInstance,j=t.getRootHostContext,A=t.getChildHostContext,N=t.prepareForCommit,R=t.resetAfterCommit,W=t.createInstance,I=t.appendInitialChild,z=t.finalizeInitialChildren,G=t.prepareUpdate,U=t.shouldSetTextContent,B=t.createTextInstance,V=t.scheduleTimeout,J=t.cancelTimeout,K=t.noTimeout,q=t.isPrimaryRenderer,X=t.supportsMutation,$=t.supportsPersistence,Q=t.supportsHydration,Z=t.getInstanceFromNode,ee=t.makeOpaqueHydratingObject,te=t.makeClientId,ne=t.beforeActiveInstanceBlur,re=t.afterActiveInstanceBlur,ae=t.preparePortalMount,ie=t.supportsTestSelectors,se=t.findFiberRoot,oe=t.getBoundingRect,de=t.getTextContent,ue=t.isHiddenSubtree,le=t.matchAccessibilityRole,ce=t.setFocusIfFocusable,he=t.setupIntersectionObserver,_e=t.appendChild,fe=t.appendChildToContainer,me=t.commitTextUpdate,pe=t.commitMount,ye=t.commitUpdate,ge=t.insertBefore,Me=t.insertInContainerBefore,ve=t.removeChild,Le=t.removeChildFromContainer,be=t.resetTextContent,ke=t.hideInstance,Ye=t.hideTextInstance,we=t.unhideInstance,De=t.unhideTextInstance,Se=t.clearContainer,Te=t.cloneInstance,xe=t.createContainerChildSet,Ce=t.appendChildToContainerChildSet,Pe=t.finalizeContainerChildren,He=t.replaceContainerChildren,Fe=t.cloneHiddenInstance,Oe=t.cloneHiddenTextInstance,Ee=t.canHydrateInstance,je=t.canHydrateTextInstance,Ae=t.isSuspenseInstancePending,Ne=t.isSuspenseInstanceFallback,Re=t.getNextHydratableSibling,We=t.getFirstHydratableChild,Ie=t.hydrateInstance,ze=t.hydrateTextInstance,Ge=t.getNextHydratableInstanceAfterSuspenseInstance,Ue=t.commitHydratedContainer,Be=t.commitHydratedSuspenseInstance;function Ve(e){if(void 0===O)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);O=t&&t[1]||""}return"\n"+O+e}var Je=!1;function Ke(e,t){if(!e||Je)return"";Je=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),i=r.stack.split("\n"),s=a.length-1,o=i.length-1;1<=s&&0<=o&&a[s]!==i[o];)o--;for(;1<=s&&0<=o;s--,o--)if(a[s]!==i[o]){if(1!==s||1!==o)do{if(s--,0>--o||a[s]!==i[o])return"\n"+a[s].replace(" at new "," at ")}while(1<=s&&0<=o);break}}}finally{Je=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Ve(e):""}var qe=[],Xe=-1;function $e(e){return{current:e}}function Qe(e){0>Xe||(e.current=qe[Xe],qe[Xe]=null,Xe--)}function Ze(e,t){Xe++,qe[Xe]=e.current,e.current=t}var et={},tt=$e(et),nt=$e(!1),rt=et;function at(e,t){var n=e.type.contextTypes;if(!n)return et;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function it(e){return null!=e.childContextTypes}function st(){Qe(nt),Qe(tt)}function ot(e,t,n){if(tt.current!==et)throw Error(o(168));Ze(tt,t),Ze(nt,n)}function dt(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,T(t)||"Unknown",i));return a({},n,r)}function ut(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||et,rt=tt.current,Ze(tt,e),Ze(nt,nt.current),!0}function lt(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=dt(e,t,rt),r.__reactInternalMemoizedMergedChildContext=e,Qe(nt),Qe(tt),Ze(tt,e)):Qe(nt),Ze(nt,n)}var ct=null,ht=null;(0,s.unstable_now)();var _t=0,ft=8;function mt(e){if(0!=(1&e))return ft=15,1;if(0!=(2&e))return ft=14,2;if(0!=(4&e))return ft=13,4;var t=24&e;return 0!==t?(ft=12,t):0!=(32&e)?(ft=11,32):0!=(t=192&e)?(ft=10,t):0!=(256&e)?(ft=9,256):0!=(t=3584&e)?(ft=8,t):0!=(4096&e)?(ft=7,4096):0!=(t=4186112&e)?(ft=6,t):0!=(t=62914560&e)?(ft=5,t):67108864&e?(ft=4,67108864):0!=(134217728&e)?(ft=3,134217728):0!=(t=805306368&e)?(ft=2,t):0!=(1073741824&e)?(ft=1,1073741824):(ft=8,e)}function pt(e,t){var n=e.pendingLanes;if(0===n)return ft=0;var r=0,a=0,i=e.expiredLanes,s=e.suspendedLanes,o=e.pingedLanes;if(0!==i)r=i,a=ft=15;else if(0!=(i=134217727&n)){var d=i&~s;0!==d?(r=mt(d),a=ft):0!=(o&=i)&&(r=mt(o),a=ft)}else 0!=(i=n&~s)?(r=mt(i),a=ft):0!==o&&(r=mt(o),a=ft);if(0===r)return 0;if(r=n&((0>(r=31-bt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&s)){if(mt(t),a<=ft)return t;ft=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-bt(t)),r|=e[n],t&=~a;return r}function yt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Mt(24&~t))?gt(10,t):e;case 10:return 0===(e=Mt(192&~t))?gt(8,t):e;case 8:return 0===(e=Mt(3584&~t))&&0===(e=Mt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Mt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function Mt(e){return e&-e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Lt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-bt(t)]=n}var bt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(kt(e)/Yt|0)|0},kt=Math.log,Yt=Math.LN2,wt=s.unstable_runWithPriority,Dt=s.unstable_scheduleCallback,St=s.unstable_cancelCallback,Tt=s.unstable_shouldYield,xt=s.unstable_requestPaint,Ct=s.unstable_now,Pt=s.unstable_getCurrentPriorityLevel,Ht=s.unstable_ImmediatePriority,Ft=s.unstable_UserBlockingPriority,Ot=s.unstable_NormalPriority,Et=s.unstable_LowPriority,jt=s.unstable_IdlePriority,At={},Nt=void 0!==xt?xt:function(){},Rt=null,Wt=null,It=!1,zt=Ct(),Gt=1e4>zt?Ct:function(){return Ct()-zt};function Ut(){switch(Pt()){case Ht:return 99;case Ft:return 98;case Ot:return 97;case Et:return 96;case jt:return 95;default:throw Error(o(332))}}function Bt(e){switch(e){case 99:return Ht;case 98:return Ft;case 97:return Ot;case 96:return Et;case 95:return jt;default:throw Error(o(332))}}function Vt(e,t){return e=Bt(e),wt(e,t)}function Jt(e,t,n){return e=Bt(e),Dt(e,t,n)}function Kt(){if(null!==Wt){var e=Wt;Wt=null,St(e)}qt()}function qt(){if(!It&&null!==Rt){It=!0;var e=0;try{var t=Rt;Vt(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Rt=null}catch(t){throw null!==Rt&&(Rt=Rt.slice(e+1)),Dt(Ht,Kt),t}finally{It=!1}}}var Xt=d.ReactCurrentBatchConfig,$t="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Qt=Object.prototype.hasOwnProperty;function Zt(e,t){if($t(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Qt.call(t,n[r])||!$t(e[n[r]],t[n[r]]))return!1;return!0}function en(e){switch(e.tag){case 5:return Ve(e.type);case 16:return Ve("Lazy");case 13:return Ve("Suspense");case 19:return Ve("SuspenseList");case 0:case 2:case 15:return Ke(e.type,!1);case 11:return Ke(e.type.render,!1);case 22:return Ke(e.type._render,!1);case 1:return Ke(e.type,!0);default:return""}}function tn(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var nn=$e(null),rn=null,an=null,sn=null;function on(){sn=an=rn=null}function dn(e,t){e=e.type._context,q?(Ze(nn,e._currentValue),e._currentValue=t):(Ze(nn,e._currentValue2),e._currentValue2=t)}function un(e){var t=nn.current;Qe(nn),e=e.type._context,q?e._currentValue=t:e._currentValue2=t}function ln(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function cn(e,t){rn=e,sn=an=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(zr=!0),e.firstContext=null)}function hn(e,t){if(sn!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(sn=e,t=1073741823),t={context:e,observedBits:t,next:null},null===an){if(null===rn)throw Error(o(308));an=t,rn.dependencies={lanes:0,firstContext:t,responders:null}}else an=an.next=t;return q?e._currentValue:e._currentValue2}var _n=!1;function fn(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function mn(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function pn(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function yn(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function gn(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=s:i=i.next=s,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Mn(e,t,n,r){var i=e.updateQueue;_n=!1;var s=i.firstBaseUpdate,o=i.lastBaseUpdate,d=i.shared.pending;if(null!==d){i.shared.pending=null;var u=d,l=u.next;u.next=null,null===o?s=l:o.next=l,o=u;var c=e.alternate;if(null!==c){var h=(c=c.updateQueue).lastBaseUpdate;h!==o&&(null===h?c.firstBaseUpdate=l:h.next=l,c.lastBaseUpdate=u)}}if(null!==s){for(h=i.baseState,o=0,c=l=u=null;;){d=s.lane;var _=s.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:_,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var f=e,m=s;switch(d=t,_=n,m.tag){case 1:if("function"==typeof(f=m.payload)){h=f.call(_,h,d);break e}h=f;break e;case 3:f.flags=-4097&f.flags|64;case 0:if(null==(d="function"==typeof(f=m.payload)?f.call(_,h,d):f))break e;h=a({},h,d);break e;case 2:_n=!0}}null!==s.callback&&(e.flags|=32,null===(d=i.effects)?i.effects=[s]:d.push(s))}else _={eventTime:_,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(l=c=_,u=h):c=c.next=_,o|=d;if(null===(s=s.next)){if(null===(d=i.shared.pending))break;s=d.next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}null===c&&(u=h),i.baseState=u,i.firstBaseUpdate=l,i.lastBaseUpdate=c,ui|=o,e.lanes=o,e.memoizedState=h}}function vn(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Ln=(new i.Component).refs;function bn(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var kn={isMounted:function(e){return!!(e=e._reactInternals)&&x(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Oi(),a=Ei(e),i=pn(r,a);i.payload=t,null!=n&&(i.callback=n),yn(e,i),ji(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Oi(),a=Ei(e),i=pn(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),yn(e,i),ji(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Oi(),r=Ei(e),a=pn(n,r);a.tag=2,null!=t&&(a.callback=t),yn(e,a),ji(e,r,n)}};function Yn(e,t,n,r,a,i,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,s):!(t.prototype&&t.prototype.isPureReactComponent&&Zt(n,r)&&Zt(a,i))}function wn(e,t,n){var r=!1,a=et,i=t.contextType;return"object"==typeof i&&null!==i?i=hn(i):(a=it(t)?rt:tt.current,i=(r=null!=(r=t.contextTypes))?at(e,a):et),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=kn,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function Dn(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&kn.enqueueReplaceState(t,t.state,null)}function Sn(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Ln,fn(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=hn(i):(i=it(t)?rt:tt.current,a.context=at(e,i)),Mn(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(bn(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&kn.enqueueReplaceState(a,a.state,null),Mn(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var Tn=Array.isArray;function xn(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===Ln&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Cn(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Pn(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ls(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function d(e,t,n,r){return null===t||6!==t.tag?((t=ws(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function h(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=xn(e,t,n),r.return=e,r):((r=bs(n.type,n.key,n.props,null,e.mode,r)).ref=xn(e,t,n),r.return=e,r)}function _(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ds(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=ks(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function m(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return(n=bs(t.type,t.key,t.props,null,e.mode,n)).ref=xn(e,null,t),n.return=e,n;case l:return(t=Ds(t,e.mode,n)).return=e,t}if(Tn(t)||S(t))return(t=ks(t,e.mode,n,null)).return=e,t;Cn(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:d(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===a?n.type===c?f(e,t,n.props.children,r,a):h(e,t,n,r):null;case l:return n.key===a?_(e,t,n,r):null}if(Tn(n)||S(n))return null!==a?null:f(e,t,n,r,null);Cn(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return d(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return e=e.get(null===r.key?n:r.key)||null,r.type===c?f(t,e,r.props.children,a,r.key):h(t,e,r,a);case l:return _(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Tn(r)||S(r))return f(t,e=e.get(n)||null,r,a,null);Cn(t,r)}return null}function g(a,s,o,d){for(var u=null,l=null,c=s,h=s=0,_=null;null!==c&&h<o.length;h++){c.index>h?(_=c,c=null):_=c.sibling;var f=p(a,c,o[h],d);if(null===f){null===c&&(c=_);break}e&&c&&null===f.alternate&&t(a,c),s=i(f,s,h),null===l?u=f:l.sibling=f,l=f,c=_}if(h===o.length)return n(a,c),u;if(null===c){for(;h<o.length;h++)null!==(c=m(a,o[h],d))&&(s=i(c,s,h),null===l?u=c:l.sibling=c,l=c);return u}for(c=r(a,c);h<o.length;h++)null!==(_=y(c,a,h,o[h],d))&&(e&&null!==_.alternate&&c.delete(null===_.key?h:_.key),s=i(_,s,h),null===l?u=_:l.sibling=_,l=_);return e&&c.forEach((function(e){return t(a,e)})),u}function M(a,s,d,u){var l=S(d);if("function"!=typeof l)throw Error(o(150));if(null==(d=l.call(d)))throw Error(o(151));for(var c=l=null,h=s,_=s=0,f=null,g=d.next();null!==h&&!g.done;_++,g=d.next()){h.index>_?(f=h,h=null):f=h.sibling;var M=p(a,h,g.value,u);if(null===M){null===h&&(h=f);break}e&&h&&null===M.alternate&&t(a,h),s=i(M,s,_),null===c?l=M:c.sibling=M,c=M,h=f}if(g.done)return n(a,h),l;if(null===h){for(;!g.done;_++,g=d.next())null!==(g=m(a,g.value,u))&&(s=i(g,s,_),null===c?l=g:c.sibling=g,c=g);return l}for(h=r(a,h);!g.done;_++,g=d.next())null!==(g=y(h,a,_,g.value,u))&&(e&&null!==g.alternate&&h.delete(null===g.key?_:g.key),s=i(g,s,_),null===c?l=g:c.sibling=g,c=g);return e&&h.forEach((function(e){return t(a,e)})),l}return function(e,r,i,d){var h="object"==typeof i&&null!==i&&i.type===c&&null===i.key;h&&(i=i.props.children);var _="object"==typeof i&&null!==i;if(_)switch(i.$$typeof){case u:e:{for(_=i.key,h=r;null!==h;){if(h.key===_){switch(h.tag){case 7:if(i.type===c){n(e,h.sibling),(r=a(h,i.props.children)).return=e,e=r;break e}break;default:if(h.elementType===i.type){n(e,h.sibling),(r=a(h,i.props)).ref=xn(e,h,i),r.return=e,e=r;break e}}n(e,h);break}t(e,h),h=h.sibling}i.type===c?((r=ks(i.props.children,e.mode,d,i.key)).return=e,e=r):((d=bs(i.type,i.key,i.props,null,e.mode,d)).ref=xn(e,r,i),d.return=e,e=d)}return s(e);case l:e:{for(h=i.key;null!==r;){if(r.key===h){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ds(i,e.mode,d)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=ws(i,e.mode,d)).return=e,e=r),s(e);if(Tn(i))return g(e,r,i,d);if(S(i))return M(e,r,i,d);if(_&&Cn(e,i),void 0===i&&!h)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,T(e.type)||"Component"))}return n(e,r)}}var Hn=Pn(!0),Fn=Pn(!1),On={},En=$e(On),jn=$e(On),An=$e(On);function Nn(e){if(e===On)throw Error(o(174));return e}function Rn(e,t){Ze(An,t),Ze(jn,e),Ze(En,On),e=j(t),Qe(En),Ze(En,e)}function Wn(){Qe(En),Qe(jn),Qe(An)}function In(e){var t=Nn(An.current),n=Nn(En.current);n!==(t=A(n,e.type,t))&&(Ze(jn,e),Ze(En,t))}function zn(e){jn.current===e&&(Qe(En),Qe(jn))}var Gn=$e(0);function Un(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||Ae(n)||Ne(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Bn=null,Vn=null,Jn=!1;function Kn(e,t){var n=Ms(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qn(e,t){switch(e.tag){case 5:return null!==(t=Ee(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=je(t,e.pendingProps))&&(e.stateNode=t,!0);case 13:default:return!1}}function Xn(e){if(Jn){var t=Vn;if(t){var n=t;if(!qn(e,t)){if(!(t=Re(n))||!qn(e,t))return e.flags=-1025&e.flags|2,Jn=!1,void(Bn=e);Kn(Bn,n)}Bn=e,Vn=We(t)}else e.flags=-1025&e.flags|2,Jn=!1,Bn=e}}function $n(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Bn=e}function Qn(e){if(!Q||e!==Bn)return!1;if(!Jn)return $n(e),Jn=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!U(t,e.memoizedProps))for(t=Vn;t;)Kn(e,t),t=Re(t);if($n(e),13===e.tag){if(!Q)throw Error(o(316));if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));Vn=Ge(e)}else Vn=Bn?Re(e.stateNode):null;return!0}function Zn(){Q&&(Vn=Bn=null,Jn=!1)}var er=[];function tr(){for(var e=0;e<er.length;e++){var t=er[e];q?t._workInProgressVersionPrimary=null:t._workInProgressVersionSecondary=null}er.length=0}var nr=d.ReactCurrentDispatcher,rr=d.ReactCurrentBatchConfig,ar=0,ir=null,sr=null,or=null,dr=!1,ur=!1;function lr(){throw Error(o(321))}function cr(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!$t(e[n],t[n]))return!1;return!0}function hr(e,t,n,r,a,i){if(ar=i,ir=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,nr.current=null===e||null===e.memoizedState?Nr:Rr,e=n(r,a),ur){i=0;do{if(ur=!1,!(25>i))throw Error(o(301));i+=1,or=sr=null,t.updateQueue=null,nr.current=Wr,e=n(r,a)}while(ur)}if(nr.current=Ar,t=null!==sr&&null!==sr.next,ar=0,or=sr=ir=null,dr=!1,t)throw Error(o(300));return e}function _r(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===or?ir.memoizedState=or=e:or=or.next=e,or}function fr(){if(null===sr){var e=ir.alternate;e=null!==e?e.memoizedState:null}else e=sr.next;var t=null===or?ir.memoizedState:or.next;if(null!==t)or=t,sr=e;else{if(null===e)throw Error(o(310));e={memoizedState:(sr=e).memoizedState,baseState:sr.baseState,baseQueue:sr.baseQueue,queue:sr.queue,next:null},null===or?ir.memoizedState=or=e:or=or.next=e}return or}function mr(e,t){return"function"==typeof t?t(e):t}function pr(e){var t=fr(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=sr,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var d=s=i=null,u=a;do{var l=u.lane;if((ar&l)===l)null!==d&&(d=d.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var c={lane:l,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===d?(s=d=c,i=r):d=d.next=c,ir.lanes|=l,ui|=l}u=u.next}while(null!==u&&u!==a);null===d?i=r:d.next=s,$t(r,t.memoizedState)||(zr=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=d,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function yr(e){var t=fr(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);$t(i,t.memoizedState)||(zr=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function gr(e,t,n){var r=t._getVersion;r=r(t._source);var a=q?t._workInProgressVersionPrimary:t._workInProgressVersionSecondary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(ar&e)===e)&&(q?t._workInProgressVersionPrimary=r:t._workInProgressVersionSecondary=r,er.push(t))),e)return n(t._source);throw er.push(t),Error(o(350))}function Mr(e,t,n,r){var a=ti;if(null===a)throw Error(o(349));var i=t._getVersion,s=i(t._source),d=nr.current,u=d.useState((function(){return gr(a,t,n)})),l=u[1],c=u[0];u=or;var h=e.memoizedState,_=h.refs,f=_.getSnapshot,m=h.source;h=h.subscribe;var p=ir;return e.memoizedState={refs:_,source:t,subscribe:r},d.useEffect((function(){_.getSnapshot=n,_.setSnapshot=l;var e=i(t._source);if(!$t(s,e)){e=n(t._source),$t(c,e)||(l(e),e=Ei(p),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,o=e;0<o;){var d=31-bt(o),u=1<<d;r[d]|=e,o&=~u}}}),[n,t,r]),d.useEffect((function(){return r(t._source,(function(){var e=_.getSnapshot,n=_.setSnapshot;try{n(e(t._source));var r=Ei(p);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),$t(f,n)&&$t(m,t)&&$t(h,r)||((e={pending:null,dispatch:null,lastRenderedReducer:mr,lastRenderedState:c}).dispatch=l=jr.bind(null,ir,e),u.queue=e,u.baseQueue=null,c=gr(a,t,n),u.memoizedState=u.baseState=c),c}function vr(e,t,n){return Mr(fr(),e,t,n)}function Lr(e){var t=_r();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:mr,lastRenderedState:e}).dispatch=jr.bind(null,ir,e),[t.memoizedState,e]}function br(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ir.updateQueue)?(t={lastEffect:null},ir.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function kr(e){return e={current:e},_r().memoizedState=e}function Yr(){return fr().memoizedState}function wr(e,t,n,r){var a=_r();ir.flags|=e,a.memoizedState=br(1|t,n,void 0,void 0===r?null:r)}function Dr(e,t,n,r){var a=fr();r=void 0===r?null:r;var i=void 0;if(null!==sr){var s=sr.memoizedState;if(i=s.destroy,null!==r&&cr(r,s.deps))return void br(t,n,i,r)}ir.flags|=e,a.memoizedState=br(1|t,n,i,r)}function Sr(e,t){return wr(516,4,e,t)}function Tr(e,t){return Dr(516,4,e,t)}function xr(e,t){return Dr(4,2,e,t)}function Cr(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Pr(e,t,n){return n=null!=n?n.concat([e]):null,Dr(4,2,Cr.bind(null,t,e),n)}function Hr(){}function Fr(e,t){var n=fr();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&cr(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Or(e,t){var n=fr();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&cr(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Er(e,t){var n=Ut();Vt(98>n?98:n,(function(){e(!0)})),Vt(97<n?97:n,(function(){var n=rr.transition;rr.transition=1;try{e(!1),t()}finally{rr.transition=n}}))}function jr(e,t,n){var r=Oi(),a=Ei(e),i={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},s=t.pending;if(null===s?i.next=i:(i.next=s.next,s.next=i),t.pending=i,s=e.alternate,e===ir||null!==s&&s===ir)ur=dr=!0;else{if(0===e.lanes&&(null===s||0===s.lanes)&&null!==(s=t.lastRenderedReducer))try{var o=t.lastRenderedState,d=s(o,n);if(i.eagerReducer=s,i.eagerState=d,$t(d,o))return}catch(e){}ji(e,a,r)}}var Ar={readContext:hn,useCallback:lr,useContext:lr,useEffect:lr,useImperativeHandle:lr,useLayoutEffect:lr,useMemo:lr,useReducer:lr,useRef:lr,useState:lr,useDebugValue:lr,useDeferredValue:lr,useTransition:lr,useMutableSource:lr,useOpaqueIdentifier:lr,unstable_isNewReconciler:!1},Nr={readContext:hn,useCallback:function(e,t){return _r().memoizedState=[e,void 0===t?null:t],e},useContext:hn,useEffect:Sr,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wr(4,2,Cr.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wr(4,2,e,t)},useMemo:function(e,t){var n=_r();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=_r();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=jr.bind(null,ir,e),[r.memoizedState,e]},useRef:kr,useState:Lr,useDebugValue:Hr,useDeferredValue:function(e){var t=Lr(e),n=t[0],r=t[1];return Sr((function(){var t=rr.transition;rr.transition=1;try{r(e)}finally{rr.transition=t}}),[e]),n},useTransition:function(){var e=Lr(!1),t=e[0];return kr(e=Er.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=_r();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},Mr(r,e,t,n)},useOpaqueIdentifier:function(){if(Jn){var e=!1,t=ee((function(){throw e||(e=!0,n(te())),Error(o(355))})),n=Lr(t)[1];return 0==(2&ir.mode)&&(ir.flags|=516,br(5,(function(){n(te())}),void 0,null)),t}return Lr(t=te()),t},unstable_isNewReconciler:!1},Rr={readContext:hn,useCallback:Fr,useContext:hn,useEffect:Tr,useImperativeHandle:Pr,useLayoutEffect:xr,useMemo:Or,useReducer:pr,useRef:Yr,useState:function(){return pr(mr)},useDebugValue:Hr,useDeferredValue:function(e){var t=pr(mr),n=t[0],r=t[1];return Tr((function(){var t=rr.transition;rr.transition=1;try{r(e)}finally{rr.transition=t}}),[e]),n},useTransition:function(){var e=pr(mr)[0];return[Yr().current,e]},useMutableSource:vr,useOpaqueIdentifier:function(){return pr(mr)[0]},unstable_isNewReconciler:!1},Wr={readContext:hn,useCallback:Fr,useContext:hn,useEffect:Tr,useImperativeHandle:Pr,useLayoutEffect:xr,useMemo:Or,useReducer:yr,useRef:Yr,useState:function(){return yr(mr)},useDebugValue:Hr,useDeferredValue:function(e){var t=yr(mr),n=t[0],r=t[1];return Tr((function(){var t=rr.transition;rr.transition=1;try{r(e)}finally{rr.transition=t}}),[e]),n},useTransition:function(){var e=yr(mr)[0];return[Yr().current,e]},useMutableSource:vr,useOpaqueIdentifier:function(){return yr(mr)[0]},unstable_isNewReconciler:!1},Ir=d.ReactCurrentOwner,zr=!1;function Gr(e,t,n,r){t.child=null===e?Fn(t,null,n,r):Hn(t,e.child,n,r)}function Ur(e,t,n,r,a){n=n.render;var i=t.ref;return cn(t,a),r=hr(e,t,n,r,i,a),null===e||zr?(t.flags|=1,Gr(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ua(e,t,a))}function Br(e,t,n,r,a,i){if(null===e){var s=n.type;return"function"!=typeof s||vs(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=bs(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,Vr(e,t,s,r,a,i))}return s=e.child,0==(a&i)&&(a=s.memoizedProps,(n=null!==(n=n.compare)?n:Zt)(a,r)&&e.ref===t.ref)?ua(e,t,i):(t.flags|=1,(e=Ls(s,r)).ref=t.ref,e.return=t,t.child=e)}function Vr(e,t,n,r,a,i){if(null!==e&&Zt(e.memoizedProps,r)&&e.ref===t.ref){if(zr=!1,0==(i&a))return t.lanes=e.lanes,ua(e,t,i);0!=(16384&e.flags)&&(zr=!0)}return qr(e,t,n,r,i)}function Jr(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},Ui(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},Ui(0,e),null;t.memoizedState={baseLanes:0},Ui(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Ui(0,r);return Gr(e,t,a,n),t.child}function Kr(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qr(e,t,n,r,a){var i=it(n)?rt:tt.current;return i=at(t,i),cn(t,a),n=hr(e,t,n,r,i,a),null===e||zr?(t.flags|=1,Gr(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ua(e,t,a))}function Xr(e,t,n,r,a){if(it(n)){var i=!0;ut(t)}else i=!1;if(cn(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),wn(t,n,r),Sn(t,n,r,a),r=!0;else if(null===e){var s=t.stateNode,o=t.memoizedProps;s.props=o;var d=s.context,u=n.contextType;u="object"==typeof u&&null!==u?hn(u):at(t,u=it(n)?rt:tt.current);var l=n.getDerivedStateFromProps,c="function"==typeof l||"function"==typeof s.getSnapshotBeforeUpdate;c||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==r||d!==u)&&Dn(t,s,r,u),_n=!1;var h=t.memoizedState;s.state=h,Mn(t,r,s,a),d=t.memoizedState,o!==r||h!==d||nt.current||_n?("function"==typeof l&&(bn(t,n,l,r),d=t.memoizedState),(o=_n||Yn(t,n,o,r,h,d,u))?(c||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4)):("function"==typeof s.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=d),s.props=r,s.state=d,s.context=u,r=o):("function"==typeof s.componentDidMount&&(t.flags|=4),r=!1)}else{s=t.stateNode,mn(e,t),o=t.memoizedProps,u=t.type===t.elementType?o:tn(t.type,o),s.props=u,c=t.pendingProps,h=s.context,d="object"==typeof(d=n.contextType)&&null!==d?hn(d):at(t,d=it(n)?rt:tt.current);var _=n.getDerivedStateFromProps;(l="function"==typeof _||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==c||h!==d)&&Dn(t,s,r,d),_n=!1,h=t.memoizedState,s.state=h,Mn(t,r,s,a);var f=t.memoizedState;o!==c||h!==f||nt.current||_n?("function"==typeof _&&(bn(t,n,_,r),f=t.memoizedState),(u=_n||Yn(t,n,u,r,h,f,d))?(l||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,f,d),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,f,d)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=f),s.props=r,s.state=f,s.context=d,r=u):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),r=!1)}return $r(e,t,n,r,i,a)}function $r(e,t,n,r,a,i){Kr(e,t);var s=0!=(64&t.flags);if(!r&&!s)return a&&lt(t,n,!1),ua(e,t,i);r=t.stateNode,Ir.current=t;var o=s&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&s?(t.child=Hn(t,e.child,null,i),t.child=Hn(t,null,o,i)):Gr(e,t,o,i),t.memoizedState=r.state,a&&lt(t,n,!0),t.child}function Qr(e){var t=e.stateNode;t.pendingContext?ot(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ot(0,t.context,!1),Rn(e,t.containerInfo)}var Zr,ea,ta,na,ra={dehydrated:null,retryLane:0};function aa(e,t,n){var r,a=t.pendingProps,i=Gn.current,s=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(s=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),Ze(Gn,1&i),null===e?(void 0!==a.fallback&&Xn(t),e=a.children,i=a.fallback,s?(e=ia(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ra,e):"number"==typeof a.unstable_expectedLoadTime?(e=ia(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ra,t.lanes=33554432,e):((n=Ys({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,s?(a=function(e,t,n,r,a){var i=t.mode,s=e.child;e=s.sibling;var o={mode:"hidden",children:n};return 0==(2&i)&&t.child!==s?((n=t.child).childLanes=0,n.pendingProps=o,null!==(s=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=s,s.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ls(s,o),null!==e?r=Ls(e,r):(r=ks(r,i,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),s=t.child,i=e.child.memoizedState,s.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},s.childLanes=e.childLanes&~n,t.memoizedState=ra,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Ls(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function ia(e,t,n,r){var a=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Ys(t,a,0,null),n=ks(n,a,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function sa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ln(e.return,t)}function oa(e,t,n,r,a,i){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:i}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailMode=a,s.lastEffect=i)}function da(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Gr(e,t,r.children,n),0!=(2&(r=Gn.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&sa(e,n);else if(19===e.tag)sa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ze(Gn,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Un(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),oa(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Un(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}oa(t,!0,n,null,i,t.lastEffect);break;case"together":oa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ua(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ui|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ls(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ls(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function la(e){e.flags|=4}if(X)Zr=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)I(e,n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ea=function(){},ta=function(e,t,n,r,a){if((e=e.memoizedProps)!==r){var i=t.stateNode,s=Nn(En.current);n=G(i,n,e,r,a,s),(t.updateQueue=n)&&la(t)}},na=function(e,t,n,r){n!==r&&la(t)};else if($){Zr=function(e,t,n,r){for(var a=t.child;null!==a;){if(5===a.tag){var i=a.stateNode;n&&r&&(i=Fe(i,a.type,a.memoizedProps,a)),I(e,i)}else if(6===a.tag)i=a.stateNode,n&&r&&(i=Oe(i,a.memoizedProps,a)),I(e,i);else if(4!==a.tag){if(13===a.tag&&0!=(4&a.flags)&&(i=null!==a.memoizedState)){var s=a.child;if(null!==s&&(null!==s.child&&(s.child.return=s,Zr(e,s,!0,i)),null!==(i=s.sibling))){i.return=a,a=i;continue}}if(null!==a.child){a.child.return=a,a=a.child;continue}}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};var ca=function(e,t,n,r){for(var a=t.child;null!==a;){if(5===a.tag){var i=a.stateNode;n&&r&&(i=Fe(i,a.type,a.memoizedProps,a)),Ce(e,i)}else if(6===a.tag)i=a.stateNode,n&&r&&(i=Oe(i,a.memoizedProps,a)),Ce(e,i);else if(4!==a.tag){if(13===a.tag&&0!=(4&a.flags)&&(i=null!==a.memoizedState)){var s=a.child;if(null!==s&&(null!==s.child&&(s.child.return=s,ca(e,s,!0,i)),null!==(i=s.sibling))){i.return=a,a=i;continue}}if(null!==a.child){a.child.return=a,a=a.child;continue}}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};ea=function(e){var t=e.stateNode;if(null!==e.firstEffect){var n=t.containerInfo,r=xe(n);ca(r,e,!1,!1),t.pendingChildren=r,la(e),Pe(n,r)}},ta=function(e,t,n,r,a){var i=e.stateNode,s=e.memoizedProps;if((e=null===t.firstEffect)&&s===r)t.stateNode=i;else{var o=t.stateNode,d=Nn(En.current),u=null;s!==r&&(u=G(o,n,s,r,a,d)),e&&null===u?t.stateNode=i:(i=Te(i,u,n,s,r,t,e,o),z(i,n,r,a,d)&&la(t),t.stateNode=i,e?la(t):Zr(i,t,!1,!1))}},na=function(e,t,n,r){n!==r?(e=Nn(An.current),n=Nn(En.current),t.stateNode=B(r,e,n,t),la(t)):t.stateNode=e.stateNode}}else ea=function(){},ta=function(){},na=function(){};function ha(e,t){if(!Jn)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function _a(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return it(t.type)&&st(),null;case 3:return Wn(),Qe(nt),Qe(tt),tr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Qn(t)?la(t):r.hydrate||(t.flags|=256)),ea(t),null;case 5:zn(t);var a=Nn(An.current);if(n=t.type,null!==e&&null!=t.stateNode)ta(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Nn(En.current),Qn(t)){if(!Q)throw Error(o(175));e=Ie(t.stateNode,t.type,t.memoizedProps,a,e,t),t.updateQueue=e,null!==e&&la(t)}else{var i=W(n,r,a,e,t);Zr(i,t,!1,!1),t.stateNode=i,z(i,n,r,a,e)&&la(t)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)na(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=Nn(An.current),a=Nn(En.current),Qn(t)){if(!Q)throw Error(o(176));ze(t.stateNode,t.memoizedProps,t)&&la(t)}else t.stateNode=B(r,e,a,t)}return null;case 13:return Qe(Gn),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,a=!1,null===e?void 0!==t.memoizedProps.fallback&&Qn(t):a=null!==e.memoizedState,r&&!a&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Gn.current)?0===si&&(si=3):(0!==si&&3!==si||(si=4),null===ti||0==(134217727&ui)&&0==(134217727&li)||Wi(ti,ri))),$&&r&&(t.flags|=4),X&&(r||a)&&(t.flags|=4),null);case 4:return Wn(),ea(t),null===e&&ae(t.stateNode.containerInfo),null;case 10:return un(t),null;case 17:return it(t.type)&&st(),null;case 19:if(Qe(Gn),null===(r=t.memoizedState))return null;if(a=0!=(64&t.flags),null===(i=r.rendering))if(a)ha(r,!1);else{if(0!==si||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(i=Un(e))){for(t.flags|=64,ha(r,!1),null!==(e=i.updateQueue)&&(t.updateQueue=e,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,e=n,r=t.child;null!==r;)n=e,(a=r).flags&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(i=a.alternate)?(a.childLanes=0,a.lanes=n,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=i.childLanes,a.lanes=i.lanes,a.child=i.child,a.memoizedProps=i.memoizedProps,a.memoizedState=i.memoizedState,a.updateQueue=i.updateQueue,a.type=i.type,n=i.dependencies,a.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),r=r.sibling;return Ze(Gn,1&Gn.current|2),t.child}e=e.sibling}null!==r.tail&&Gt()>fi&&(t.flags|=64,a=!0,ha(r,!1),t.lanes=33554432)}else{if(!a)if(null!==(e=Un(i))){if(t.flags|=64,a=!0,null!==(e=e.updateQueue)&&(t.updateQueue=e,t.flags|=4),ha(r,!0),null===r.tail&&"hidden"===r.tailMode&&!i.alternate&&!Jn)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Gt()-r.renderingStartTime>fi&&1073741824!==n&&(t.flags|=64,a=!0,ha(r,!1),t.lanes=33554432);r.isBackwards?(i.sibling=t.child,t.child=i):(null!==(e=r.last)?e.sibling=i:t.child=i,r.last=i)}return null!==r.tail?(e=r.tail,r.rendering=e,r.tail=e.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Gt(),e.sibling=null,t=Gn.current,Ze(Gn,a?1&t|2:1&t),e):null;case 23:case 24:return Bi(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function fa(e){switch(e.tag){case 1:it(e.type)&&st();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Wn(),Qe(nt),Qe(tt),tr(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return zn(e),null;case 13:return Qe(Gn),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return Qe(Gn),null;case 4:return Wn(),null;case 10:return un(e),null;case 23:case 24:return Bi(),null;default:return null}}function ma(e,t){try{var n="",r=t;do{n+=en(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function pa(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ya="function"==typeof WeakMap?WeakMap:Map;function ga(e,t,n){(n=pn(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){gi||(gi=!0,Mi=r),pa(0,t)},n}function Ma(e,t,n){(n=pn(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return pa(0,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===vi?vi=new Set([this]):vi.add(this),pa(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var va="function"==typeof WeakSet?WeakSet:Set;function La(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ds(e,t)}else t.current=null}function ba(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:tn(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(X&&256&t.flags&&Se(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function ka(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function Ya(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(is(n,e),as(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:tn(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&vn(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=E(n.child.stateNode);break;case 1:e=n.child.stateNode}vn(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&pe(e,n.type,n.memoizedProps,n));case 6:case 4:case 12:return;case 13:return void(Q&&null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Be(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function wa(e,t){if(X)for(var n=e;;){if(5===n.tag){var r=n.stateNode;t?ke(r):we(n.stateNode,n.memoizedProps)}else if(6===n.tag)r=n.stateNode,t?Ye(r):De(r,n.memoizedProps);else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Da(e,t){if(ht&&"function"==typeof ht.onCommitFiberUnmount)try{ht.onCommitFiberUnmount(ct,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))is(t,n);else{r=t;try{a()}catch(e){ds(r,e)}}n=n.next}while(n!==e)}break;case 1:if(La(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ds(t,e)}break;case 5:La(t);break;case 4:X?Fa(e,t):$&&$&&(t=t.stateNode.containerInfo,e=xe(t),He(t,e))}}function Sa(e,t){for(var n=t;;)if(Da(e,n),null===n.child||X&&4===n.tag){if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}else n.child.return=n,n=n.child}function Ta(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function xa(e){return 5===e.tag||3===e.tag||4===e.tag}function Ca(e){if(X){e:{for(var t=e.return;null!==t;){if(xa(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.flags&&(be(t),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||xa(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?Pa(e,n,t):Ha(e,n,t)}}function Pa(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?Me(n,e,t):fe(n,e);else if(4!==r&&null!==(e=e.child))for(Pa(e,t,n),e=e.sibling;null!==e;)Pa(e,t,n),e=e.sibling}function Ha(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?ge(n,e,t):_e(n,e);else if(4!==r&&null!==(e=e.child))for(Ha(e,t,n),e=e.sibling;null!==e;)Ha(e,t,n),e=e.sibling}function Fa(e,t){for(var n,r,a=t,i=!1;;){if(!i){i=a.return;e:for(;;){if(null===i)throw Error(o(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===a.tag||6===a.tag)Sa(e,a),r?Le(n,a.stateNode):ve(n,a.stateNode);else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(Da(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(i=!1)}a.sibling.return=a.return,a=a.sibling}}function Oa(e,t){if(X){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ka(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var a=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&ye(n,i,a,e,r,t)}return;case 6:if(null===t.stateNode)throw Error(o(162));return n=t.memoizedProps,void me(t.stateNode,null!==e?e.memoizedProps:n,n);case 3:return void(Q&&(t=t.stateNode,t.hydrate&&(t.hydrate=!1,Ue(t.containerInfo))));case 12:return;case 13:return Ea(t),void ja(t);case 19:return void ja(t);case 17:return;case 23:case 24:return void wa(t,null!==t.memoizedState)}throw Error(o(163))}switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ka(3,t);case 12:return;case 13:return Ea(t),void ja(t);case 19:return void ja(t);case 3:Q&&(n=t.stateNode).hydrate&&(n.hydrate=!1,Ue(n.containerInfo));break;case 23:case 24:return}e:if($){switch(t.tag){case 1:case 5:case 6:case 20:break e;case 3:case 4:t=t.stateNode,He(t.containerInfo,t.pendingChildren);break e}throw Error(o(163))}}function Ea(e){null!==e.memoizedState&&(_i=Gt(),X&&wa(e.child,!0))}function ja(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new va),t.forEach((function(t){var r=ls.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Aa(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Na=0,Ra=1,Wa=2,Ia=3,za=4;if("function"==typeof Symbol&&Symbol.for){var Ga=Symbol.for;Na=Ga("selector.component"),Ra=Ga("selector.has_pseudo_class"),Wa=Ga("selector.role"),Ia=Ga("selector.test_id"),za=Ga("selector.text")}function Ua(e){var t=Z(e);if(null!=t){if("string"!=typeof t.memoizedProps["data-testname"])throw Error(o(364));return t}if(null===(e=se(e)))throw Error(o(362));return e.stateNode.current}function Ba(e,t){switch(t.$$typeof){case Na:if(e.type===t.value)return!0;break;case Ra:e:{t=t.value,e=[e,0];for(var n=0;n<e.length;){var r=e[n++],a=e[n++],i=t[a];if(5!==r.tag||!ue(r)){for(;null!=i&&Ba(r,i);)i=t[++a];if(a===t.length){t=!0;break e}for(r=r.child;null!==r;)e.push(r,a),r=r.sibling}}t=!1}return t;case Wa:if(5===e.tag&&le(e.stateNode,t.value))return!0;break;case za:if((5===e.tag||6===e.tag)&&null!==(e=de(e))&&0<=e.indexOf(t.value))return!0;break;case Ia:if(5===e.tag&&"string"==typeof(e=e.memoizedProps["data-testname"])&&e.toLowerCase()===t.value.toLowerCase())return!0;break;default:throw Error(o(365,t))}return!1}function Va(e){switch(e.$$typeof){case Na:return"<"+(T(e.value)||"Unknown")+">";case Ra:return":has("+(Va(e)||"")+")";case Wa:return'[role="'+e.value+'"]';case za:return'"'+e.value+'"';case Ia:return'[data-testname="'+e.value+'"]';default:throw Error(o(365,e))}}function Ja(e,t){var n=[];e=[e,0];for(var r=0;r<e.length;){var a=e[r++],i=e[r++],s=t[i];if(5!==a.tag||!ue(a)){for(;null!=s&&Ba(a,s);)s=t[++i];if(i===t.length)n.push(a);else for(a=a.child;null!==a;)e.push(a,i),a=a.sibling}}return n}function Ka(e,t){if(!ie)throw Error(o(363));e=Ja(e=Ua(e),t),t=[],e=Array.from(e);for(var n=0;n<e.length;){var r=e[n++];if(5===r.tag)ue(r)||t.push(r.stateNode);else for(r=r.child;null!==r;)e.push(r),r=r.sibling}return t}var qa=null,Xa=Math.ceil,$a=d.ReactCurrentDispatcher,Qa=d.ReactCurrentOwner,Za=d.IsSomeRendererActing,ei=0,ti=null,ni=null,ri=0,ai=0,ii=$e(0),si=0,oi=null,di=0,ui=0,li=0,ci=0,hi=null,_i=0,fi=1/0;function mi(){fi=Gt()+500}var pi,yi=null,gi=!1,Mi=null,vi=null,Li=!1,bi=null,ki=90,Yi=[],wi=[],Di=null,Si=0,Ti=null,xi=-1,Ci=0,Pi=0,Hi=null,Fi=!1;function Oi(){return 0!=(48&ei)?Gt():-1!==xi?xi:xi=Gt()}function Ei(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ut()?1:2;if(0===Ci&&(Ci=di),0!==Xt.transition){0!==Pi&&(Pi=null!==hi?hi.pendingLanes:0),e=Ci;var t=4186112&~Pi;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ut(),e=gt(0!=(4&ei)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),Ci)}function ji(e,t,n){if(50<Si)throw Si=0,Ti=null,Error(o(185));if(null===(e=Ai(e,t)))return null;Lt(e,t,n),e===ti&&(li|=t,4===si&&Wi(e,ri));var r=Ut();1===t?0!=(8&ei)&&0==(48&ei)?Ii(e):(Ni(e,n),0===ei&&(mi(),Kt())):(0==(4&ei)||98!==r&&99!==r||(null===Di?Di=new Set([e]):Di.add(e)),Ni(e,n)),hi=e}function Ai(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Ni(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var d=31-bt(s),u=1<<d,l=i[d];if(-1===l){if(0==(u&r)||0!=(u&a)){l=t,mt(u);var c=ft;i[d]=10<=c?l+250:6<=c?l+5e3:-1}}else l<=t&&(e.expiredLanes|=u);s&=~u}if(r=pt(e,e===ti?ri:0),t=ft,0===r)null!==n&&(n!==At&&St(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==At&&St(n)}15===t?(n=Ii.bind(null,e),null===Rt?(Rt=[n],Wt=Dt(Ht,qt)):Rt.push(n),n=At):n=14===t?Jt(99,Ii.bind(null,e)):Jt(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),Ri.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function Ri(e){if(xi=-1,Pi=Ci=0,0!=(48&ei))throw Error(o(327));var t=e.callbackNode;if(rs()&&e.callbackNode!==t)return null;var n=pt(e,e===ti?ri:0);if(0===n)return null;var r=n,a=ei;ei|=16;var i=Ki();for(ti===e&&ri===r||(mi(),Vi(e,r));;)try{$i();break}catch(t){Ji(e,t)}if(on(),$a.current=i,ei=a,null!==ni?r=0:(ti=null,ri=0,r=si),0!=(di&li))Vi(e,0);else if(0!==r){if(2===r&&(ei|=64,e.hydrate&&(e.hydrate=!1,Se(e.containerInfo)),0!==(n=yt(e))&&(r=qi(e,n))),1===r)throw t=oi,Vi(e,0),Wi(e,n),Ni(e,Gt()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(o(345));case 2:es(e);break;case 3:if(Wi(e,n),(62914560&n)===n&&10<(r=_i+500-Gt())){if(0!==pt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){Oi(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=V(es.bind(null,e),r);break}es(e);break;case 4:if(Wi(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var s=31-bt(n);i=1<<s,(s=r[s])>a&&(a=s),n&=~i}if(n=a,10<(n=(120>(n=Gt()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Xa(n/1960))-n)){e.timeoutHandle=V(es.bind(null,e),n);break}es(e);break;case 5:es(e);break;default:throw Error(o(329))}}return Ni(e,Gt()),e.callbackNode===t?Ri.bind(null,e):null}function Wi(e,t){for(t&=~ci,t&=~li,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-bt(t),r=1<<n;e[n]=-1,t&=~r}}function Ii(e){if(0!=(48&ei))throw Error(o(327));if(rs(),e===ti&&0!=(e.expiredLanes&ri)){var t=ri,n=qi(e,t);0!=(di&li)&&(n=qi(e,t=pt(e,t)))}else n=qi(e,t=pt(e,0));if(0!==e.tag&&2===n&&(ei|=64,e.hydrate&&(e.hydrate=!1,Se(e.containerInfo)),0!==(t=yt(e))&&(n=qi(e,t))),1===n)throw n=oi,Vi(e,0),Wi(e,t),Ni(e,Gt()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,es(e),Ni(e,Gt()),null}function zi(e,t){var n=ei;ei|=1;try{return e(t)}finally{0===(ei=n)&&(mi(),Kt())}}function Gi(e,t){var n=ei;if(0!=(48&n))return e(t);ei|=1;try{if(e)return Vt(99,e.bind(null,t))}finally{ei=n,Kt()}}function Ui(e,t){Ze(ii,ai),ai|=t,di|=t}function Bi(){ai=ii.current,Qe(ii)}function Vi(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==K&&(e.timeoutHandle=K,J(n)),null!==ni)for(n=ni.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&st();break;case 3:Wn(),Qe(nt),Qe(tt),tr();break;case 5:zn(r);break;case 4:Wn();break;case 13:case 19:Qe(Gn);break;case 10:un(r);break;case 23:case 24:Bi()}n=n.return}ti=e,ni=Ls(e.current,null),ri=ai=di=t,si=0,oi=null,ci=li=ui=0}function Ji(e,t){for(;;){var n=ni;try{if(on(),nr.current=Ar,dr){for(var r=ir.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}dr=!1}if(ar=0,or=sr=ir=null,ur=!1,Qa.current=null,null===n||null===n.return){si=1,oi=t,ni=null;break}e:{var i=e,s=n.return,o=n,d=t;if(t=ri,o.flags|=2048,o.firstEffect=o.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var u=d;if(0==(2&o.mode)){var l=o.alternate;l?(o.updateQueue=l.updateQueue,o.memoizedState=l.memoizedState,o.lanes=l.lanes):(o.updateQueue=null,o.memoizedState=null)}var c=0!=(1&Gn.current),h=s;do{var _;if(_=13===h.tag){var f=h.memoizedState;if(null!==f)_=null!==f.dehydrated;else{var m=h.memoizedProps;_=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!c)}}if(_){var p=h.updateQueue;if(null===p){var y=new Set;y.add(u),h.updateQueue=y}else p.add(u);if(0==(2&h.mode)){if(h.flags|=64,o.flags|=16384,o.flags&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var g=pn(-1,1);g.tag=2,yn(o,g)}o.lanes|=1;break e}d=void 0,o=t;var M=i.pingCache;if(null===M?(M=i.pingCache=new ya,d=new Set,M.set(u,d)):void 0===(d=M.get(u))&&(d=new Set,M.set(u,d)),!d.has(o)){d.add(o);var v=us.bind(null,i,u,o);u.then(v,v)}h.flags|=4096,h.lanes=t;break e}h=h.return}while(null!==h);d=Error((T(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==si&&(si=2),d=ma(d,o),h=s;do{switch(h.tag){case 3:i=d,h.flags|=4096,t&=-t,h.lanes|=t,gn(h,ga(0,i,t));break e;case 1:i=d;var L=h.type,b=h.stateNode;if(0==(64&h.flags)&&("function"==typeof L.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===vi||!vi.has(b)))){h.flags|=4096,t&=-t,h.lanes|=t,gn(h,Ma(h,i,t));break e}}h=h.return}while(null!==h)}Zi(n)}catch(e){t=e,ni===n&&null!==n&&(ni=n=n.return);continue}break}}function Ki(){var e=$a.current;return $a.current=Ar,null===e?Ar:e}function qi(e,t){var n=ei;ei|=16;var r=Ki();for(ti===e&&ri===t||Vi(e,t);;)try{Xi();break}catch(t){Ji(e,t)}if(on(),ei=n,$a.current=r,null!==ni)throw Error(o(261));return ti=null,ri=0,si}function Xi(){for(;null!==ni;)Qi(ni)}function $i(){for(;null!==ni&&!Tt();)Qi(ni)}function Qi(e){var t=pi(e.alternate,e,ai);e.memoizedProps=e.pendingProps,null===t?Zi(e):ni=t,Qa.current=null}function Zi(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=_a(n,t,ai)))return void(ni=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&ai)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=fa(t)))return n.flags&=2047,void(ni=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(ni=t);ni=t=e}while(null!==t);0===si&&(si=5)}function es(e){var t=Ut();return Vt(99,ts.bind(null,e,t)),null}function ts(e,t){do{rs()}while(null!==bi);if(0!=(48&ei))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,i=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var s=e.eventTimes,d=e.expirationTimes;0<i;){var u=31-bt(i),l=1<<u;a[u]=0,s[u]=-1,d[u]=-1,i&=~l}if(null!==Di&&0==(24&r)&&Di.has(e)&&Di.delete(e),e===ti&&(ni=ti=null,ri=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){a=ei,ei|=32,Qa.current=null,Hi=N(e.containerInfo),Fi=!1,yi=r;do{try{ns()}catch(e){if(null===yi)throw Error(o(330));ds(yi,e),yi=yi.nextEffect}}while(null!==yi);Hi=null,yi=r;do{try{for(s=e;null!==yi;){var c=yi.flags;if(16&c&&X&&be(yi.stateNode),128&c){var h=yi.alternate;if(null!==h){var _=h.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&c){case 2:Ca(yi),yi.flags&=-3;break;case 6:Ca(yi),yi.flags&=-3,Oa(yi.alternate,yi);break;case 1024:yi.flags&=-1025;break;case 1028:yi.flags&=-1025,Oa(yi.alternate,yi);break;case 4:Oa(yi.alternate,yi);break;case 8:d=s,i=yi,X?Fa(d,i):Sa(d,i);var f=i.alternate;Ta(i),null!==f&&Ta(f)}yi=yi.nextEffect}}catch(e){if(null===yi)throw Error(o(330));ds(yi,e),yi=yi.nextEffect}}while(null!==yi);Fi&&re(),R(e.containerInfo),e.current=n,yi=r;do{try{for(c=e;null!==yi;){var m=yi.flags;if(36&m&&Ya(c,yi.alternate,yi),128&m){h=void 0;var p=yi.ref;if(null!==p){var y=yi.stateNode;switch(yi.tag){case 5:h=E(y);break;default:h=y}"function"==typeof p?p(h):p.current=h}}yi=yi.nextEffect}}catch(e){if(null===yi)throw Error(o(330));ds(yi,e),yi=yi.nextEffect}}while(null!==yi);yi=null,Nt(),ei=a}else e.current=n;if(Li)Li=!1,bi=e,ki=t;else for(yi=r;null!==yi;)t=yi.nextEffect,yi.nextEffect=null,8&yi.flags&&((m=yi).sibling=null,m.stateNode=null),yi=t;if(0===(r=e.pendingLanes)&&(vi=null),1===r?e===Ti?Si++:(Si=0,Ti=e):Si=0,n=n.stateNode,ht&&"function"==typeof ht.onCommitFiberRoot)try{ht.onCommitFiberRoot(ct,n,void 0,64==(64&n.current.flags))}catch(e){}if(Ni(e,Gt()),gi)throw gi=!1,e=Mi,Mi=null,e;return 0!=(8&ei)||Kt(),null}function ns(){for(;null!==yi;){var e=yi.alternate;Fi||null===Hi||(0!=(8&yi.flags)?F(yi,Hi)&&(Fi=!0,ne()):13===yi.tag&&Aa(e,yi)&&F(yi,Hi)&&(Fi=!0,ne()));var t=yi.flags;0!=(256&t)&&ba(e,yi),0==(512&t)||Li||(Li=!0,Jt(97,(function(){return rs(),null}))),yi=yi.nextEffect}}function rs(){if(90!==ki){var e=97<ki?97:ki;return ki=90,Vt(e,ss)}return!1}function as(e,t){Yi.push(t,e),Li||(Li=!0,Jt(97,(function(){return rs(),null})))}function is(e,t){wi.push(t,e),Li||(Li=!0,Jt(97,(function(){return rs(),null})))}function ss(){if(null===bi)return!1;var e=bi;if(bi=null,0!=(48&ei))throw Error(o(331));var t=ei;ei|=32;var n=wi;wi=[];for(var r=0;r<n.length;r+=2){var a=n[r],i=n[r+1],s=a.destroy;if(a.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(o(330));ds(i,e)}}for(n=Yi,Yi=[],r=0;r<n.length;r+=2){a=n[r],i=n[r+1];try{var d=a.create;a.destroy=d()}catch(e){if(null===i)throw Error(o(330));ds(i,e)}}for(d=e.current.firstEffect;null!==d;)e=d.nextEffect,d.nextEffect=null,8&d.flags&&(d.sibling=null,d.stateNode=null),d=e;return ei=t,Kt(),!0}function os(e,t,n){yn(e,t=ga(0,t=ma(n,t),1)),t=Oi(),null!==(e=Ai(e,1))&&(Lt(e,1,t),Ni(e,t))}function ds(e,t){if(3===e.tag)os(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){os(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===vi||!vi.has(r))){var a=Ma(n,e=ma(t,e),1);if(yn(n,a),a=Oi(),null!==(n=Ai(n,1)))Lt(n,1,a),Ni(n,a);else if("function"==typeof r.componentDidCatch&&(null===vi||!vi.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function us(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Oi(),e.pingedLanes|=e.suspendedLanes&n,ti===e&&(ri&n)===n&&(4===si||3===si&&(62914560&ri)===ri&&500>Gt()-_i?Vi(e,0):ci|=n),Ni(e,t)}function ls(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ut()?1:2:(0===Ci&&(Ci=di),0===(t=Mt(62914560&~Ci))&&(t=4194304))),n=Oi(),null!==(e=Ai(e,t))&&(Lt(e,t,n),Ni(e,n))}pi=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||nt.current)zr=!0;else{if(0==(n&r)){switch(zr=!1,t.tag){case 3:Qr(t),Zn();break;case 5:In(t);break;case 1:it(t.type)&&ut(t);break;case 4:Rn(t,t.stateNode.containerInfo);break;case 10:dn(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?aa(e,t,n):(Ze(Gn,1&Gn.current),null!==(t=ua(e,t,n))?t.sibling:null);Ze(Gn,1&Gn.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return da(e,t,n);t.flags|=64}var a=t.memoizedState;if(null!==a&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ze(Gn,Gn.current),r)break;return null;case 23:case 24:return t.lanes=0,Jr(e,t,n)}return ua(e,t,n)}zr=0!=(16384&e.flags)}else zr=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=at(t,tt.current),cn(t,n),a=hr(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,it(r)){var i=!0;ut(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,fn(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&bn(t,r,s,e),a.updater=kn,t.stateNode=a,a._reactInternals=t,Sn(t,r,e,n),t=$r(null,t,r,!0,i,n)}else t.tag=0,Gr(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(i=a._init)(a._payload),t.type=a,i=t.tag=function(e){if("function"==typeof e)return vs(e)?1:0;if(null!=e){if((e=e.$$typeof)===p)return 11;if(e===M)return 14}return 2}(a),e=tn(a,e),i){case 0:t=qr(null,t,a,e,n);break e;case 1:t=Xr(null,t,a,e,n);break e;case 11:t=Ur(null,t,a,e,n);break e;case 14:t=Br(null,t,a,tn(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,qr(e,t,r,a=t.elementType===r?a:tn(r,a),n);case 1:return r=t.type,a=t.pendingProps,Xr(e,t,r,a=t.elementType===r?a:tn(r,a),n);case 3:if(Qr(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,mn(e,t),Mn(t,r,null,n),(r=t.memoizedState.element)===a)Zn(),t=ua(e,t,n);else{if((i=(a=t.stateNode).hydrate)&&(Q?(Vn=We(t.stateNode.containerInfo),Bn=t,i=Jn=!0):i=!1),i){if(Q&&null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)i=e[a],s=e[a+1],q?i._workInProgressVersionPrimary=s:i._workInProgressVersionSecondary=s,er.push(i);for(n=Fn(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Gr(e,t,r,n),Zn();t=t.child}return t;case 5:return In(t),null===e&&Xn(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,U(r,a)?s=null:null!==i&&U(r,i)&&(t.flags|=16),Kr(e,t),Gr(e,t,s,n),t.child;case 6:return null===e&&Xn(t),null;case 13:return aa(e,t,n);case 4:return Rn(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Hn(t,null,r,n):Gr(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ur(e,t,r,a=t.elementType===r?a:tn(r,a),n);case 7:return Gr(e,t,t.pendingProps,n),t.child;case 8:case 12:return Gr(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,s=t.memoizedProps,dn(t,i=a.value),null!==s){var d=s.value;if(0==(i=$t(d,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(d,i):1073741823))){if(s.children===a.children&&!nt.current){t=ua(e,t,n);break e}}else for(null!==(d=t.child)&&(d.return=t);null!==d;){var u=d.dependencies;if(null!==u){s=d.child;for(var l=u.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&i)){1===d.tag&&((l=pn(-1,n&-n)).tag=2,yn(d,l)),d.lanes|=n,null!==(l=d.alternate)&&(l.lanes|=n),ln(d.return,n),u.lanes|=n;break}l=l.next}}else s=10===d.tag&&d.type===t.type?null:d.child;if(null!==s)s.return=d;else for(s=d;null!==s;){if(s===t){s=null;break}if(null!==(d=s.sibling)){d.return=s.return,s=d;break}s=s.return}d=s}}Gr(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,cn(t,n),r=r(a=hn(a,i.unstable_observedBits)),t.flags|=1,Gr(e,t,r,n),t.child;case 14:return i=tn(a=t.type,t.pendingProps),Br(e,t,a,i=tn(a.type,i),r,n);case 15:return Vr(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:tn(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,it(r)?(e=!0,ut(t)):e=!1,cn(t,n),wn(t,r,a),Sn(t,r,a,n),$r(null,t,r,!0,e,n);case 19:return da(e,t,n);case 23:case 24:return Jr(e,t,n)}throw Error(o(156,t.tag))};var cs={current:!1},hs=s.unstable_flushAllWithoutAsserting,_s="function"==typeof hs;function fs(){if(void 0!==hs)return hs();for(var e=!1;rs();)e=!0;return e}function ms(t){try{fs(),function(t){if(null===qa)try{var n=("require"+Math.random()).slice(0,7);qa=(e&&e[n]).call(e,"timers").setImmediate}catch(e){qa=function(e){var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}qa(t)}((function(){fs()?ms(t):t()}))}catch(e){t(e)}}var ps=0,ys=!1;function gs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ms(e,t,n,r){return new gs(e,t,n,r)}function vs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ls(e,t){var n=e.alternate;return null===n?((n=Ms(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function bs(e,t,n,r,a,i){var s=2;if(r=e,"function"==typeof e)vs(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case c:return ks(n.children,a,i,t);case b:s=8,a|=16;break;case h:s=8,a|=1;break;case _:return(e=Ms(12,n,t,8|a)).elementType=_,e.type=_,e.lanes=i,e;case y:return(e=Ms(13,n,t,a)).type=y,e.elementType=y,e.lanes=i,e;case g:return(e=Ms(19,n,t,a)).elementType=g,e.lanes=i,e;case k:return Ys(n,a,i,t);case Y:return(e=Ms(24,n,t,a)).elementType=Y,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case f:s=10;break e;case m:s=9;break e;case p:s=11;break e;case M:s=14;break e;case v:s=16,r=null;break e;case L:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ms(s,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function ks(e,t,n,r){return(e=Ms(7,e,r,t)).lanes=n,e}function Ys(e,t,n,r){return(e=Ms(23,e,r,t)).elementType=k,e.lanes=n,e}function ws(e,t,n){return(e=Ms(6,e,null,t)).lanes=n,e}function Ds(e,t,n){return(t=Ms(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ss(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=K,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),Q&&(this.mutableSourceEagerHydrationData=null)}function Ts(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=H(t))?null:e.stateNode}function xs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Cs(e,t){xs(e,t),(e=e.alternate)&&xs(e,t)}function Ps(e){return null===(e=H(e))?null:e.stateNode}function Hs(){return null}return r.IsThisRendererActing=cs,r.act=function(e){function t(){ps--,Za.current=n,cs.current=r}!1===ys&&(ys=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),ps++;var n=Za.current,r=cs.current;Za.current=!0,cs.current=!0;try{var a=zi(e)}catch(e){throw t(),e}if(null!==a&&"object"==typeof a&&"function"==typeof a.then)return{then:function(e,r){a.then((function(){1<ps||!0===_s&&!0===n?(t(),e()):ms((function(n){t(),n?r(n):e()}))}),(function(e){t(),r(e)}))}};try{1!==ps||!1!==_s&&!1!==n||fs(),t()}catch(e){throw t(),e}return{then:function(e){e()}}},r.attemptContinuousHydration=function(e){13===e.tag&&(ji(e,67108864,Oi()),Cs(e,67108864))},r.attemptHydrationAtCurrentPriority=function(e){if(13===e.tag){var t=Oi(),n=Ei(e);ji(e,n,t),Cs(e,n)}},r.attemptSynchronousHydration=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.hydrate){var n=mt(t.pendingLanes);t.expiredLanes|=n&t.pendingLanes,Ni(t,Gt()),0==(48&ei)&&(mi(),Kt())}break;case 13:var r=Oi();Gi((function(){return ji(e,1,r)})),Cs(e,4)}},r.attemptUserBlockingHydration=function(e){13===e.tag&&(ji(e,4,Oi()),Cs(e,4))},r.batchedEventUpdates=function(e,t){var n=ei;ei|=2;try{return e(t)}finally{0===(ei=n)&&(mi(),Kt())}},r.batchedUpdates=zi,r.createComponentSelector=function(e){return{$$typeof:Na,value:e}},r.createContainer=function(e,t,n){return e=new Ss(e,t,n),t=Ms(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e,fn(t),e},r.createHasPsuedoClassSelector=function(e){return{$$typeof:Ra,value:e}},r.createPortal=function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}},r.createRoleSelector=function(e){return{$$typeof:Wa,value:e}},r.createTestNameSelector=function(e){return{$$typeof:Ia,value:e}},r.createTextSelector=function(e){return{$$typeof:za,value:e}},r.deferredUpdates=function(e){return Vt(97,e)},r.discreteUpdates=function(e,t,n,r,a){var i=ei;ei|=4;try{return Vt(98,e.bind(null,t,n,r,a))}finally{0===(ei=i)&&(mi(),Kt())}},r.findAllNodes=Ka,r.findBoundingRects=function(e,t){if(!ie)throw Error(o(363));t=Ka(e,t),e=[];for(var n=0;n<t.length;n++)e.push(oe(t[n]));for(t=e.length-1;0<t;t--)for(var r=(n=e[t]).x,a=r+n.width,i=n.y,s=i+n.height,d=t-1;0<=d;d--)if(t!==d){var u=e[d],l=u.x,c=l+u.width,h=u.y,_=h+u.height;if(r>=l&&i>=h&&a<=c&&s<=_){e.splice(t,1);break}if(!(r!==l||n.width!==u.width||_<i||h>s)){h>i&&(u.height+=h-i,u.y=i),_<s&&(u.height=s-h),e.splice(t,1);break}if(!(i!==h||n.height!==u.height||c<r||l>a)){l>r&&(u.width+=l-r,u.x=r),c<a&&(u.width=a-l),e.splice(t,1);break}}return e},r.findHostInstance=Ts,r.findHostInstanceWithNoPortals=function(e){return null===(e=function(e){if(!(e=P(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:20===e.tag?e.stateNode.instance:e.stateNode},r.findHostInstanceWithWarning=function(e){return Ts(e)},r.flushControlled=function(e){var t=ei;ei|=1;try{Vt(99,e)}finally{0===(ei=t)&&(mi(),Kt())}},r.flushDiscreteUpdates=function(){0==(49&ei)&&(function(){if(null!==Di){var e=Di;Di=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,Ni(e,Gt())}))}Kt()}(),rs())},r.flushPassiveEffects=rs,r.flushSync=Gi,r.focusWithin=function(e,t){if(!ie)throw Error(o(363));for(t=Ja(e=Ua(e),t),t=Array.from(t),e=0;e<t.length;){var n=t[e++];if(!ue(n)){if(5===n.tag&&ce(n.stateNode))return!0;for(n=n.child;null!==n;)t.push(n),n=n.sibling}}return!1},r.getCurrentUpdateLanePriority=function(){return _t},r.getFindAllNodesFailureDescription=function(e,t){if(!ie)throw Error(o(363));var n=0,r=[];e=[Ua(e),0];for(var a=0;a<e.length;){var i=e[a++],s=e[a++],d=t[s];if((5!==i.tag||!ue(i))&&(Ba(i,d)&&(r.push(Va(d)),++s>n&&(n=s)),s<t.length))for(i=i.child;null!==i;)e.push(i,s),i=i.sibling}if(n<t.length){for(e=[];n<t.length;n++)e.push(Va(t[n]));return"findAllNodes was able to match part of the selector:\n  "+r.join(" > ")+"\n\nNo matching component was found for:\n  "+e.join(" > ")}return null},r.getPublicRootInstance=function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return E(e.child.stateNode);default:return e.child.stateNode}},r.injectIntoDevTools=function(e){if(e={bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:d.ReactCurrentDispatcher,findHostInstanceByFiber:Ps,findFiberByHostInstance:e.findFiberByHostInstance||Hs,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)e=!1;else{var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!t.isDisabled&&t.supportsFiber)try{ct=t.inject(e),ht=t}catch(e){}e=!0}return e},r.observeVisibleRects=function(e,t,n,r){if(!ie)throw Error(o(363));e=Ka(e,t);var a=he(e,n,r).disconnect;return{disconnect:function(){a()}}},r.registerMutableSourceForHydration=function(e,t){var n=t._getVersion;n=n(t._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)},r.runWithPriority=function(e,t){var n=_t;try{return _t=e,t()}finally{_t=n}},r.shouldSuspend=function(){return!1},r.unbatchedUpdates=function(e,t){var n=ei;ei&=-2,ei|=8;try{return e(t)}finally{0===(ei=n)&&(mi(),Kt())}},r.updateContainer=function(e,t,n,r){var a=t.current,i=Oi(),s=Ei(a);e:if(n){t:{if(x(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var d=n;do{switch(d.tag){case 3:d=d.stateNode.context;break t;case 1:if(it(d.type)){d=d.stateNode.__reactInternalMemoizedMergedChildContext;break t}}d=d.return}while(null!==d);throw Error(o(171))}if(1===n.tag){var u=n.type;if(it(u)){n=dt(n,u,d);break e}}n=d}else n=et;return null===t.context?t.context=n:t.pendingContext=n,(t=pn(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),yn(a,t),ji(a,s,i),s},r}},6525:(e,t,n)=>{"use strict";e.exports=n(7287)},751:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=t.io=t.Manager=t.protocol=void 0;const r=n(1775),a=n(7703),i=n(2277);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return i.Socket}});const s=n(3669)("socket.io-client");e.exports=t=d;const o=t.managers={};function d(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=r.url(e),i=n.source,d=n.id,u=n.path,l=o[d]&&u in o[d].nsps;let c;return t.forceNew||t["force new connection"]||!1===t.multiplex||l?(s("ignoring socket cache for %s",i),c=new a.Manager(i,t)):(o[d]||(s("new io instance for %s",i),o[d]=new a.Manager(i,t)),c=o[d]),n.query&&!t.query&&(t.query=n.query),c.socket(n.path,t)}t.io=d;var u=n(5485);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return u.protocol}}),t.connect=d;var l=n(7703);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return l.Manager}})},7703:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const r=n(5983),a=n(2277),i=n(8767),s=n(5485),o=n(5657),d=n(6077),u=n(3010),l=n(3669)("socket.io-client:manager");t.Manager=class extends i{constructor(e,t){super(),this.nsps={},this.subs=[],this.connecting=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new u({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const n=t.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this)}randomizationFactor(e){return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this)}reconnectionDelayMax(e){return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(l("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=r(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const a=o.on(t,"open",(function(){n.onopen(),e&&e()})),i=o.on(t,"error",(t=>{l("error"),n.cleanup(),n._readyState="closed",super.emit("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;l("connect attempt will timeout after %d",e),0===e&&a.destroy();const n=setTimeout((()=>{l("connect attempt timed out after %d",e),a.destroy(),t.close(),t.emit("error",new Error("timeout"))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}return this.subs.push(a),this.subs.push(i),this}connect(e){return this.open(e)}onopen(){l("open"),this.cleanup(),this._readyState="open",super.emit("open");const e=this.engine;this.subs.push(o.on(e,"data",d(this,"ondata"))),this.subs.push(o.on(e,"ping",d(this,"onping"))),this.subs.push(o.on(e,"error",d(this,"onerror"))),this.subs.push(o.on(e,"close",d(this,"onclose"))),this.subs.push(o.on(this.decoder,"decoded",d(this,"ondecoded")))}onping(){super.emit("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){super.emit("packet",e)}onerror(e){l("error",e),super.emit("error",e)}socket(e,t){let n=this.nsps[e];if(!n){n=new a.Socket(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),this._autoConnect&&i()}function i(){~r.connecting.indexOf(n)||r.connecting.push(n)}return n}_destroy(e){const t=this.connecting.indexOf(e);~t&&this.connecting.splice(t,1),this.connecting.length||this._close()}_packet(e){l("writing packet %j",e),e.query&&0===e.type&&(e.nsp+="?"+e.query);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){l("cleanup");const e=this.subs.length;for(let t=0;t<e;t++)this.subs.shift().destroy();this.decoder.destroy()}_close(){l("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){l("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",super.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),super.emit("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();l("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=setTimeout((()=>{e.skipReconnect||(l("attempting reconnect"),super.emit("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(l("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),super.emit("reconnect_error",t)):(l("reconnect success"),e.onreconnect())})))}),t);this.subs.push({destroy:function(){clearTimeout(n)}})}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),super.emit("reconnect",e)}}},5657:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},2277:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const r=n(5485),a=n(8767),i=n(5657),s=n(6077),o=n(3669)("socket.io-client:socket"),d={connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1};t.Socket=class extends a{constructor(e,t,n){super(),this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.flags={},this.io=e,this.nsp=t,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",s(this,"onopen")),i.on(e,"packet",s(this,"onpacket")),i.on(e,"close",s(this,"onclose"))]}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(d.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:r.PacketType.EVENT,data:t,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(o("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++);const a=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||a&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):o("discard packet as the transport is not currently writable"),this.flags={},this}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){o("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:r.PacketType.CONNECT,data:e})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onclose(e){o("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,super.emit("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case r.PacketType.CONNECT:const t=e.data.sid;this.onconnect(t);break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(e);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(e);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const n=new Error(e.data.message);n.data=e.data.data,super.emit("connect_error",n)}}onevent(e){const t=e.data||[];o("emitting event %j",t),null!=e.id&&(o("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(t)}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...a){n||(n=!0,o("sending ack %j",a),t.packet({type:r.PacketType.ACK,id:e,data:a}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(o("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):o("bad ack %s",e.id)}onconnect(e){this.id=e,this.connected=!0,this.disconnected=!1,super.emit("connect"),this.emitBuffered()}emitBuffered(){for(let e=0;e<this.receiveBuffer.length;e++)this.emitEvent(this.receiveBuffer[e]);this.receiveBuffer=[];for(let e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]}ondisconnect(){o("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){if(this.subs){for(let e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io._destroy(this)}disconnect(){return this.connected&&(o("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}},1775:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const r=n(4187),a=n(3669)("socket.io-client:url");t.url=function(e,t){let n=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(a("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),a("parse %s",e),n=r(e)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port,n.href=n.protocol+"://"+i+(t&&t.port===n.port?"":":"+n.port),n}},3669:(e,t,n)=>{t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,a=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(a=r))})),t.splice(a,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(9231)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9231:(e,t,n)=>{e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function s(...e){if(!s.enabled)return;const t=s,a=Number(new Date),i=a-(n||a);t.diff=i,t.prev=n,t.curr=a,n=a,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,a)=>{if("%%"===n)return n;o++;const i=r.formatters[a];if("function"==typeof i){const r=e[o];n=i.call(t,r),e.splice(o,1),o--}return n})),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return s.namespace=e,s.enabled=r.enabled(e),s.useColors=r.useColors(),s.color=t(e),s.destroy=a,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function a(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function s(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(s),...r.skips.map(s).map((e=>"-"+e))].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),a=n.length;for(t=0;t<a;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(7824),Object.keys(e).forEach((t=>{r[t]=e[t]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},5615:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(751);r.Manager;const a=r},7719:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(2986);function a(e,t){if(!e)return e;if(r.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=a(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)e.hasOwnProperty(r)&&(n[r]=a(e[r],t));return n}return e}function i(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=i(e[n],t);else if("object"==typeof e)for(const n in e)e.hasOwnProperty(n)&&(e[n]=i(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=a(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=i(e.data,t),e.attachments=void 0,e}},5485:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(8767),a=n(7719),i=n(2986),s=n(1618)("socket.io-parser");var o;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(o=t.PacketType||(t.PacketType={})),t.Encoder=class{encode(e){return s("encoding packet %j",e),e.type!==o.EVENT&&e.type!==o.ACK||!i.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===o.EVENT?o.BINARY_EVENT:o.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==o.BINARY_EVENT&&e.type!==o.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),s("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=a.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class d extends r{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===o.BINARY_EVENT||t.type===o.BINARY_ACK?(this.reconstructor=new u(t),0===t.attachments&&super.emit("decoded",t)):super.emit("decoded",t);else{if(!i.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emit("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===o[n.type])throw new Error("unknown packet type "+n.type);if(n.type===o.BINARY_EVENT||n.type===o.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const a=e.substring(r,t);if(a!=Number(a)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(a)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!d.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return s("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case o.CONNECT:return"object"==typeof t;case o.DISCONNECT:return void 0===t;case o.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case o.EVENT:case o.BINARY_EVENT:return Array.isArray(t)&&"string"==typeof t[0];case o.ACK:case o.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=d;class u{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=a.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function s(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||a&&e instanceof Blob||i&&e instanceof File}t.isBinary=s,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(s(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},1618:(e,t,n)=>{t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,a=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(a=r))})),t.splice(a,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(5224)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},5224:(e,t,n)=>{e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function s(...e){if(!s.enabled)return;const t=s,a=Number(new Date),i=a-(n||a);t.diff=i,t.prev=n,t.curr=a,n=a,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,a)=>{if("%%"===n)return n;o++;const i=r.formatters[a];if("function"==typeof i){const r=e[o];n=i.call(t,r),e.splice(o,1),o--}return n})),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return s.namespace=e,s.enabled=r.enabled(e),s.useColors=r.useColors(),s.color=t(e),s.destroy=a,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function a(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function s(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(s),...r.skips.map(s).map((e=>"-"+e))].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),a=n.length;for(t=0;t<a;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(7824),Object.keys(e).forEach((t=>{r[t]=e[t]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},2281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},a=0,i=0;function s(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function o(){var e=s(+new Date);return e!==t?(a=0,t=e):e+"."+s(a++)}for(;i<64;i++)r[n[i]]=i;o.encode=s,o.decode=function(e){var t=0;for(i=0;i<e.length;i++)t=64*t+r[e.charAt(i)];return t},e.exports=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,