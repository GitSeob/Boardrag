(self.webpackChunk_42board_front=self.webpackChunk_42board_front||[]).push([[902],{8100:(e,t,r)=>{"use strict";r.d(t,{ZP:()=>P,g_:()=>I});var n=r(7294),i=Object.prototype.hasOwnProperty,o=new WeakMap,u=0;const a={isOnline:function(){return void 0===navigator.onLine||navigator.onLine},isDocumentVisible:function(){return"undefined"==typeof document||void 0===document.visibilityState||"hidden"!==document.visibilityState},fetcher:function(e){return fetch(e).then((function(e){return e.json()}))}};var c=new(function(){function e(e){void 0===e&&(e={}),this.__cache=new Map(Object.entries(e)),this.__listeners=[]}return e.prototype.get=function(e){var t=this.serializeKey(e)[0];return this.__cache.get(t)},e.prototype.set=function(e,t){var r=this.serializeKey(e)[0];this.__cache.set(r,t),this.notify()},e.prototype.keys=function(){return Array.from(this.__cache.keys())},e.prototype.has=function(e){var t=this.serializeKey(e)[0];return this.__cache.has(t)},e.prototype.clear=function(){this.__cache.clear(),this.notify()},e.prototype.delete=function(e){var t=this.serializeKey(e)[0];this.__cache.delete(t),this.notify()},e.prototype.serializeKey=function(e){var t=null;if("function"==typeof e)try{e=e()}catch(t){e=""}return Array.isArray(e)?(t=e,e=function(e){if(!e.length)return"";for(var t="arg",r=0;r<e.length;++r){var n=void 0;null===e[r]||"object"!=typeof e[r]&&"function"!=typeof e[r]?n="string"==typeof e[r]?'"'+e[r]+'"':String(e[r]):o.has(e[r])?n=o.get(e[r]):(n=u,o.set(e[r],u++)),t+="@"+n}return t}(e)):e=String(e||""),[e,t,e?"err@"+e:"",e?"validating@"+e:""]},e.prototype.subscribe=function(e){var t=this;if("function"!=typeof e)throw new Error("Expected the listener to be a function.");var r=!0;return this.__listeners.push(e),function(){if(r){r=!1;var n=t.__listeners.indexOf(e);n>-1&&(t.__listeners[n]=t.__listeners[t.__listeners.length-1],t.__listeners.length--)}}},e.prototype.notify=function(){for(var e=0,t=this.__listeners;e<t.length;e++)(0,t[e])()},e}()),s="undefined"!=typeof window&&navigator.connection&&-1!==["slow-2g","2g"].indexOf(navigator.connection.effectiveType);const l={onLoadingSlow:function(){},onSuccess:function(){},onError:function(){},onErrorRetry:function(e,t,r,n,i){if(r.isDocumentVisible()&&!("number"==typeof r.errorRetryCount&&i.retryCount>r.errorRetryCount)){var o=Math.min(i.retryCount||0,8),u=~~((Math.random()+.5)*(1<<o))*r.errorRetryInterval;setTimeout(n,u,i)}},errorRetryInterval:1e3*(s?10:5),focusThrottleInterval:5e3,dedupingInterval:2e3,loadingTimeout:1e3*(s?5:3),refreshInterval:0,revalidateOnFocus:!0,revalidateOnReconnect:!0,refreshWhenHidden:!1,refreshWhenOffline:!1,shouldRetryOnError:!0,suspense:!1,compare:function e(t,r){var n,o;if(t===r)return!0;if(t&&r&&(n=t.constructor)===r.constructor){if(n===Date)return t.getTime()===r.getTime();if(n===RegExp)return t.toString()===r.toString();if(n===Array){if((o=t.length)===r.length)for(;o--&&e(t[o],r[o]););return-1===o}if(!n||"object"==typeof t){for(n in o=0,t){if(i.call(t,n)&&++o&&!i.call(r,n))return!1;if(!(n in r)||!e(t[n],r[n]))return!1}return Object.keys(r).length===o}}return t!=t&&r!=r},fetcher:a.fetcher,isOnline:a.isOnline,isDocumentVisible:a.isDocumentVisible};var f=(0,n.createContext)({});f.displayName="SWRConfigContext";const d=f;var v=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function u(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,a)}c((n=n.apply(e,t||[])).next())}))},h=function(e,t){var r,n,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,n=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=t.call(e,u)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},p="undefined"==typeof window,y=p?null:window.requestIdleCallback||function(e){return setTimeout(e,1)},g=p?n.useEffect:n.useLayoutEffect,b={},m={},w={},O={},_={},S={},k={};if(!p&&window.addEventListener){var x=function(e){if(l.isDocumentVisible()&&l.isOnline())for(var t in e)e[t][0]&&e[t][0]()};window.addEventListener("visibilitychange",(function(){return x(w)}),!1),window.addEventListener("focus",(function(){return x(w)}),!1),window.addEventListener("online",(function(){return x(O)}),!1)}var R=function(e,t){void 0===t&&(t=!0);var r=c.serializeKey(e),n=r[0],i=r[2],o=r[3];if(!n)return Promise.resolve();var u=_[n];if(n&&u){for(var a=c.get(n),s=c.get(i),l=c.get(o),f=[],d=0;d<u.length;++d)f.push(u[d](t,a,s,l,d>0));return Promise.all(f).then((function(){return c.get(n)}))}return Promise.resolve(c.get(n))},E=function(e,t,r,n){var i=_[e];if(e&&i)for(var o=0;o<i.length;++o)i[o](!1,t,r,n)},V=function(e,t,r){return void 0===r&&(r=!0),v(void 0,void 0,void 0,(function(){var n,i,o,u,a,s,l,f,d,v,p,y;return h(this,(function(h){switch(h.label){case 0:if(n=c.serializeKey(e),i=n[0],o=n[2],!i)return[2];if(void 0===t)return[2,R(e,r)];if(S[i]=Date.now()-1,k[i]=0,u=S[i],a=m[i],!t||"function"!=typeof t)return[3,5];h.label=1;case 1:return h.trys.push([1,3,,4]),[4,t(c.get(i))];case 2:return s=h.sent(),[3,4];case 3:return f=h.sent(),l=f,[3,4];case 4:return[3,11];case 5:if(!t||"function"!=typeof t.then)return[3,10];h.label=6;case 6:return h.trys.push([6,8,,9]),[4,t];case 7:return s=h.sent(),[3,9];case 8:return d=h.sent(),l=d,[3,9];case 9:return[3,11];case 10:s=t,h.label=11;case 11:if(u!==S[i]||a!==m[i]){if(l)throw l;return[2,s]}if(void 0!==s&&c.set(i,s),c.set(o,l),k[i]=Date.now()-1,v=_[i]){for(p=[],y=0;y<v.length;++y)p.push(v[y](!!r,s,l,void 0,y>0));return[2,Promise.all(p).then((function(){if(l)throw l;return c.get(i)}))]}if(l)throw l;return[2,s]}}))}))};d.Provider;const j=function(){for(var e=this,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,o,u={};t.length>=1&&(i=t[0]),t.length>2?(o=t[1],u=t[2]):"function"==typeof t[1]?o=t[1]:"object"==typeof t[1]&&(u=t[1]);var a=c.serializeKey(i),s=a[0],f=a[1],p=a[2],x=a[3];u=Object.assign({},l,(0,n.useContext)(d),u);var R=(0,n.useRef)(u);g((function(){R.current=u})),void 0===o&&(o=u.fetcher);var j=function(){var e=c.get(s);return void 0===e?u.initialData:e},C=j(),T=c.get(p),z=!!c.get(x),D=(0,n.useRef)({data:!1,error:!1,isValidating:!1}),I=(0,n.useRef)({data:C,error:T,isValidating:z});(0,n.useDebugValue)(I.current.data);var P=(0,n.useState)(null)[1],K=(0,n.useCallback)((function(e){var t=!1;for(var r in e)I.current[r]!==e[r]&&(I.current[r]=e[r],D.current[r]&&(t=!0));if(t||u.suspense){if(L.current)return;P({})}}),[]),L=(0,n.useRef)(!1),W=(0,n.useRef)(s),M=(0,n.useRef)({emit:function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];L.current||(t=R.current)[e].apply(t,r)}}),A=(0,n.useCallback)((function(e,t){return V(W.current,e,t)}),[]),H=function(e,t){t&&(e[s]?e[s].push(t):e[s]=[t])},F=function(e,t){if(e[s]){var r=e[s],n=r.indexOf(t);n>=0&&(r[n]=r[r.length-1],r.pop())}},G=(0,n.useCallback)((function(t){return void 0===t&&(t={}),v(e,void 0,void 0,(function(){var e,r,n,i,a,l,d;return h(this,(function(v){switch(v.label){case 0:if(!s||!o)return[2,!1];if(L.current)return[2,!1];t=Object.assign({dedupe:!1},t),e=!0,r=void 0!==b[s]&&t.dedupe,v.label=1;case 1:return v.trys.push([1,6,,7]),K({isValidating:!0}),c.set(x,!0),r||E(s,I.current.data,I.current.error,!0),n=void 0,i=void 0,r?(i=m[s],[4,b[s]]):[3,3];case 2:return n=v.sent(),[3,5];case 3:return u.loadingTimeout&&!c.get(s)&&setTimeout((function(){e&&M.current.emit("onLoadingSlow",s,u)}),u.loadingTimeout),b[s]=null!==f?o.apply(void 0,f):o(s),m[s]=i=Date.now(),[4,b[s]];case 4:n=v.sent(),setTimeout((function(){delete b[s],delete m[s]}),u.dedupingInterval),M.current.emit("onSuccess",n,s,u),v.label=5;case 5:return m[s]>i||S[s]&&(i<=S[s]||i<=k[s]||0===k[s])?(K({isValidating:!1}),[2,!1]):(c.set(s,n),c.set(p,void 0),c.set(x,!1),a={isValidating:!1},void 0!==I.current.error&&(a.error=void 0),u.compare(I.current.data,n)||(a.data=n),K(a),r||E(s,n,a.error,!1),[3,7]);case 6:return l=v.sent(),delete b[s],delete m[s],c.set(p,l),I.current.error!==l&&(K({isValidating:!1,error:l}),r||E(s,void 0,l,!1)),M.current.emit("onError",l,s,u),u.shouldRetryOnError&&(d=(t.retryCount||0)+1,M.current.emit("onErrorRetry",l,s,u,G,Object.assign({dedupe:!0},t,{retryCount:d}))),[3,7];case 7:return e=!1,[2,!0]}}))}))}),[s]);g((function(){if(s){L.current=!1;var e=I.current.data,t=j();W.current!==s&&(W.current=s),u.compare(e,t)||K({data:t});var r=function(){return G({dedupe:!0})};(u.revalidateOnMount||!u.initialData&&void 0===u.revalidateOnMount)&&(void 0!==t?y(r):r());var n=!1,i=function(){!n&&R.current.revalidateOnFocus&&(n=!0,r(),setTimeout((function(){return n=!1}),R.current.focusThrottleInterval))},o=function(){R.current.revalidateOnReconnect&&r()},a=function(e,t,n,i,o){void 0===e&&(e=!0),void 0===o&&(o=!0);var a={},c=!1;return void 0===t||u.compare(I.current.data,t)||(a.data=t,c=!0),I.current.error!==n&&(a.error=n,c=!0),void 0!==i&&I.current.isValidating!==i&&(a.isValidating=i,c=!0),c&&K(a),!!e&&(o?r():G())};return H(w,i),H(O,o),H(_,a),function(){K=function(){return null},L.current=!0,F(w,i),F(O,o),F(_,a)}}}),[s,G]),g((function(){var t=null,r=function(){return v(e,void 0,void 0,(function(){return h(this,(function(e){switch(e.label){case 0:return I.current.error||!R.current.refreshWhenHidden&&!R.current.isDocumentVisible()||!R.current.refreshWhenOffline&&!R.current.isOnline()?[3,2]:[4,G({dedupe:!0})];case 1:e.sent(),e.label=2;case 2:return R.current.refreshInterval&&!I.current.error&&(t=setTimeout(r,R.current.refreshInterval)),[2]}}))}))};return R.current.refreshInterval&&(t=setTimeout(r,R.current.refreshInterval)),function(){t&&clearTimeout(t)}}),[u.refreshInterval,u.refreshWhenHidden,u.refreshWhenOffline,G]);var q=(0,n.useMemo)((function(){var e={revalidate:G,mutate:A};return Object.defineProperties(e,{error:{get:function(){return D.current.error=!0,W.current===s?I.current.error:T},enumerable:!0},data:{get:function(){return D.current.data=!0,W.current===s?I.current.data:C},enumerable:!0},isValidating:{get:function(){return D.current.isValidating=!0,I.current.isValidating},enumerable:!0}}),e}),[G]);if(u.suspense){var N=c.get(s),Z=c.get(p);if(void 0===N&&(N=C),void 0===Z&&(Z=T),void 0===N&&void 0===Z){if(b[s]||G(),b[s]&&"function"==typeof b[s].then)throw b[s];N=b[s]}if(void 0===N&&Z)throw Z;return{error:Z,data:N,revalidate:G,mutate:A,isValidating:I.current.isValidating}}return q};var C=function(){return(C=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},T=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function u(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,a)}c((n=n.apply(e,t||[])).next())}))},z=function(e,t){var r,n,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,n=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=t.call(e,u)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},D=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r};function I(){for(var e=this,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,o,u={};t.length>=1&&(i=t[0]),t.length>2?(o=t[1],u=t[2]):"function"==typeof t[1]?o=t[1]:"object"==typeof t[1]&&(u=t[1]);var a=(u=Object.assign({},l,(0,n.useContext)(d),u)).initialSize,s=void 0===a?1:a,f=u.revalidateAll,v=void 0!==f&&f,h=u.persistSize,p=void 0!==h&&h,y=u.fetcher,g=D(u,["initialSize","revalidateAll","persistSize","fetcher"]);void 0===o&&(o=y);var b=null;try{b=c.serializeKey(i(0,null))[0]}catch(e){}var m=(0,n.useState)(!1)[1],w=null;b&&(w="context@"+b);var O,_=null;b&&(_="size@"+b,O=c.get(_));var S=(0,n.useRef)(O||s),k=(0,n.useRef)(!1);(0,n.useEffect)((function(){k.current?p||(S.current=s):k.current=!0}),[b]);var x=j(b?["many",b]:null,(function(){return T(e,void 0,void 0,(function(){var e,t,r,n,a,s,l,f,d,h;return z(this,(function(p){switch(p.label){case 0:e=c.get(w)||{},t=e.originalData,r=e.force,n=[],a=null,s=0,p.label=1;case 1:return s<S.current?(l=c.serializeKey(i(s,a)),f=l[0],d=l[1],f?(h=c.get(f),v||r||void 0===r&&0===s||t&&!u.compare(t[s],h)||void 0===h?null===d?[3,3]:[4,o.apply(void 0,d)]:[3,6]):[3,8]):[3,8];case 2:return h=p.sent(),[3,5];case 3:return[4,o(f)];case 4:h=p.sent(),p.label=5;case 5:c.set(f,h),p.label=6;case 6:n.push(h),a=h,p.label=7;case 7:return++s,[3,1];case 8:return c.delete(w),[2,n]}}))}))}),g),R=(0,n.useRef)(x.data);(0,n.useEffect)((function(){R.current=x.data}),[x.data]);var E=(0,n.useCallback)((function(e,t){if(void 0===t&&(t=!0),t&&void 0!==e){var r=R.current;c.set(w,{originalData:r,force:!1})}else t&&c.set(w,{force:!0});return x.mutate(e,t)}),[x.mutate,w]),V=S.current,I=(0,n.useCallback)((function(e){return"function"==typeof e?S.current=e(S.current):"number"==typeof e&&(S.current=e),c.set(_,S.current),m((function(e){return!e})),E((function(e){return e}))}),[E,_]);return C(C({},x),{mutate:E,size:V,setSize:I})}const P=j}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,