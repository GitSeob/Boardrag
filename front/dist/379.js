(self.webpackChunk_42board_front=self.webpackChunk_42board_front||[]).push([[379],{2033:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var o=r(7294),n=r(5366);const i=r(9911).F4`
	from {
		transform: rotate(0);
	}
	to {
		transform: rotate(359deg);
	}
`,a=(0,n.Z)("div",{target:"ekojj7n2",label:"LoadingCircleContainer"})({name:"8lbyj9",styles:"width:300px;height:300px;display:flex;justify-content:center;align-items:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)"}),l=(0,n.Z)("div",{target:"ekojj7n1",label:"LoadingCircleBox"})("width:150px;height:150px;padding:3px;display:flex;justify-content:center;align-items:center;border-radius:50%;background:rgb(63, 249, 200);background:linear-gradient(0deg, rgba(63, 249, 200, 0.1) 33%, rgba(63, 249, 220, 1) 100%);animation:",i," 0.8s linear 0s infinite;"),c=(0,n.Z)("div",{target:"ekojj7n0",label:"LoadingCircleCore"})({name:"1sudnkc",styles:"width:100%;height:100%;background:#001c29;border-radius:50%"}),s=()=>o.createElement(a,null,o.createElement(l,null,o.createElement(c,null)))},9379:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var o=r(7294),n=r(8100),i=r(129),a=r.n(i),l=r(3564),c=r(5366);const s=r(9911).F4`
	from {
		transform: translate(-50%, -30%);
		opacity: 0;
	}
	to {
		transform: translate(-50%, -50%);
		opacity: 1;
	}
`,u=(0,c.Z)("div",{target:"eoptdla1",label:"LoginContainer"})("background:rgba(0, 0, 0, 0.3);padding:1rem;width:fit-content;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);animation:",s," 0.5s ease-in-out 1;color:#fff;&>img{height:4rem;margin-left:-1.8rem;margin-bottom:1rem;}&>h1{text-align:center;margin-bottom:1rem;}&>p{color:#ff7777;font-size:10px;margin-top:0.5rem;text-align:center;}"),f=(0,c.Z)("a",{target:"eoptdla0",label:"LoginButton"})({name:"lvc5fg",styles:"position:relative;display:flex;margin:0 auto;width:fit-content;img{height:40px;}"});var p=r(3653),d=r.n(p),m=r(5977),y=r(2033);const h=()=>{const{data:e,revalidate:t}=(0,n.ZP)("/api/auth",l.Z),[r,i]=o.useState(""),c=a().parse(location.search,{ignoreQueryPrefix:!0});return location.search&&!1===e&&!r&&!e&&c.code?(d().post("/api/auth",{codeValue:c.code,trashValue:"123"},{withCredentials:!0}).then((e=>(t(),e.data))).catch((e=>{i(e.response.data.reason)})),o.createElement(y.Z,null)):e?c.prev?o.createElement(m.l_,{to:""+c.prev}):o.createElement(m.l_,{to:"/main"}):o.createElement(u,null,o.createElement("img",{src:"/public/boardrag.svg"}),o.createElement(f,{href:"https://accounts.google.com/o/oauth2/auth?client_id=480747610420-0q3f8siln71vrnvd9m7o251nu50f39r6.apps.googleusercontent.com&redirect_uri=https://42board.com/auth&response_type=code&scope=https://www.googleapis.com/auth/userinfo.email&approval_prompt=force&access_type=offline",className:"google"},o.createElement("img",{src:"/public/btn_google_signin_light_normal_web@2x.png"})),r&&o.createElement("p",null,r))}},3564:(e,t,r)=>{"use strict";r.d(t,{Z:()=>i});var o=r(3653),n=r.n(o);const i=e=>n().get(e,{withCredentials:!0}).then((e=>e.data))},5798:(e,t,r)=>{"use strict";var o=String.prototype.replace,n=/%20/g,i=r(2769),a={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=i.assign({default:a.RFC3986,formatters:{RFC1738:function(e){return o.call(e,n,"+")},RFC3986:function(e){return String(e)}}},a)},129:(e,t,r)=>{"use strict";var o=r(8261),n=r(5235),i=r(5798);e.exports={formats:i,parse:n,stringify:o}},5235:(e,t,r)=>{"use strict";var o=r(2769),n=Object.prototype.hasOwnProperty,i=Array.isArray,a={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:o.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},l=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},s=function(e,t,r,o){if(e){var i=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,l=r.depth>0&&/(\[[^[\]]*])/.exec(i),s=l?i.slice(0,l.index):i,u=[];if(s){if(!r.plainObjects&&n.call(Object.prototype,s)&&!r.allowPrototypes)return;u.push(s)}for(var f=0;r.depth>0&&null!==(l=a.exec(i))&&f<r.depth;){if(f+=1,!r.plainObjects&&n.call(Object.prototype,l[1].slice(1,-1))&&!r.allowPrototypes)return;u.push(l[1])}return l&&u.push("["+i.slice(l.index)+"]"),function(e,t,r,o){for(var n=o?t:c(t,r),i=e.length-1;i>=0;--i){var a,l=e[i];if("[]"===l&&r.parseArrays)a=[].concat(n);else{a=r.plainObjects?Object.create(null):{};var s="["===l.charAt(0)&&"]"===l.charAt(l.length-1)?l.slice(1,-1):l,u=parseInt(s,10);r.parseArrays||""!==s?!isNaN(u)&&l!==s&&String(u)===s&&u>=0&&r.parseArrays&&u<=r.arrayLimit?(a=[])[u]=n:a[s]=n:a={0:n}}n=a}return n}(u,t,r,o)}};e.exports=function(e,t){var r=function(e){if(!e)return a;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset;return{allowDots:void 0===e.allowDots?a.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||o.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:a.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return r.plainObjects?Object.create(null):{};for(var u="string"==typeof e?function(e,t){var r,s={},u=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,p=u.split(t.delimiter,f),d=-1,m=t.charset;if(t.charsetSentinel)for(r=0;r<p.length;++r)0===p[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[r]?m="utf-8":"utf8=%26%2310003%3B"===p[r]&&(m="iso-8859-1"),d=r,r=p.length);for(r=0;r<p.length;++r)if(r!==d){var y,h,g=p[r],b=g.indexOf("]="),v=-1===b?g.indexOf("="):b+1;-1===v?(y=t.decoder(g,a.decoder,m,"key"),h=t.strictNullHandling?null:""):(y=t.decoder(g.slice(0,v),a.decoder,m,"key"),h=o.maybeMap(c(g.slice(v+1),t),(function(e){return t.decoder(e,a.decoder,m,"value")}))),h&&t.interpretNumericEntities&&"iso-8859-1"===m&&(h=l(h)),g.indexOf("[]=")>-1&&(h=i(h)?[h]:h),n.call(s,y)?s[y]=o.combine(s[y],h):s[y]=h}return s}(e,r):e,f=r.plainObjects?Object.create(null):{},p=Object.keys(u),d=0;d<p.length;++d){var m=p[d],y=s(m,u[m],r,"string"==typeof e);f=o.merge(f,y,r)}return o.compact(f)}},8261:(e,t,r)=>{"use strict";var o=r(2769),n=r(5798),i=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},l=Array.isArray,c=Array.prototype.push,s=function(e,t){c.apply(e,l(t)?t:[t])},u=Date.prototype.toISOString,f=n.default,p={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:f,formatter:n.formatters[f],indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},d=function e(t,r,n,i,a,c,u,f,d,m,y,h,g){var b,v=t;if("function"==typeof u?v=u(r,v):v instanceof Date?v=m(v):"comma"===n&&l(v)&&(v=o.maybeMap(v,(function(e){return e instanceof Date?m(e):e})).join(",")),null===v){if(i)return c&&!h?c(r,p.encoder,g,"key"):r;v=""}if("string"==typeof(b=v)||"number"==typeof b||"boolean"==typeof b||"symbol"==typeof b||"bigint"==typeof b||o.isBuffer(v))return c?[y(h?r:c(r,p.encoder,g,"key"))+"="+y(c(v,p.encoder,g,"value"))]:[y(r)+"="+y(String(v))];var j,w=[];if(void 0===v)return w;if(l(u))j=u;else{var O=Object.keys(v);j=f?O.sort(f):O}for(var x=0;x<j.length;++x){var k=j[x],E=v[k];if(!a||null!==E){var N=l(v)?"function"==typeof n?n(r,k):r:r+(d?"."+k:"["+k+"]");s(w,e(E,N,n,i,a,c,u,f,d,m,y,h,g))}}return w};e.exports=function(e,t){var r,o=e,c=function(e){if(!e)return p;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||p.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=n.default;if(void 0!==e.format){if(!i.call(n.formatters,e.format))throw new TypeError("Unknown format option provided.");r=e.format}var o=n.formatters[r],a=p.filter;return("function"==typeof e.filter||l(e.filter))&&(a=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:p.addQueryPrefix,allowDots:void 0===e.allowDots?p.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:p.charsetSentinel,delimiter:void 0===e.delimiter?p.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:p.encode,encoder:"function"==typeof e.encoder?e.encoder:p.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:p.encodeValuesOnly,filter:a,formatter:o,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:p.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:p.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:p.strictNullHandling}}(t);"function"==typeof c.filter?o=(0,c.filter)("",o):l(c.filter)&&(r=c.filter);var u,f=[];if("object"!=typeof o||null===o)return"";u=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var m=a[u];r||(r=Object.keys(o)),c.sort&&r.sort(c.sort);for(var y=0;y<r.length;++y){var h=r[y];c.skipNulls&&null===o[h]||s(f,d(o[h],h,m,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.formatter,c.encodeValuesOnly,c.charset))}var g=f.join(c.delimiter),b=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),g.length>0?b+g:""}},2769:e=>{"use strict";var t=Object.prototype.hasOwnProperty,r=Array.isArray,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),n=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},o=0;o<e.length;++o)void 0!==e[o]&&(r[o]=e[o]);return r};e.exports={arrayToObject:n,assign:function(e,t){return Object.keys(t).reduce((function(e,r){return e[r]=t[r],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],o=[],n=0;n<t.length;++n)for(var i=t[n],a=i.obj[i.prop],l=Object.keys(a),c=0;c<l.length;++c){var s=l[c],u=a[s];"object"==typeof u&&null!==u&&-1===o.indexOf(u)&&(t.push({obj:a,prop:s}),o.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),o=t.obj[t.prop];if(r(o)){for(var n=[],i=0;i<o.length;++i)void 0!==o[i]&&n.push(o[i]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,r){var o=e.replace(/\+/g," ");if("iso-8859-1"===r)return o.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(o)}catch(e){return o}},encode:function(e,t,r){if(0===e.length)return e;var n=e;if("symbol"==typeof e?n=Symbol.prototype.toString.call(e):"string"!=typeof e&&(n=String(e)),"iso-8859-1"===r)return escape(n).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var i="",a=0;a<n.length;++a){var l=n.charCodeAt(a);45===l||46===l||95===l||126===l||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122?i+=n.charAt(a):l<128?i+=o[l]:l<2048?i+=o[192|l>>6]+o[128|63&l]:l<55296||l>=57344?i+=o[224|l>>12]+o[128|l>>6&63]+o[128|63&l]:(a+=1,l=65536+((1023&l)<<10|1023&n.charCodeAt(a)),i+=o[240|l>>18]+o[128|l>>12&63]+o[128|l>>6&63]+o[128|63&l])}return i},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(r(e)){for(var o=[],n=0;n<e.length;n+=1)o.push(t(e[n]));return o}return t(e)},merge:function e(o,i,a){if(!i)return o;if("object"!=typeof i){if(r(o))o.push(i);else{if(!o||"object"!=typeof o)return[o,i];(a&&(a.plainObjects||a.allowPrototypes)||!t.call(Object.prototype,i))&&(o[i]=!0)}return o}if(!o||"object"!=typeof o)return[o].concat(i);var l=o;return r(o)&&!r(i)&&(l=n(o,a)),r(o)&&r(i)?(i.forEach((function(r,n){if(t.call(o,n)){var i=o[n];i&&"object"==typeof i&&r&&"object"==typeof r?o[n]=e(i,r,a):o.push(r)}else o[n]=r})),o):Object.keys(i).reduce((function(r,o){var n=i[o];return t.call(r,o)?r[o]=e(r[o],n,a):r[o]=n,r}),l)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,