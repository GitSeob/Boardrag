/*! For license information please see 379.js.LICENSE.txt */
(self.webpackChunk_42board_front=self.webpackChunk_42board_front||[]).push([[379],{2033:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7294),s=r(5366);const o=r(9911).F4`
    from {
        transform: rotate(0);
    }
    to {
        transform: rotate(359deg);
    }
`,a=(0,s.Z)("div",{target:"ekojj7n2",label:"LoadingCircleContainer"})({name:"8lbyj9",styles:"width:300px;height:300px;display:flex;justify-content:center;align-items:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)"}),h=(0,s.Z)("div",{target:"ekojj7n1",label:"LoadingCircleBox"})("width:150px;height:150px;padding:3px;display:flex;justify-content:center;align-items:center;border-radius:50%;background:rgb(63, 249, 200);background:linear-gradient(0deg, rgba(63, 249, 200, 0.1) 33%, rgba(63, 249, 220, 1) 100%);animation:",o," .8s linear 0s infinite;"),i=(0,s.Z)("div",{target:"ekojj7n0",label:"LoadingCircleCore"})({name:"1sudnkc",styles:"width:100%;height:100%;background:#001c29;border-radius:50%"}),l=()=>n.createElement(a,null,n.createElement(h,null,n.createElement(i,null)))},9379:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>d});var n=r(7294),s=r(8100),o=r(8575),a=r(3564),h=r(5366);const i=r(9911).F4`
    from {
        transform: translate(-50%, -30%);
        opacity: 0;
    }
    to {
        transform: translate(-50%, -50%);
        opacity: 1;
    }
`,l=(0,h.Z)("div",{target:"eoptdla1",label:"LoginContainer"})("background:rgba(0, 0, 0, .3);padding:1rem;width:fit-content;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);animation:",i," .5s ease-in-out 1;color:#fff;min-width:300px;&>h1{text-align:center;margin-bottom:1rem;}"),c=(0,h.Z)("a",{target:"eoptdla0",label:"LoginButton"})({name:"fk0ebp",styles:"background:#090a0f;color:#fff;padding:.5rem 3.5rem;display:inline-flex;position:relative;cursor:pointer;width:100%;align-items:center;justify-content:center;font-weight:500;&:hover{box-shadow:0 0 4px 1px rgba(255, 255, 255, 0.3);}&>img{position:absolute;left:1rem;top:50%;transform:translateY(-50%);height:1.5rem;}"});var u=r(3653),p=r.n(u),f=r(5977),m=r(2033);const d=()=>{const t=o.Qc(window.location.href).query?.replace("code=",""),{data:e,revalidate:r}=(0,s.ZP)("/api/auth",a.Z);return e?n.createElement(f.l_,{to:"/board"}):!e&&document&&document.cookie?n.createElement(m.Z,null):(!e&&t&&p().post("/api/auth",{codeValue:t,trashValue:"123"},{withCredentials:!0}).then((t=>(r(),t.data))).catch((t=>{console.log(t)})),e?n.createElement(f.l_,{to:"/board"}):e||t?n.createElement(m.Z,null):n.createElement(l,null,n.createElement("h1",null,"Login"),n.createElement(c,{href:"https://api.intra.42.fr/oauth/authorize?client_id=14d2cc7b2ea3fd84090c4860715a586213c20b35cc9b5a71895405c23b703303&redirect_uri=https%3A%2F%2F42board.com%2Fauth&response_type=code"},n.createElement("img",{src:"/public/42_logo.svg"}),"Login with 42api")))}},3564:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(3653),s=r.n(n);const o=t=>s().get(t,{withCredentials:!0}).then((t=>t.data))},2587:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,r,n,s){r=r||"&",n=n||"=";var o={};if("string"!=typeof t||0===t.length)return o;var a=/\+/g;t=t.split(r);var h=1e3;s&&"number"==typeof s.maxKeys&&(h=s.maxKeys);var i=t.length;h>0&&i>h&&(i=h);for(var l=0;l<i;++l){var c,u,p,f,m=t[l].replace(a,"%20"),d=m.indexOf(n);d>=0?(c=m.substr(0,d),u=m.substr(d+1)):(c=m,u=""),p=decodeURIComponent(c),f=decodeURIComponent(u),e(o,p)?Array.isArray(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o}},2361:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,r,n,s){return r=r||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(s){var o=encodeURIComponent(e(s))+n;return Array.isArray(t[s])?t[s].map((function(t){return o+encodeURIComponent(e(t))})).join(r):o+encodeURIComponent(e(t[s]))})).join(r):s?encodeURIComponent(e(s))+n+encodeURIComponent(e(t)):""}},7673:(t,e,r)=>{"use strict";e.decode=e.parse=r(2587),e.encode=e.stringify=r(2361)},2511:function(t,e,r){var n;t=r.nmd(t),function(s){e&&e.nodeType,t&&t.nodeType;var o="object"==typeof r.g&&r.g;o.global!==o&&o.window!==o&&o.self;var a,h=2147483647,i=36,l=/^xn--/,c=/[^\x20-\x7E]/,u=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,m=String.fromCharCode;function d(t){throw RangeError(p[t])}function g(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function v(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+g((t=t.replace(u,".")).split("."),e).join(".")}function b(t){for(var e,r,n=[],s=0,o=t.length;s<o;)(e=t.charCodeAt(s++))>=55296&&e<=56319&&s<o?56320==(64512&(r=t.charCodeAt(s++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),s--):n.push(e);return n}function y(t){return g(t,(function(t){var e="";return t>65535&&(e+=m((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+m(t)})).join("")}function x(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function j(t,e,r){var n=0;for(t=r?f(t/700):t>>1,t+=f(t/e);t>455;n+=i)t=f(t/35);return f(n+36*t/(t+38))}function w(t){var e,r,n,s,o,a,l,c,u,p,m,g=[],v=t.length,b=0,x=128,w=72;for((r=t.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&d("not-basic"),g.push(t.charCodeAt(n));for(s=r>0?r+1:0;s<v;){for(o=b,a=1,l=i;s>=v&&d("invalid-input"),((c=(m=t.charCodeAt(s++))-48<10?m-22:m-65<26?m-65:m-97<26?m-97:i)>=i||c>f((h-b)/a))&&d("overflow"),b+=c*a,!(c<(u=l<=w?1:l>=w+26?26:l-w));l+=i)a>f(h/(p=i-u))&&d("overflow"),a*=p;w=j(b-o,e=g.length+1,0==o),f(b/e)>h-x&&d("overflow"),x+=f(b/e),b%=e,g.splice(b++,0,x)}return y(g)}function C(t){var e,r,n,s,o,a,l,c,u,p,g,v,y,w,C,O=[];for(v=(t=b(t)).length,e=128,r=0,o=72,a=0;a<v;++a)(g=t[a])<128&&O.push(m(g));for(n=s=O.length,s&&O.push("-");n<v;){for(l=h,a=0;a<v;++a)(g=t[a])>=e&&g<l&&(l=g);for(l-e>f((h-r)/(y=n+1))&&d("overflow"),r+=(l-e)*y,e=l,a=0;a<v;++a)if((g=t[a])<e&&++r>h&&d("overflow"),g==e){for(c=r,u=i;!(c<(p=u<=o?1:u>=o+26?26:u-o));u+=i)C=c-p,w=i-p,O.push(m(x(p+C%w,0))),c=f(C/w);O.push(m(x(c,0))),o=j(r,y,n==s),r=0,++n}++r,++e}return O.join("")}a={version:"1.3.2",ucs2:{decode:b,encode:y},decode:w,encode:C,toASCII:function(t){return v(t,(function(t){return c.test(t)?"xn--"+C(t):t}))},toUnicode:function(t){return v(t,(function(t){return l.test(t)?w(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return a}.call(e,r,e,t))||(t.exports=n)}()},8575:(t,e,r)=>{"use strict";var n=r(2511),s=r(2502);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.Qc=y;var a=/^([a-z0-9.+-]+:)/i,h=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),u=["%","/","?",";","#"].concat(c),p=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,m=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,d={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r(7673);function y(t,e,r){if(t&&s.isObject(t)&&t instanceof o)return t;var n=new o;return n.parse(t,e,r),n}o.prototype.parse=function(t,e,r){if(!s.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var o=t.indexOf("?"),h=-1!==o&&o<t.indexOf("#")?"?":"#",l=t.split(h);l[0]=l[0].replace(/\\/g,"/");var y=t=l.join(h);if(y=y.trim(),!r&&1===t.split("#").length){var x=i.exec(y);if(x)return this.path=y,this.href=y,this.pathname=x[1],x[2]?(this.search=x[2],this.query=e?b.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var j=a.exec(y);if(j){var w=(j=j[0]).toLowerCase();this.protocol=w,y=y.substr(j.length)}if(r||j||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var C="//"===y.substr(0,2);!C||j&&g[j]||(y=y.substr(2),this.slashes=!0)}if(!g[j]&&(C||j&&!v[j])){for(var O,A,k=-1,q=0;q<p.length;q++)-1!==(I=y.indexOf(p[q]))&&(-1===k||I<k)&&(k=I);for(-1!==(A=-1===k?y.lastIndexOf("@"):y.lastIndexOf("@",k))&&(O=y.slice(0,A),y=y.slice(A+1),this.auth=decodeURIComponent(O)),k=-1,q=0;q<u.length;q++){var I;-1!==(I=y.indexOf(u[q]))&&(-1===k||I<k)&&(k=I)}-1===k&&(k=y.length),this.host=y.slice(0,k),y=y.slice(k),this.parseHost(),this.hostname=this.hostname||"";var E="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!E)for(var U=this.hostname.split(/\./),Z=(q=0,U.length);q<Z;q++){var R=U[q];if(R&&!R.match(f)){for(var _="",F=0,L=R.length;F<L;F++)R.charCodeAt(F)>127?_+="x":_+=R[F];if(!_.match(f)){var N=U.slice(0,q),S=U.slice(q+1),z=R.match(m);z&&(N.push(z[1]),S.unshift(z[2])),S.length&&(y="/"+S.join(".")+y),this.hostname=N.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),E||(this.hostname=n.toASCII(this.hostname));var $=this.port?":"+this.port:"",P=this.hostname||"";this.host=P+$,this.href+=this.host,E&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!d[w])for(q=0,Z=c.length;q<Z;q++){var T=c[q];if(-1!==y.indexOf(T)){var B=encodeURIComponent(T);B===T&&(B=escape(T)),y=y.split(T).join(B)}}var H=y.indexOf("#");-1!==H&&(this.hash=y.substr(H),y=y.slice(0,H));var K=y.indexOf("?");if(-1!==K?(this.search=y.substr(K),this.query=y.substr(K+1),e&&(this.query=b.parse(this.query)),y=y.slice(0,K)):e&&(this.search="",this.query={}),y&&(this.pathname=y),v[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){$=this.pathname||"";var Q=this.search||"";this.path=$+Q}return this.href=this.format(),this},o.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,a="";this.host?o=t+this.host:this.hostname&&(o=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&s.isObject(this.query)&&Object.keys(this.query).length&&(a=b.stringify(this.query));var h=this.search||a&&"?"+a||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),h&&"?"!==h.charAt(0)&&(h="?"+h),e+o+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(h=h.replace("#","%23"))+n},o.prototype.resolve=function(t){return this.resolveObject(y(t,!1,!0)).format()},o.prototype.resolveObject=function(t){if(s.isString(t)){var e=new o;e.parse(t,!1,!0),t=e}for(var r=new o,n=Object.keys(this),a=0;a<n.length;a++){var h=n[a];r[h]=this[h]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var i=Object.keys(t),l=0;l<i.length;l++){var c=i[l];"protocol"!==c&&(r[c]=t[c])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!v[t.protocol]){for(var u=Object.keys(t),p=0;p<u.length;p++){var f=u[p];r[f]=t[f]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||g[t.protocol])r.pathname=t.pathname;else{for(var m=(t.pathname||"").split("/");m.length&&!(t.host=m.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==m[0]&&m.unshift(""),m.length<2&&m.unshift(""),r.pathname=m.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var d=r.pathname||"",b=r.search||"";r.path=d+b}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),x=t.host||t.pathname&&"/"===t.pathname.charAt(0),j=x||y||r.host&&t.pathname,w=j,C=r.pathname&&r.pathname.split("/")||[],O=(m=t.pathname&&t.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(O&&(r.hostname="",r.port=null,r.host&&(""===C[0]?C[0]=r.host:C.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===m[0]?m[0]=t.host:m.unshift(t.host)),t.host=null),j=j&&(""===m[0]||""===C[0])),x)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,C=m;else if(m.length)C||(C=[]),C.pop(),C=C.concat(m),r.search=t.search,r.query=t.query;else if(!s.isNullOrUndefined(t.search))return O&&(r.hostname=r.host=C.shift(),(E=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=E.shift(),r.host=r.hostname=E.shift())),r.search=t.search,r.query=t.query,s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r;if(!C.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var A=C.slice(-1)[0],k=(r.host||t.host||C.length>1)&&("."===A||".."===A)||""===A,q=0,I=C.length;I>=0;I--)"."===(A=C[I])?C.splice(I,1):".."===A?(C.splice(I,1),q++):q&&(C.splice(I,1),q--);if(!j&&!w)for(;q--;q)C.unshift("..");!j||""===C[0]||C[0]&&"/"===C[0].charAt(0)||C.unshift(""),k&&"/"!==C.join("/").substr(-1)&&C.push("");var E,U=""===C[0]||C[0]&&"/"===C[0].charAt(0);return O&&(r.hostname=r.host=U?"":C.length?C.shift():"",(E=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=E.shift(),r.host=r.hostname=E.shift())),(j=j||r.host&&C.length)&&!U&&C.unshift(""),C.length?r.pathname=C.join("/"):(r.pathname=null,r.path=null),s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var t=this.host,e=h.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},2502:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,